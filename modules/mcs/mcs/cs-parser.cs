// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnome.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar	    (marek.safar@gmail.com)
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004-2011 Novell, Inc
// Copyright 2011-2012 Xamarin Inc.
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

namespace Mono.CSharp
{
	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			ReadOnly = 1 << 7,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue | ReadOnly,
			PrimaryConstructor = Ref | Out | Params | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
		static readonly object RefStructToken = new object ();
		static readonly object RefPartialStructToken = new object ();

		NamespaceContainer current_namespace;
		TypeContainer current_container;
		TypeDefinition current_type;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariable current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;

		bool? interactive_async;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;
		static int class_count;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		List<Parameter> parameters_bucket;
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		List<Tuple<Modifiers, Location>> mod_locations;
		Stack<Location> location_stack;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }
#pragma warning disable 649
  /* An EOF token */
  public int eof_token;
#pragma warning restore 649
  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 7;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declaration opt_EOF",
//t    "$$1 :",
//t    "compilation_unit : interactive_parsing $$1 opt_EOF",
//t    "compilation_unit : documentation_parsing",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations opt_attributes",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives attribute_sections",
//t    "outer_declaration : error",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN_ALIAS error",
//t    "using_directives : using_directive",
//t    "using_directives : using_directives using_directive",
//t    "using_directive : using_namespace",
//t    "using_namespace : USING opt_static namespace_or_type_expr SEMICOLON",
//t    "using_namespace : USING opt_static IDENTIFIER ASSIGN namespace_or_type_expr SEMICOLON",
//t    "using_namespace : USING error",
//t    "opt_static :",
//t    "opt_static : STATIC",
//t    "$$2 :",
//t    "$$3 :",
//t    "namespace_declaration : opt_attributes NAMESPACE namespace_name $$2 OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_namespace_or_type_declarations CLOSE_BRACE opt_semicolon_error",
//t    "namespace_declaration : opt_attributes NAMESPACE namespace_name",
//t    "opt_semicolon_error :",
//t    "opt_semicolon_error : SEMICOLON",
//t    "opt_semicolon_error : error",
//t    "namespace_name : IDENTIFIER",
//t    "namespace_name : namespace_name DOT IDENTIFIER",
//t    "namespace_name : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "opt_using_directives :",
//t    "opt_using_directives : using_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_namespace_or_type_declarations :",
//t    "opt_namespace_or_type_declarations : namespace_or_type_declarations",
//t    "namespace_or_type_declarations : namespace_or_type_declaration",
//t    "namespace_or_type_declarations : namespace_or_type_declarations namespace_or_type_declaration",
//t    "namespace_or_type_declaration : type_declaration",
//t    "namespace_or_type_declaration : namespace_declaration",
//t    "namespace_or_type_declaration : attribute_sections CLOSE_BRACE",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "$$4 :",
//t    "attribute_section : OPEN_BRACKET $$4 attribute_section_cont",
//t    "$$5 :",
//t    "attribute_section_cont : attribute_target COLON $$5 attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section_cont : IDENTIFIER error",
//t    "attribute_section_cont : error",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$6 :",
//t    "attribute : attribute_name $$6 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_expr",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments :",
//t    "attribute_arguments : positional_or_named_argument",
//t    "attribute_arguments : named_attribute_argument",
//t    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
//t    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
//t    "positional_or_named_argument : expression",
//t    "positional_or_named_argument : named_argument",
//t    "positional_or_named_argument : error",
//t    "$$7 :",
//t    "named_attribute_argument : IDENTIFIER ASSIGN $$7 expression",
//t    "named_argument : identifier_inside_body COLON opt_named_modifier named_argument_expr",
//t    "named_argument : identifier_inside_body COLON OUT named_argument_expr_or_out_variable_declaration",
//t    "named_argument_expr : expression_or_error",
//t    "named_argument_expr_or_out_variable_declaration : expression_or_error",
//t    "named_argument_expr_or_out_variable_declaration : out_variable_declaration",
//t    "opt_named_modifier :",
//t    "opt_named_modifier : REF",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : constructor_declaration",
//t    "class_member_declaration : primary_constructor_body",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : attributes_without_members",
//t    "class_member_declaration : incomplete_member",
//t    "class_member_declaration : error",
//t    "$$8 :",
//t    "primary_constructor_body : OPEN_BRACE $$8 opt_statement_list block_end",
//t    "struct_keyword : STRUCT",
//t    "struct_keyword : REF_STRUCT",
//t    "struct_keyword : REF_PARTIAL STRUCT",
//t    "$$9 :",
//t    "$$10 :",
//t    "$$11 :",
//t    "$$12 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial struct_keyword type_declaration_name $$9 opt_primary_parameters opt_class_base opt_type_parameter_constraints_clauses $$10 OPEN_BRACE $$11 opt_class_member_declarations CLOSE_BRACE $$12 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial struct_keyword error",
//t    "$$13 :",
//t    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$13 constant_initializer opt_constant_declarators SEMICOLON",
//t    "constant_declaration : opt_attributes opt_modifiers CONST type error",
//t    "opt_constant_declarators :",
//t    "opt_constant_declarators : constant_declarators",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators constant_declarator",
//t    "constant_declarator : COMMA IDENTIFIER constant_initializer",
//t    "$$14 :",
//t    "constant_initializer : ASSIGN $$14 constant_initializer_expr",
//t    "constant_initializer : error",
//t    "constant_initializer_expr : constant_expression",
//t    "constant_initializer_expr : array_initializer",
//t    "$$15 :",
//t    "field_declaration : opt_attributes opt_modifiers ref_member_type IDENTIFIER $$15 opt_field_initializer opt_field_declarators SEMICOLON",
//t    "$$16 :",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type IDENTIFIER $$16 fixed_field_size opt_fixed_field_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type error SEMICOLON",
//t    "opt_field_initializer :",
//t    "$$17 :",
//t    "opt_field_initializer : ASSIGN $$17 variable_initializer",
//t    "opt_field_declarators :",
//t    "opt_field_declarators : field_declarators",
//t    "field_declarators : field_declarator",
//t    "field_declarators : field_declarators field_declarator",
//t    "field_declarator : COMMA IDENTIFIER",
//t    "$$18 :",
//t    "field_declarator : COMMA IDENTIFIER ASSIGN $$18 variable_initializer",
//t    "opt_fixed_field_declarators :",
//t    "opt_fixed_field_declarators : fixed_field_declarators",
//t    "fixed_field_declarators : fixed_field_declarator",
//t    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
//t    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
//t    "$$19 :",
//t    "fixed_field_size : OPEN_BRACKET $$19 expression CLOSE_BRACKET",
//t    "fixed_field_size : OPEN_BRACKET error",
//t    "variable_initializer : expression",
//t    "variable_initializer : array_initializer",
//t    "variable_initializer : error",
//t    "$$20 :",
//t    "method_declaration : method_header $$20 method_body",
//t    "ref_member_type : member_type",
//t    "$$21 :",
//t    "ref_member_type : REF $$21 type",
//t    "$$22 :",
//t    "ref_member_type : REF READONLY $$22 type",
//t    "$$23 :",
//t    "$$24 :",
//t    "method_header : opt_attributes opt_modifiers ref_member_type method_declaration_name OPEN_PARENS $$23 opt_formal_parameter_list CLOSE_PARENS $$24 opt_type_parameter_constraints_clauses",
//t    "$$25 :",
//t    "$$26 :",
//t    "$$27 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL VOID $$25 method_declaration_name OPEN_PARENS $$26 opt_formal_parameter_list CLOSE_PARENS $$27 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers ref_member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
//t    "method_header : opt_attributes opt_modifiers ref_member_type method_declaration_name error",
//t    "method_body : block",
//t    "method_body : expression_block",
//t    "method_body : SEMICOLON",
//t    "destructor_body : method_body",
//t    "constructor_body : block_prepared",
//t    "constructor_body : SEMICOLON",
//t    "$$28 :",
//t    "constructor_body : ARROW $$28 expression SEMICOLON",
//t    "$$29 :",
//t    "expression_block : ARROW $$29 lambda_arrow_expression SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : arglist_modifier COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : arglist_modifier",
//t    "formal_parameter_list : error",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body OPEN_BRACKET CLOSE_BRACKET",
//t    "fixed_parameter : attribute_sections error",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
//t    "$$30 :",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body ASSIGN $$30 constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_modifier : IN",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
//t    "parameter_array : opt_attributes params_modifier type error",
//t    "params_modifier : PARAMS",
//t    "params_modifier : PARAMS parameter_modifier",
//t    "params_modifier : PARAMS params_modifier",
//t    "arglist_modifier : ARGLIST",
//t    "$$31 :",
//t    "$$32 :",
//t    "$$33 :",
//t    "$$34 :",
//t    "property_declaration : opt_attributes opt_modifiers ref_member_type member_declaration_name $$31 OPEN_BRACE $$32 accessor_declarations $$33 CLOSE_BRACE $$34 opt_property_initializer",
//t    "$$35 :",
//t    "property_declaration : opt_attributes opt_modifiers ref_member_type member_declaration_name $$35 expression_block",
//t    "opt_property_initializer :",
//t    "$$36 :",
//t    "opt_property_initializer : ASSIGN $$36 property_initializer SEMICOLON",
//t    "property_initializer : expression",
//t    "property_initializer : array_initializer",
//t    "$$37 :",
//t    "$$38 :",
//t    "indexer_declaration : opt_attributes opt_modifiers ref_member_type indexer_declaration_name OPEN_BRACKET $$37 opt_formal_parameter_list CLOSE_BRACKET $$38 indexer_body",
//t    "indexer_body : OPEN_BRACE accessor_declarations CLOSE_BRACE",
//t    "indexer_body : expression_block",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$39 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$39 accessor_body",
//t    "$$40 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$40 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : expression_block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$41 :",
//t    "$$42 :",
//t    "$$43 :",
//t    "$$44 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$41 type_declaration_name $$42 opt_class_base opt_type_parameter_constraints_clauses $$43 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$44 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : constructor_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$45 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$45 method_body",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$46 :",
//t    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$46 opt_formal_parameter_list CLOSE_PARENS",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "overloadable_operator : IS",
//t    "$$47 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$47 opt_formal_parameter_list CLOSE_PARENS",
//t    "$$48 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$48 opt_formal_parameter_list CLOSE_PARENS",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "constructor_declaration : constructor_declarator constructor_body",
//t    "$$49 :",
//t    "$$50 :",
//t    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$49 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$50 opt_constructor_initializer",
//t    "opt_constructor_initializer :",
//t    "opt_constructor_initializer : constructor_initializer",
//t    "$$51 :",
//t    "constructor_initializer : COLON BASE OPEN_PARENS $$51 opt_argument_list CLOSE_PARENS",
//t    "$$52 :",
//t    "constructor_initializer : COLON THIS OPEN_PARENS $$52 opt_argument_list CLOSE_PARENS",
//t    "constructor_initializer : COLON error",
//t    "constructor_initializer : error",
//t    "$$53 :",
//t    "destructor_declaration : opt_attributes opt_modifiers TILDE $$53 IDENTIFIER OPEN_PARENS CLOSE_PARENS destructor_body",
//t    "$$54 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$54 opt_event_initializer opt_event_declarators SEMICOLON",
//t    "$$55 :",
//t    "$$56 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$55 event_accessor_declarations $$56 CLOSE_BRACE",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type error",
//t    "opt_event_initializer :",
//t    "$$57 :",
//t    "opt_event_initializer : ASSIGN $$57 event_variable_initializer",
//t    "opt_event_declarators :",
//t    "opt_event_declarators : event_declarators",
//t    "event_declarators : event_declarator",
//t    "event_declarators : event_declarators event_declarator",
//t    "event_declarator : COMMA IDENTIFIER",
//t    "event_declarator : COMMA IDENTIFIER ASSIGN event_variable_initializer",
//t    "$$58 :",
//t    "event_variable_initializer : $$58 variable_initializer",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "$$59 :",
//t    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$59 event_accessor_block",
//t    "$$60 :",
//t    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$60 event_accessor_block",
//t    "event_accessor_block : opt_semicolon",
//t    "event_accessor_block : block",
//t    "event_accessor_block : expression_block",
//t    "attributes_without_members : attribute_sections CLOSE_BRACE",
//t    "incomplete_member : opt_attributes opt_modifiers member_type CLOSE_BRACE",
//t    "$$61 :",
//t    "$$62 :",
//t    "$$63 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$61 OPEN_BRACE $$62 opt_enum_member_declarations $$63 CLOSE_BRACE opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations",
//t    "opt_enum_member_declarations : enum_member_declarations COMMA",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$64 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$64 ASSIGN constant_expression",
//t    "enum_member_declaration : opt_attributes IDENTIFIER error",
//t    "enum_member_declaration : attributes_without_members",
//t    "$$65 :",
//t    "$$66 :",
//t    "$$67 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE ref_member_type type_declaration_name OPEN_PARENS $$65 opt_formal_parameter_list CLOSE_PARENS $$66 opt_type_parameter_constraints_clauses $$67 SEMICOLON",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_expr : member_name",
//t    "namespace_or_type_expr : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "namespace_or_type_expr : qualified_alias_member IDENTIFIER generic_dimension",
//t    "member_name : simple_name_expr",
//t    "member_name : namespace_or_type_expr DOT IDENTIFIER opt_type_argument_list",
//t    "member_name : namespace_or_type_expr DOT IDENTIFIER generic_dimension",
//t    "simple_name_expr : IDENTIFIER opt_type_argument_list",
//t    "simple_name_expr : IDENTIFIER generic_dimension",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$68 :",
//t    "type_declaration_name : IDENTIFIER $$68 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : void_invalid",
//t    "simple_type : type_expression",
//t    "simple_type : void_invalid",
//t    "parameter_type : type_expression_or_array",
//t    "parameter_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_expr opt_nullable",
//t    "type_expression : namespace_or_type_expr pointer_stars",
//t    "type_expression : builtin_type_expression",
//t    "type_expression : OPEN_PARENS tuple_elements CLOSE_PARENS opt_nullable",
//t    "tuple_elements : tuple_element tuple_element_name",
//t    "tuple_elements : tuple_elements COMMA tuple_element tuple_element_name",
//t    "tuple_element_name :",
//t    "tuple_element_name : IDENTIFIER",
//t    "tuple_element : parameter_type",
//t    "void_invalid : VOID",
//t    "builtin_type_expression : builtin_types opt_nullable",
//t    "builtin_type_expression : builtin_types pointer_stars",
//t    "builtin_type_expression : VOID pointer_stars",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "builtin_types : OBJECT",
//t    "builtin_types : STRING",
//t    "builtin_types : BOOL",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "primary_expression : type_name_expression",
//t    "primary_expression : literal",
//t    "primary_expression : array_creation_expression",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : default_value_expression",
//t    "primary_expression : invocation_expression",
//t    "primary_expression : element_access",
//t    "primary_expression : this_access",
//t    "primary_expression : base_access",
//t    "primary_expression : post_increment_expression",
//t    "primary_expression : post_decrement_expression",
//t    "primary_expression : object_or_delegate_creation_expression",
//t    "primary_expression : anonymous_type_expression",
//t    "primary_expression : typeof_expression",
//t    "primary_expression : sizeof_expression",
//t    "primary_expression : checked_expression",
//t    "primary_expression : unchecked_expression",
//t    "primary_expression : pointer_member_access",
//t    "primary_expression : anonymous_method_expression",
//t    "primary_expression : undocumented_expressions",
//t    "primary_expression : interpolated_string",
//t    "primary_expression : default_literal",
//t    "type_name_expression : simple_name_expr",
//t    "type_name_expression : IDENTIFIER GENERATE_COMPLETION",
//t    "type_name_expression : member_access",
//t    "literal : boolean_literal",
//t    "literal : tuple_literal",
//t    "literal : LITERAL",
//t    "literal : NULL",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "tuple_literal : OPEN_PARENS tuple_literal_elements CLOSE_PARENS",
//t    "tuple_literal_elements : tuple_literal_element COMMA tuple_literal_element",
//t    "tuple_literal_elements : tuple_literal_elements COMMA tuple_literal_element",
//t    "tuple_literal_element : expression",
//t    "tuple_literal_element : IDENTIFIER COLON expression",
//t    "interpolated_string : INTERPOLATED_STRING interpolations INTERPOLATED_STRING_END",
//t    "interpolated_string : INTERPOLATED_STRING_END",
//t    "interpolations : interpolation",
//t    "interpolations : interpolations INTERPOLATED_STRING interpolation",
//t    "interpolation : expression",
//t    "interpolation : expression COMMA expression",
//t    "$$69 :",
//t    "interpolation : expression COLON $$69 LITERAL",
//t    "$$70 :",
//t    "interpolation : expression COMMA expression COLON $$70 LITERAL",
//t    "open_parens_any : OPEN_PARENS",
//t    "open_parens_any : OPEN_PARENS_CAST",
//t    "close_parens : CLOSE_PARENS",
//t    "close_parens : COMPLETE_COMPLETION",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
//t    "member_access : primary_expression DOT identifier_inside_body opt_type_argument_list",
//t    "member_access : primary_expression DOT identifier_inside_body generic_dimension",
//t    "member_access : primary_expression INTERR_OPERATOR DOT identifier_inside_body opt_type_argument_list",
//t    "member_access : builtin_types DOT identifier_inside_body opt_type_argument_list",
//t    "member_access : BASE DOT identifier_inside_body opt_type_argument_list",
//t    "member_access : AWAIT DOT identifier_inside_body opt_type_argument_list",
//t    "member_access : qualified_alias_member identifier_inside_body opt_type_argument_list",
//t    "member_access : qualified_alias_member identifier_inside_body generic_dimension",
//t    "member_access : primary_expression DOT GENERATE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
//t    "invocation_expression : primary_expression open_parens_any argument_list error",
//t    "invocation_expression : primary_expression open_parens_any error",
//t    "opt_object_or_collection_initializer :",
//t    "opt_object_or_collection_initializer : object_or_collection_initializer",
//t    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
//t    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer_list : member_initializer_list error",
//t    "member_initializer : IDENTIFIER ASSIGN initializer_value",
//t    "member_initializer : AWAIT ASSIGN initializer_value",
//t    "member_initializer : GENERATE_COMPLETION",
//t    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
//t    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
//t    "member_initializer : OPEN_BRACKET_EXPR argument_list CLOSE_BRACKET ASSIGN initializer_value",
//t    "member_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "initializer_value : expression",
//t    "initializer_value : object_or_collection_initializer",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument_or_named_argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA named_argument",
//t    "argument_list : argument_list COMMA error",
//t    "argument_list : COMMA error",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "argument_or_named_argument : argument",
//t    "argument_or_named_argument : named_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : OUT variable_reference",
//t    "non_simple_argument : OUT out_variable_declaration",
//t    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
//t    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
//t    "out_variable_declaration : variable_type identifier_inside_body",
//t    "variable_reference : expression",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "element_access : primary_expression INTERR_OPERATOR OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR error",
//t    "expression_list : expression_or_error",
//t    "expression_list : expression_list COMMA expression_or_error",
//t    "expression_list_arguments : expression_list_argument",
//t    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
//t    "expression_list_argument : expression",
//t    "expression_list_argument : named_argument",
//t    "this_access : THIS",
//t    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "base_access : BASE OPEN_BRACKET error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
//t    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
//t    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
//t    "array_creation_expression : NEW rank_specifier array_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
//t    "array_creation_expression : NEW new_expr_type error",
//t    "$$71 :",
//t    "new_expr_type : $$71 simple_type",
//t    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
//t    "anonymous_type_expression : NEW OPEN_BRACE GENERATE_COMPLETION",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
//t    "anonymous_type_parameters_opt :",
//t    "anonymous_type_parameters_opt : anonymous_type_parameters",
//t    "anonymous_type_parameters : anonymous_type_parameter",
//t    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
//t    "anonymous_type_parameters : COMPLETE_COMPLETION",
//t    "anonymous_type_parameters : anonymous_type_parameter COMPLETE_COMPLETION",
//t    "anonymous_type_parameter : identifier_inside_body ASSIGN variable_initializer",
//t    "anonymous_type_parameter : identifier_inside_body",
//t    "anonymous_type_parameter : member_access",
//t    "anonymous_type_parameter : error",
//t    "opt_rank_specifier :",
//t    "opt_rank_specifier : rank_specifiers",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "opt_array_initializer :",
//t    "opt_array_initializer : array_initializer",
//t    "array_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "typeof_expression : TYPEOF open_parens_any typeof_type_expression CLOSE_PARENS",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : error",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "sizeof_expression : SIZEOF open_parens_any type error",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "checked_expression : CHECKED error",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED error",
//t    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
//t    "$$72 :",
//t    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$72 block",
//t    "$$73 :",
//t    "anonymous_method_expression : ASYNC DELEGATE opt_anonymous_method_signature $$73 block",
//t    "opt_anonymous_method_signature :",
//t    "opt_anonymous_method_signature : anonymous_method_signature",
//t    "$$74 :",
//t    "anonymous_method_signature : OPEN_PARENS $$74 opt_formal_parameter_list CLOSE_PARENS",
//t    "default_value_expression : DEFAULT_VALUE open_parens_any type CLOSE_PARENS",
//t    "default_literal : DEFAULT",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
//t    "unary_expression : AWAIT prefixed_unary_expression",
//t    "unary_expression : THROW_EXPR prefixed_unary_expression",
//t    "unary_expression : BANG error",
//t    "unary_expression : TILDE error",
//t    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS error",
//t    "unary_expression : AWAIT error",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : STAR prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "prefixed_unary_expression : PLUS error",
//t    "prefixed_unary_expression : MINUS error",
//t    "prefixed_unary_expression : OP_INC error",
//t    "prefixed_unary_expression : OP_DEC error",
//t    "prefixed_unary_expression : STAR error",
//t    "prefixed_unary_expression : BITWISE_AND error",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR error",
//t    "multiplicative_expression : multiplicative_expression DIV error",
//t    "multiplicative_expression : multiplicative_expression PERCENT error",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression PLUS error",
//t    "additive_expression : additive_expression MINUS error",
//t    "additive_expression : additive_expression AS type",
//t    "additive_expression : additive_expression IS pattern_type_expr opt_identifier",
//t    "additive_expression : additive_expression IS pattern_expr",
//t    "additive_expression : additive_expression AS error",
//t    "additive_expression : additive_expression IS error",
//t    "additive_expression : AWAIT IS type",
//t    "additive_expression : AWAIT AS type",
//t    "pattern_type_expr : variable_type",
//t    "pattern_expr : literal",
//t    "pattern_expr : PLUS prefixed_unary_expression",
//t    "pattern_expr : MINUS prefixed_unary_expression",
//t    "pattern_expr : sizeof_expression",
//t    "pattern_expr : default_value_expression",
//t    "pattern_expr : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
//t    "pattern_expr : STAR",
//t    "pattern_expr : pattern_property",
//t    "pattern_property : type_name_expression OPEN_BRACE pattern_property_list CLOSE_BRACE",
//t    "pattern_property_list : pattern_property_entry",
//t    "pattern_property_list : pattern_property_list COMMA pattern_property_entry",
//t    "pattern_property_entry : identifier_inside_body IS pattern",
//t    "pattern : pattern_expr",
//t    "pattern : pattern_type_expr opt_identifier",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT error",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT error",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "relational_expression : relational_expression OP_LT error",
//t    "relational_expression : relational_expression OP_GT error",
//t    "relational_expression : relational_expression OP_LE error",
//t    "relational_expression : relational_expression OP_GE error",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "equality_expression : equality_expression OP_EQ error",
//t    "equality_expression : equality_expression OP_NE error",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "and_expression : and_expression BITWISE_AND error",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET error",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR error",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND error",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR error",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_oper_expr : expression",
//t    "conditional_oper_expr : stackalloc_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR conditional_oper_expr COLON conditional_oper_expr",
//t    "conditional_expression : null_coalescing_expression INTERR conditional_oper_expr COLON THROW prefixed_unary_expression",
//t    "conditional_expression : null_coalescing_expression INTERR reference_expression COLON reference_expression",
//t    "conditional_expression : null_coalescing_expression INTERR conditional_oper_expr error",
//t    "conditional_expression : null_coalescing_expression INTERR conditional_oper_expr COLON error",
//t    "conditional_expression : null_coalescing_expression INTERR conditional_oper_expr COLON CLOSE_BRACE",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "assignment_expression : OPEN_PARENS_DECONSTRUCT deconstruct_assignment CLOSE_PARENS ASSIGN expression",
//t    "assignment_expression : OPEN_PARENS_DECONSTRUCT deconstruct_declaration CLOSE_PARENS ASSIGN expression",
//t    "deconstruct_assignment : expression COMMA expression",
//t    "deconstruct_assignment : deconstruct_assignment COMMA expression",
//t    "deconstruct_declaration : variable_type identifier_inside_body",
//t    "deconstruct_declaration : deconstruct_declaration COMMA variable_type identifier_inside_body",
//t    "deconstruct_declaration : deconstruct_declaration COMMA identifier_inside_body",
//t    "lambda_parameter_list : lambda_parameter",
//t    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
//t    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
//t    "lambda_parameter : parameter_type identifier_inside_body",
//t    "lambda_parameter : IDENTIFIER",
//t    "lambda_parameter : AWAIT",
//t    "opt_lambda_parameter_list :",
//t    "opt_lambda_parameter_list : lambda_parameter_list",
//t    "$$75 :",
//t    "lambda_expression_body : $$75 lambda_arrow_expression",
//t    "lambda_expression_body : block",
//t    "lambda_expression_body : error",
//t    "lambda_arrow_expression : expression",
//t    "lambda_arrow_expression : reference_expression",
//t    "expression_or_error : expression",
//t    "expression_or_error : error",
//t    "$$76 :",
//t    "lambda_expression : IDENTIFIER ARROW $$76 lambda_expression_body",
//t    "$$77 :",
//t    "lambda_expression : AWAIT ARROW $$77 lambda_expression_body",
//t    "$$78 :",
//t    "lambda_expression : ASYNC identifier_inside_body ARROW $$78 lambda_expression_body",
//t    "$$79 :",
//t    "$$80 :",
//t    "lambda_expression : OPEN_PARENS_LAMBDA $$79 opt_lambda_parameter_list CLOSE_PARENS ARROW $$80 lambda_expression_body",
//t    "$$81 :",
//t    "$$82 :",
//t    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$81 opt_lambda_parameter_list CLOSE_PARENS ARROW $$82 lambda_expression_body",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : lambda_expression",
//t    "non_assignment_expression : query_expression",
//t    "non_assignment_expression : ARGLIST",
//t    "undocumented_expressions : REFVALUE OPEN_PARENS non_assignment_expression COMMA type CLOSE_PARENS",
//t    "undocumented_expressions : REFTYPE open_parens_any expression CLOSE_PARENS",
//t    "undocumented_expressions : MAKEREF open_parens_any expression CLOSE_PARENS",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "opt_primary_parameters :",
//t    "opt_primary_parameters : primary_parameters",
//t    "primary_parameters : OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
//t    "opt_primary_parameters_with_class_base :",
//t    "opt_primary_parameters_with_class_base : class_base",
//t    "opt_primary_parameters_with_class_base : primary_parameters",
//t    "opt_primary_parameters_with_class_base : primary_parameters class_base",
//t    "$$83 :",
//t    "opt_primary_parameters_with_class_base : primary_parameters class_base OPEN_PARENS $$83 opt_argument_list CLOSE_PARENS",
//t    "$$84 :",
//t    "$$85 :",
//t    "$$86 :",
//t    "$$87 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$84 type_declaration_name $$85 opt_primary_parameters_with_class_base opt_type_parameter_constraints_clauses $$86 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$87 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : SEALED",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : EXTERN",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "modifier : ASYNC",
//t    "opt_class_base :",
//t    "opt_class_base : class_base",
//t    "class_base : COLON type_list",
//t    "class_base : COLON type_list error",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "opt_type_parameter_variance :",
//t    "opt_type_parameter_variance : type_parameter_variance",
//t    "type_parameter_variance : OUT",
//t    "type_parameter_variance : IN",
//t    "$$88 :",
//t    "block : OPEN_BRACE $$88 opt_statement_list block_end",
//t    "block_end : CLOSE_BRACE",
//t    "block_end : COMPLETE_COMPLETION",
//t    "$$89 :",
//t    "block_prepared : OPEN_BRACE $$89 opt_statement_list CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : block_variable_declaration",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "statement : error",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : block_variable_declaration",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : block_variable_declaration",
//t    "embedded_statement : labeled_statement",
//t    "embedded_statement : error",
//t    "empty_statement : SEMICOLON",
//t    "$$90 :",
//t    "labeled_statement : identifier_inside_body COLON $$90 statement",
//t    "variable_type : variable_type_simple",
//t    "variable_type : variable_type_simple rank_specifiers",
//t    "variable_type_simple : type_name_expression opt_nullable",
//t    "variable_type_simple : type_name_expression pointer_stars",
//t    "variable_type_simple : builtin_type_expression",
//t    "variable_type_simple : tuple_type opt_nullable",
//t    "variable_type_simple : void_invalid",
//t    "tuple_type : OPEN_PARENS tuple_type_elements CLOSE_PARENS",
//t    "tuple_type_elements : variable_type IDENTIFIER COMMA variable_type IDENTIFIER",
//t    "tuple_type_elements : tuple_type_elements COMMA variable_type IDENTIFIER",
//t    "pointer_stars : pointer_star",
//t    "pointer_stars : pointer_star pointer_stars",
//t    "pointer_star : STAR",
//t    "identifier_inside_body : IDENTIFIER",
//t    "identifier_inside_body : AWAIT",
//t    "$$91 :",
//t    "block_variable_declaration : variable_type identifier_inside_body $$91 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
//t    "$$92 :",
//t    "block_variable_declaration : CONST variable_type identifier_inside_body $$92 const_variable_initializer opt_const_declarators SEMICOLON",
//t    "$$93 :",
//t    "block_variable_declaration : REF variable_type identifier_inside_body $$93 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
//t    "$$94 :",
//t    "block_variable_declaration : REF READONLY variable_type identifier_inside_body $$94 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
//t    "opt_local_variable_initializer :",
//t    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
//t    "opt_local_variable_initializer : error",
//t    "opt_variable_declarators :",
//t    "opt_variable_declarators : variable_declarators",
//t    "opt_using_or_fixed_variable_declarators :",
//t    "opt_using_or_fixed_variable_declarators : variable_declarators",
//t    "variable_declarators : variable_declarator",
//t    "variable_declarators : variable_declarators variable_declarator",
//t    "variable_declarator : COMMA identifier_inside_body",
//t    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
//t    "const_variable_initializer :",
//t    "const_variable_initializer : ASSIGN constant_initializer_expr",
//t    "opt_const_declarators :",
//t    "opt_const_declarators : const_declarators",
//t    "const_declarators : const_declarator",
//t    "const_declarators : const_declarators const_declarator",
//t    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
//t    "block_variable_initializer : variable_initializer",
//t    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
//t    "block_variable_initializer : STACKALLOC simple_type",
//t    "block_variable_initializer : reference_expression",
//t    "stackalloc_expression : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
//t    "stackalloc_expression : STACKALLOC simple_type",
//t    "reference_expression : REF expression",
//t    "expression_statement : statement_expression SEMICOLON",
//t    "expression_statement : statement_expression COMPLETE_COMPLETION",
//t    "expression_statement : statement_expression CLOSE_BRACE",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
//t    "statement_expression : expression",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression error",
//t    "$$95 :",
//t    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$95 opt_switch_sections CLOSE_BRACE",
//t    "switch_statement : SWITCH open_parens_any expression error",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_sections",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "switch_sections : error",
//t    "switch_section : switch_labels statement_list",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : CASE constant_expression error",
//t    "switch_label : CASE pattern_type_expr IDENTIFIER COLON",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression error",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
//t    "do_statement : DO embedded_statement error",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression error",
//t    "$$96 :",
//t    "for_statement : FOR open_parens_any $$96 for_statement_cont",
//t    "$$97 :",
//t    "for_statement_cont : opt_for_initializer SEMICOLON $$97 for_condition_and_iterator_part embedded_statement",
//t    "for_statement_cont : error",
//t    "$$98 :",
//t    "for_condition_and_iterator_part : opt_for_condition SEMICOLON $$98 for_iterator_part",
//t    "for_condition_and_iterator_part : opt_for_condition close_parens_close_brace",
//t    "for_iterator_part : opt_for_iterator CLOSE_PARENS",
//t    "for_iterator_part : opt_for_iterator CLOSE_BRACE",
//t    "close_parens_close_brace : CLOSE_PARENS",
//t    "close_parens_close_brace : CLOSE_BRACE",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "$$99 :",
//t    "for_initializer : variable_type identifier_inside_body $$99 opt_local_variable_initializer opt_variable_declarators",
//t    "for_initializer : statement_expression_list",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "foreach_statement : FOREACH open_parens_any type error",
//t    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
//t    "$$100 :",
//t    "foreach_statement : FOREACH open_parens_any type identifier_inside_body IN expression CLOSE_PARENS $$100 embedded_statement",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "break_statement : BREAK SEMICOLON",
//t    "continue_statement : CONTINUE SEMICOLON",
//t    "continue_statement : CONTINUE error",
//t    "goto_statement : GOTO identifier_inside_body SEMICOLON",
//t    "goto_statement : GOTO CASE constant_expression SEMICOLON",
//t    "goto_statement : GOTO DEFAULT SEMICOLON",
//t    "return_statement : RETURN opt_expression SEMICOLON",
//t    "return_statement : RETURN reference_expression SEMICOLON",
//t    "return_statement : RETURN expression error",
//t    "return_statement : RETURN error",
//t    "throw_statement : THROW expression SEMICOLON",
//t    "throw_statement : THROW SEMICOLON",
//t    "throw_statement : THROW expression error",
//t    "throw_statement : THROW error",
//t    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
//t    "yield_statement : identifier_inside_body RETURN expression error",
//t    "yield_statement : identifier_inside_body BREAK SEMICOLON",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "opt_identifier :",
//t    "opt_identifier : identifier_inside_body",
//t    "catch_clause : CATCH opt_catch_filter block",
//t    "$$101 :",
//t    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$101 opt_catch_filter_or_error",
//t    "catch_clause : CATCH open_parens_any error",
//t    "opt_catch_filter_or_error : opt_catch_filter block_prepared",
//t    "opt_catch_filter_or_error : error",
//t    "opt_catch_filter :",
//t    "$$102 :",
//t    "opt_catch_filter : WHEN $$102 open_parens_any expression CLOSE_PARENS",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$103 :",
//t    "unsafe_statement : UNSAFE $$103 block",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "lock_statement : LOCK open_parens_any expression error",
//t    "$$104 :",
//t    "$$105 :",
//t    "fixed_statement : FIXED open_parens_any variable_type identifier_inside_body $$104 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$105 embedded_statement",
//t    "$$106 :",
//t    "$$107 :",
//t    "using_statement : USING open_parens_any variable_type identifier_inside_body $$106 using_initialization CLOSE_PARENS $$107 embedded_statement",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "using_statement : USING open_parens_any expression error",
//t    "using_initialization : using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators",
//t    "using_initialization : error",
//t    "using_or_fixed_variable_initializer :",
//t    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
//t    "query_expression : first_from_clause query_body",
//t    "query_expression : nested_from_clause query_body",
//t    "query_expression : first_from_clause COMPLETE_COMPLETION",
//t    "query_expression : nested_from_clause COMPLETE_COMPLETION",
//t    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
//t    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
//t    "nested_from_clause : FROM identifier_inside_body IN expression",
//t    "nested_from_clause : FROM type identifier_inside_body IN expression",
//t    "$$108 :",
//t    "from_clause : FROM identifier_inside_body IN $$108 expression_or_error",
//t    "$$109 :",
//t    "from_clause : FROM type identifier_inside_body IN $$109 expression_or_error",
//t    "query_body : query_body_clauses select_or_group_clause opt_query_continuation",
//t    "query_body : select_or_group_clause opt_query_continuation",
//t    "query_body : query_body_clauses COMPLETE_COMPLETION",
//t    "query_body : query_body_clauses error",
//t    "query_body : error",
//t    "$$110 :",
//t    "select_or_group_clause : SELECT $$110 expression_or_error",
//t    "$$111 :",
//t    "$$112 :",
//t    "select_or_group_clause : GROUP $$111 expression_or_error $$112 by_expression",
//t    "by_expression : BY expression_or_error",
//t    "by_expression : error",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$113 :",
//t    "let_clause : LET identifier_inside_body ASSIGN $$113 expression_or_error",
//t    "$$114 :",
//t    "where_clause : WHERE $$114 expression_or_error",
//t    "$$115 :",
//t    "$$116 :",
//t    "$$117 :",
//t    "join_clause : JOIN identifier_inside_body IN $$115 expression_or_error ON $$116 expression_or_error EQUALS $$117 expression_or_error opt_join_into",
//t    "$$118 :",
//t    "$$119 :",
//t    "$$120 :",
//t    "join_clause : JOIN type identifier_inside_body IN $$118 expression_or_error ON $$119 expression_or_error EQUALS $$120 expression_or_error opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO identifier_inside_body",
//t    "$$121 :",
//t    "orderby_clause : ORDERBY $$121 orderings",
//t    "orderings : order_by",
//t    "$$122 :",
//t    "orderings : order_by COMMA $$122 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$123 :",
//t    "orderings_then_by : orderings_then_by COMMA $$123 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$124 :",
//t    "opt_query_continuation : INTO identifier_inside_body $$124 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives opt_COMPLETE_COMPLETION",
//t    "$$125 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$125 interactive_statement_list opt_COMPLETE_COMPLETION",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations",
//t    "opt_COMPLETE_COMPLETION :",
//t    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
//t    "close_brace_or_complete_completion : CLOSE_BRACE",
//t    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
//t    "documentation_parsing : DOC_SEE doc_cref",
//t    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
//t    "doc_cref : builtin_types opt_doc_method_sig",
//t    "doc_cref : VOID opt_doc_method_sig",
//t    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
//t    "doc_cref : doc_type_declaration_name DOT THIS",
//t    "$$126 :",
//t    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$126 opt_doc_parameters CLOSE_BRACKET",
//t    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
//t    "doc_type_declaration_name : type_declaration_name",
//t    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
//t    "opt_doc_method_sig :",
//t    "$$127 :",
//t    "opt_doc_method_sig : OPEN_PARENS $$127 opt_doc_parameters CLOSE_PARENS",
//t    "opt_doc_parameters :",
//t    "opt_doc_parameters : doc_parameters",
//t    "doc_parameters : doc_parameter",
//t    "doc_parameters : doc_parameters COMMA doc_parameter",
//t    "doc_parameter : opt_parameter_modifier parameter_type",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DEFAULT_VALUE","DELEGATE","DO","DOUBLE","ELSE","ENUM",
    "EVENT","EXPLICIT","EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR",
    "FOREACH","GOTO","IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL",
    "IS","LOCK","LONG","NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT",
    "OVERRIDE","PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF",
    "RETURN","REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC",
    "STATIC","STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY",
    "TYPEOF","UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING",
    "VIRTUAL","VOID","VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL",
    "ARROW","FROM","FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP",
    "BY","LET","ORDERBY","ASCENDING","DESCENDING","INTO",
    "INTERR_NULLABLE","EXTERN_ALIAS","REFVALUE","REFTYPE","MAKEREF",
    "ASYNC","AWAIT","INTERR_OPERATOR","WHEN","INTERPOLATED_STRING",
    "INTERPOLATED_STRING_END","THROW_EXPR","GET","SET","LAST_KEYWORD",
    "OPEN_BRACE","CLOSE_BRACE","OPEN_BRACKET","CLOSE_BRACKET",
    "OPEN_PARENS","CLOSE_PARENS","DOT","COMMA","COLON","SEMICOLON",
    "TILDE","PLUS","MINUS","BANG","ASSIGN","OP_LT","OP_GT","BITWISE_AND",
    "BITWISE_OR","STAR","PERCENT","DIV","CARRET","INTERR","DOUBLE_COLON",
    "OP_INC","OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_LE","OP_GE",
    "OP_EQ","OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN","OP_DIV_ASSIGN",
    "OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "OPEN_PARENS_DECONSTRUCT","REF_STRUCT","REF_PARTIAL",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

#pragma warning disable 414
  int yyExpectingState;
#pragma warning restore 414
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
#pragma warning disable 649
	protected bool use_global_stacks;
#pragma warning restore 649
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 392 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
#line 393 "cs-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
  case_6();
  break;
case 7:
  case_7();
  break;
case 8:
  case_8();
  break;
case 13:
  case_13();
  break;
case 14:
#line 468 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 17:
  case_17();
  break;
case 18:
  case_18();
  break;
case 19:
  case_19();
  break;
case 20:
  case_20();
  break;
case 23:
  case_23();
  break;
case 24:
  case_24();
  break;
case 25:
  case_25();
  break;
case 26:
  case_26();
  break;
case 29:
  case_29();
  break;
case 30:
  case_30();
  break;
case 31:
  case_31();
  break;
case 32:
  case_32();
  break;
case 45:
  case_45();
  break;
case 46:
#line 671 "cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 47:
  case_47();
  break;
case 55:
  case_55();
  break;
case 56:
  case_56();
  break;
case 57:
  case_57();
  break;
case 58:
  case_58();
  break;
case 59:
  case_59();
  break;
case 60:
  case_60();
  break;
case 61:
  case_61();
  break;
case 62:
  case_62();
  break;
case 63:
  case_63();
  break;
case 64:
  case_64();
  break;
case 65:
#line 797 "cs-parser.jay"
  { yyVal = "event"; }
  break;
case 66:
#line 798 "cs-parser.jay"
  { yyVal = "return"; }
  break;
case 67:
#line 805 "cs-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 68:
  case_68();
  break;
case 69:
#line 822 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 70:
  case_70();
  break;
case 72:
#line 841 "cs-parser.jay"
  { yyVal = null; }
  break;
case 73:
#line 845 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 74:
#line 850 "cs-parser.jay"
  { yyVal = null; }
  break;
case 75:
  case_75();
  break;
case 76:
  case_76();
  break;
case 77:
  case_77();
  break;
case 78:
  case_78();
  break;
case 79:
#line 892 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 81:
  case_81();
  break;
case 82:
#line 905 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 83:
  case_83();
  break;
case 84:
  case_84();
  break;
case 85:
  case_85();
  break;
case 89:
#line 949 "cs-parser.jay"
  { yyVal = null; }
  break;
case 90:
#line 953 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 93:
  case_93();
  break;
case 94:
  case_94();
  break;
case 108:
  case_108();
  break;
case 109:
  case_109();
  break;
case 110:
  case_110();
  break;
case 111:
#line 1028 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 112:
  case_112();
  break;
case 113:
  case_113();
  break;
case 114:
  case_114();
  break;
case 115:
  case_115();
  break;
case 116:
  case_116();
  break;
case 117:
  case_117();
  break;
case 118:
  case_118();
  break;
case 119:
#line 1113 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 120:
  case_120();
  break;
case 121:
  case_121();
  break;
case 122:
  case_122();
  break;
case 125:
#line 1162 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 126:
#line 1166 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 127:
  case_127();
  break;
case 128:
#line 1182 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 129:
  case_129();
  break;
case 130:
  case_130();
  break;
case 133:
  case_133();
  break;
case 134:
  case_134();
  break;
case 135:
  case_135();
  break;
case 136:
  case_136();
  break;
case 137:
#line 1260 "cs-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 139:
  case_139();
  break;
case 140:
  case_140();
  break;
case 143:
#line 1290 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 144:
#line 1294 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 145:
  case_145();
  break;
case 146:
#line 1307 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 147:
  case_147();
  break;
case 150:
#line 1326 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 151:
#line 1330 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 152:
  case_152();
  break;
case 153:
#line 1346 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 154:
  case_154();
  break;
case 155:
  case_155();
  break;
case 158:
  case_158();
  break;
case 159:
  case_159();
  break;
case 160:
  case_160();
  break;
case 161:
#line 1410 "cs-parser.jay"
  {
	  	yyVal = yyVals[0+yyTop];
	  }
  break;
case 162:
#line 1414 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 163:
  case_163();
  break;
case 164:
#line 1426 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 165:
  case_165();
  break;
case 166:
#line 1444 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 167:
  case_167();
  break;
case 168:
  case_168();
  break;
case 169:
#line 1484 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 170:
  case_170();
  break;
case 171:
#line 1494 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 172:
  case_172();
  break;
case 173:
  case_173();
  break;
case 174:
  case_174();
  break;
case 177:
#line 1568 "cs-parser.jay"
  { yyVal = null; }
  break;
case 180:
#line 1577 "cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 181:
  case_181();
  break;
case 182:
  case_182();
  break;
case 183:
  case_183();
  break;
case 184:
  case_184();
  break;
case 185:
#line 1618 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 187:
  case_187();
  break;
case 188:
  case_188();
  break;
case 189:
  case_189();
  break;
case 190:
  case_190();
  break;
case 191:
  case_191();
  break;
case 192:
  case_192();
  break;
case 193:
  case_193();
  break;
case 194:
#line 1676 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 195:
#line 1680 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 196:
  case_196();
  break;
case 197:
  case_197();
  break;
case 198:
  case_198();
  break;
case 199:
  case_199();
  break;
case 200:
  case_200();
  break;
case 201:
  case_201();
  break;
case 202:
  case_202();
  break;
case 203:
#line 1758 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 204:
  case_204();
  break;
case 205:
#line 1799 "cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 207:
#line 1807 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 208:
  case_208();
  break;
case 209:
  case_209();
  break;
case 210:
  case_210();
  break;
case 211:
  case_211();
  break;
case 212:
  case_212();
  break;
case 213:
  case_213();
  break;
case 214:
  case_214();
  break;
case 215:
  case_215();
  break;
case 216:
  case_216();
  break;
case 217:
  case_217();
  break;
case 218:
#line 1906 "cs-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 219:
  case_219();
  break;
case 220:
  case_220();
  break;
case 221:
  case_221();
  break;
case 222:
  case_222();
  break;
case 223:
  case_223();
  break;
case 224:
#line 1966 "cs-parser.jay"
  {
		current_property = null;
	  }
  break;
case 225:
  case_225();
  break;
case 226:
  case_226();
  break;
case 228:
  case_228();
  break;
case 229:
  case_229();
  break;
case 232:
#line 2034 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue | ParameterModifierType.ReadOnly;
	  }
  break;
case 233:
  case_233();
  break;
case 234:
  case_234();
  break;
case 235:
#line 2090 "cs-parser.jay"
  {
		lbag.AppendToMember (current_property, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 236:
  case_236();
  break;
case 241:
  case_241();
  break;
case 242:
  case_242();
  break;
case 243:
  case_243();
  break;
case 244:
  case_244();
  break;
case 245:
  case_245();
  break;
case 248:
  case_248();
  break;
case 249:
  case_249();
  break;
case 250:
#line 2229 "cs-parser.jay"
  {
	  }
  break;
case 251:
  case_251();
  break;
case 252:
  case_252();
  break;
case 253:
  case_253();
  break;
case 254:
  case_254();
  break;
case 255:
#line 2269 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 258:
  case_258();
  break;
case 259:
  case_259();
  break;
case 260:
#line 2294 "cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 261:
#line 2298 "cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 266:
#line 2306 "cs-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 267:
#line 2310 "cs-parser.jay"
  {
	  	report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 268:
#line 2314 "cs-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 269:
#line 2320 "cs-parser.jay"
  {
	  }
  break;
case 270:
  case_270();
  break;
case 272:
  case_272();
  break;
case 273:
  case_273();
  break;
case 274:
  case_274();
  break;
case 276:
#line 2411 "cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 277:
#line 2412 "cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 278:
#line 2413 "cs-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 279:
#line 2414 "cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 280:
#line 2415 "cs-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 281:
#line 2416 "cs-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 282:
#line 2418 "cs-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 283:
#line 2419 "cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 284:
#line 2421 "cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 285:
#line 2422 "cs-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 286:
#line 2423 "cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 287:
#line 2424 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 288:
#line 2425 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 289:
#line 2426 "cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 290:
#line 2427 "cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 291:
#line 2428 "cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 292:
#line 2429 "cs-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 293:
#line 2430 "cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 294:
#line 2431 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 295:
#line 2432 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 296:
#line 2433 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 297:
#line 2434 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 298:
  case_298();
  break;
case 299:
#line 2448 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue | ParameterModifierType.ReadOnly;
	  }
  break;
case 300:
  case_300();
  break;
case 301:
#line 2471 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue | ParameterModifierType.ReadOnly;
	  }
  break;
case 302:
  case_302();
  break;
case 303:
  case_303();
  break;
case 304:
  case_304();
  break;
case 305:
  case_305();
  break;
case 306:
  case_306();
  break;
case 307:
  case_307();
  break;
case 308:
  case_308();
  break;
case 311:
#line 2597 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 312:
  case_312();
  break;
case 313:
#line 2607 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 314:
  case_314();
  break;
case 315:
  case_315();
  break;
case 316:
  case_316();
  break;
case 317:
  case_317();
  break;
case 318:
  case_318();
  break;
case 319:
  case_319();
  break;
case 320:
  case_320();
  break;
case 321:
  case_321();
  break;
case 322:
  case_322();
  break;
case 323:
  case_323();
  break;
case 324:
  case_324();
  break;
case 326:
#line 2730 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 327:
  case_327();
  break;
case 330:
#line 2747 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 331:
#line 2751 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 332:
  case_332();
  break;
case 333:
  case_333();
  break;
case 334:
  case_334();
  break;
case 335:
  case_335();
  break;
case 338:
  case_338();
  break;
case 339:
  case_339();
  break;
case 340:
  case_340();
  break;
case 341:
  case_341();
  break;
case 342:
  case_342();
  break;
case 343:
  case_343();
  break;
case 344:
  case_344();
  break;
case 345:
  case_345();
  break;
case 348:
  case_348();
  break;
case 349:
  case_349();
  break;
case 350:
  case_350();
  break;
case 351:
  case_351();
  break;
case 352:
  case_352();
  break;
case 353:
  case_353();
  break;
case 355:
#line 2956 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	 }
  break;
case 356:
  case_356();
  break;
case 359:
#line 2970 "cs-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 361:
  case_361();
  break;
case 362:
  case_362();
  break;
case 363:
  case_363();
  break;
case 364:
  case_364();
  break;
case 365:
  case_365();
  break;
case 367:
#line 3044 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue | ParameterModifierType.ReadOnly;
	  }
  break;
case 368:
  case_368();
  break;
case 369:
#line 3063 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 370:
  case_370();
  break;
case 372:
  case_372();
  break;
case 374:
  case_374();
  break;
case 375:
  case_375();
  break;
case 377:
  case_377();
  break;
case 378:
  case_378();
  break;
case 379:
  case_379();
  break;
case 380:
  case_380();
  break;
case 382:
  case_382();
  break;
case 383:
  case_383();
  break;
case 384:
  case_384();
  break;
case 385:
  case_385();
  break;
case 386:
#line 3182 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 387:
  case_387();
  break;
case 388:
  case_388();
  break;
case 390:
  case_390();
  break;
case 391:
  case_391();
  break;
case 392:
  case_392();
  break;
case 393:
  case_393();
  break;
case 394:
  case_394();
  break;
case 395:
  case_395();
  break;
case 397:
  case_397();
  break;
case 398:
  case_398();
  break;
case 399:
  case_399();
  break;
case 400:
  case_400();
  break;
case 401:
  case_401();
  break;
case 403:
#line 3300 "cs-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 404:
#line 3307 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 410:
  case_410();
  break;
case 412:
#line 3337 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 413:
  case_413();
  break;
case 414:
#line 3356 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 416:
  case_416();
  break;
case 417:
  case_417();
  break;
case 418:
  case_418();
  break;
case 422:
  case_422();
  break;
case 423:
  case_423();
  break;
case 424:
#line 3423 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 425:
#line 3427 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 426:
  case_426();
  break;
case 427:
  case_427();
  break;
case 428:
  case_428();
  break;
case 429:
#line 3460 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 430:
#line 3461 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 431:
#line 3462 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (yyVals[0+yyTop])); }
  break;
case 432:
#line 3463 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 433:
#line 3464 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 434:
#line 3465 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 436:
#line 3470 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 437:
#line 3471 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 438:
#line 3472 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 439:
#line 3473 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 440:
#line 3474 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 441:
#line 3475 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 442:
#line 3476 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 443:
#line 3477 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 444:
#line 3478 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 468:
  case_468();
  break;
case 473:
#line 3524 "cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 474:
#line 3528 "cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 475:
#line 3529 "cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 476:
  case_476();
  break;
case 477:
  case_477();
  break;
case 478:
  case_478();
  break;
case 479:
#line 3560 "cs-parser.jay"
  {
		yyVal = new TupleLiteralElement ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 480:
  case_480();
  break;
case 481:
  case_481();
  break;
case 482:
  case_482();
  break;
case 483:
  case_483();
  break;
case 484:
  case_484();
  break;
case 485:
#line 3605 "cs-parser.jay"
  {
		yyVal = new InterpolatedStringInsert ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 486:
  case_486();
  break;
case 487:
#line 3615 "cs-parser.jay"
  {
		lexer.parsing_interpolation_format = true;
	  }
  break;
case 488:
  case_488();
  break;
case 489:
#line 3627 "cs-parser.jay"
  {
		lexer.parsing_interpolation_format = true;
	  }
  break;
case 490:
  case_490();
  break;
case 495:
  case_495();
  break;
case 496:
#line 3669 "cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 497:
  case_497();
  break;
case 498:
  case_498();
  break;
case 499:
  case_499();
  break;
case 500:
  case_500();
  break;
case 501:
  case_501();
  break;
case 502:
  case_502();
  break;
case 503:
  case_503();
  break;
case 504:
  case_504();
  break;
case 505:
#line 3730 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 506:
  case_506();
  break;
case 507:
#line 3738 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 508:
  case_508();
  break;
case 509:
  case_509();
  break;
case 510:
  case_510();
  break;
case 511:
  case_511();
  break;
case 512:
#line 3768 "cs-parser.jay"
  { yyVal = null; }
  break;
case 514:
  case_514();
  break;
case 515:
  case_515();
  break;
case 516:
#line 3790 "cs-parser.jay"
  { yyVal = null; }
  break;
case 517:
#line 3794 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 518:
  case_518();
  break;
case 519:
  case_519();
  break;
case 520:
  case_520();
  break;
case 521:
  case_521();
  break;
case 522:
  case_522();
  break;
case 523:
#line 3832 "cs-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 524:
  case_524();
  break;
case 525:
  case_525();
  break;
case 526:
  case_526();
  break;
case 527:
  case_527();
  break;
case 530:
#line 3871 "cs-parser.jay"
  { yyVal = null; }
  break;
case 532:
  case_532();
  break;
case 533:
  case_533();
  break;
case 534:
  case_534();
  break;
case 535:
  case_535();
  break;
case 536:
  case_536();
  break;
case 537:
#line 3923 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 541:
  case_541();
  break;
case 542:
  case_542();
  break;
case 543:
#line 3946 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
	  }
  break;
case 544:
  case_544();
  break;
case 545:
  case_545();
  break;
case 546:
  case_546();
  break;
case 548:
  case_548();
  break;
case 549:
  case_549();
  break;
case 550:
  case_550();
  break;
case 551:
  case_551();
  break;
case 552:
  case_552();
  break;
case 553:
  case_553();
  break;
case 554:
  case_554();
  break;
case 555:
  case_555();
  break;
case 556:
#line 4042 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 558:
#line 4050 "cs-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 559:
  case_559();
  break;
case 560:
  case_560();
  break;
case 561:
#line 4070 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 562:
#line 4077 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 563:
  case_563();
  break;
case 564:
  case_564();
  break;
case 565:
  case_565();
  break;
case 566:
  case_566();
  break;
case 567:
  case_567();
  break;
case 568:
  case_568();
  break;
case 569:
  case_569();
  break;
case 570:
#line 4149 "cs-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 571:
  case_571();
  break;
case 572:
  case_572();
  break;
case 573:
#line 4171 "cs-parser.jay"
  {
		yyVal = new EmptyCompletion ();
	  }
  break;
case 576:
#line 4180 "cs-parser.jay"
  { yyVal = null; }
  break;
case 578:
  case_578();
  break;
case 579:
  case_579();
  break;
case 580:
#line 4200 "cs-parser.jay"
  {
		yyVal = new EmptyCompletion ();
	  }
  break;
case 581:
#line 4204 "cs-parser.jay"
  {
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 582:
  case_582();
  break;
case 583:
  case_583();
  break;
case 584:
  case_584();
  break;
case 585:
  case_585();
  break;
case 589:
  case_589();
  break;
case 590:
  case_590();
  break;
case 591:
  case_591();
  break;
case 592:
#line 4264 "cs-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 593:
#line 4268 "cs-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 594:
#line 4275 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 595:
#line 4279 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 596:
  case_596();
  break;
case 597:
  case_597();
  break;
case 598:
  case_598();
  break;
case 599:
  case_599();
  break;
case 600:
  case_600();
  break;
case 602:
  case_602();
  break;
case 603:
  case_603();
  break;
case 604:
  case_604();
  break;
case 605:
  case_605();
  break;
case 606:
  case_606();
  break;
case 607:
  case_607();
  break;
case 608:
  case_608();
  break;
case 609:
  case_609();
  break;
case 610:
  case_610();
  break;
case 611:
  case_611();
  break;
case 612:
#line 4411 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], false, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 613:
#line 4415 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 614:
#line 4419 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], true, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 615:
#line 4423 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 616:
#line 4430 "cs-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 618:
#line 4438 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.ReadOnly;
	  }
  break;
case 619:
  case_619();
  break;
case 620:
  case_620();
  break;
case 621:
  case_621();
  break;
case 623:
#line 4472 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 624:
#line 4476 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 625:
  case_625();
  break;
case 626:
  case_626();
  break;
case 627:
  case_627();
  break;
case 628:
  case_628();
  break;
case 629:
  case_629();
  break;
case 630:
  case_630();
  break;
case 631:
  case_631();
  break;
case 633:
#line 4547 "cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 634:
#line 4551 "cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 635:
#line 4555 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 636:
#line 4559 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 637:
#line 4563 "cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 638:
#line 4567 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 639:
  case_639();
  break;
case 640:
  case_640();
  break;
case 641:
  case_641();
  break;
case 642:
  case_642();
  break;
case 643:
  case_643();
  break;
case 644:
  case_644();
  break;
case 646:
  case_646();
  break;
case 647:
  case_647();
  break;
case 648:
  case_648();
  break;
case 649:
  case_649();
  break;
case 650:
  case_650();
  break;
case 651:
  case_651();
  break;
case 653:
  case_653();
  break;
case 654:
  case_654();
  break;
case 655:
  case_655();
  break;
case 656:
  case_656();
  break;
case 657:
#line 4674 "cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 658:
  case_658();
  break;
case 659:
  case_659();
  break;
case 660:
  case_660();
  break;
case 661:
  case_661();
  break;
case 662:
  case_662();
  break;
case 663:
  case_663();
  break;
case 666:
#line 4731 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 667:
#line 4735 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 670:
  case_670();
  break;
case 671:
#line 4746 "cs-parser.jay"
  {
		yyVal = new WildcardPattern (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 673:
#line 4764 "cs-parser.jay"
  {
		yyVal = new PropertyPattern ((ATypeNameExpression) yyVals[-3+yyTop], (List<PropertyPatternMember>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 674:
  case_674();
  break;
case 675:
  case_675();
  break;
case 676:
  case_676();
  break;
case 678:
  case_678();
  break;
case 680:
  case_680();
  break;
case 681:
  case_681();
  break;
case 682:
  case_682();
  break;
case 683:
  case_683();
  break;
case 685:
  case_685();
  break;
case 686:
  case_686();
  break;
case 687:
  case_687();
  break;
case 688:
  case_688();
  break;
case 689:
  case_689();
  break;
case 690:
  case_690();
  break;
case 691:
  case_691();
  break;
case 692:
  case_692();
  break;
case 694:
  case_694();
  break;
case 695:
  case_695();
  break;
case 696:
  case_696();
  break;
case 697:
  case_697();
  break;
case 699:
  case_699();
  break;
case 700:
  case_700();
  break;
case 702:
  case_702();
  break;
case 703:
  case_703();
  break;
case 705:
  case_705();
  break;
case 706:
  case_706();
  break;
case 708:
  case_708();
  break;
case 709:
  case_709();
  break;
case 711:
  case_711();
  break;
case 712:
  case_712();
  break;
case 714:
  case_714();
  break;
case 718:
  case_718();
  break;
case 719:
  case_719();
  break;
case 720:
  case_720();
  break;
case 721:
  case_721();
  break;
case 722:
  case_722();
  break;
case 723:
  case_723();
  break;
case 724:
  case_724();
  break;
case 725:
  case_725();
  break;
case 726:
  case_726();
  break;
case 727:
  case_727();
  break;
case 728:
  case_728();
  break;
case 729:
  case_729();
  break;
case 730:
  case_730();
  break;
case 731:
  case_731();
  break;
case 732:
  case_732();
  break;
case 733:
  case_733();
  break;
case 734:
  case_734();
  break;
case 735:
  case_735();
  break;
case 736:
  case_736();
  break;
case 737:
  case_737();
  break;
case 738:
  case_738();
  break;
case 739:
  case_739();
  break;
case 740:
  case_740();
  break;
case 741:
  case_741();
  break;
case 742:
  case_742();
  break;
case 743:
  case_743();
  break;
case 744:
  case_744();
  break;
case 745:
  case_745();
  break;
case 746:
  case_746();
  break;
case 747:
  case_747();
  break;
case 748:
#line 5267 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 749:
  case_749();
  break;
case 750:
#line 5277 "cs-parser.jay"
  {
		start_block (Location.Null);
	  }
  break;
case 751:
  case_751();
  break;
case 753:
  case_753();
  break;
case 757:
  case_757();
  break;
case 758:
  case_758();
  break;
case 759:
  case_759();
  break;
case 760:
  case_760();
  break;
case 761:
  case_761();
  break;
case 762:
  case_762();
  break;
case 763:
  case_763();
  break;
case 764:
#line 5349 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.ReadOnly;
	  }
  break;
case 765:
  case_765();
  break;
case 766:
  case_766();
  break;
case 767:
#line 5363 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.ReadOnly;
	  }
  break;
case 768:
  case_768();
  break;
case 769:
  case_769();
  break;
case 775:
#line 5388 "cs-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 776:
  case_776();
  break;
case 777:
  case_777();
  break;
case 778:
  case_778();
  break;
case 780:
#line 5417 "cs-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 781:
#line 5424 "cs-parser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 783:
  case_783();
  break;
case 784:
#line 5445 "cs-parser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 785:
#line 5449 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 786:
#line 5453 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 787:
#line 5457 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 788:
  case_788();
  break;
case 789:
  case_789();
  break;
case 790:
#line 5482 "cs-parser.jay"
  {
	  }
  break;
case 791:
  case_791();
  break;
case 792:
  case_792();
  break;
case 793:
  case_793();
  break;
case 794:
  case_794();
  break;
case 795:
#line 5534 "cs-parser.jay"
  { yyVal = null; }
  break;
case 796:
#line 5536 "cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 797:
  case_797();
  break;
case 798:
#line 5549 "cs-parser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 800:
  case_800();
  break;
case 801:
  case_801();
  break;
case 802:
  case_802();
  break;
case 803:
  case_803();
  break;
case 804:
  case_804();
  break;
case 805:
  case_805();
  break;
case 806:
  case_806();
  break;
case 807:
  case_807();
  break;
case 808:
  case_808();
  break;
case 809:
  case_809();
  break;
case 810:
  case_810();
  break;
case 811:
  case_811();
  break;
case 812:
  case_812();
  break;
case 813:
  case_813();
  break;
case 814:
  case_814();
  break;
case 815:
  case_815();
  break;
case 818:
#line 5671 "cs-parser.jay"
  {
		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 819:
  case_819();
  break;
case 821:
#line 5685 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 822:
  case_822();
  break;
case 823:
  case_823();
  break;
case 824:
  case_824();
  break;
case 825:
  case_825();
  break;
case 826:
  case_826();
  break;
case 827:
  case_827();
  break;
case 828:
  case_828();
  break;
case 829:
  case_829();
  break;
case 830:
#line 5777 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 831:
#line 5781 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 832:
#line 5788 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 833:
  case_833();
  break;
case 834:
#line 5802 "cs-parser.jay"
  {
		yyVal = new VarianceDecl (Variance.Covariant, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 835:
#line 5806 "cs-parser.jay"
  {
		yyVal = new VarianceDecl (Variance.Contravariant, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 836:
  case_836();
  break;
case 837:
#line 5831 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 838:
  case_838();
  break;
case 839:
  case_839();
  break;
case 840:
  case_840();
  break;
case 841:
  case_841();
  break;
case 846:
#line 5875 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 847:
#line 5879 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 849:
  case_849();
  break;
case 852:
#line 5903 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 853:
#line 5907 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 882:
  case_882();
  break;
case 883:
  case_883();
  break;
case 884:
  case_884();
  break;
case 885:
  case_885();
  break;
case 886:
  case_886();
  break;
case 889:
  case_889();
  break;
case 890:
  case_890();
  break;
case 891:
  case_891();
  break;
case 893:
  case_893();
  break;
case 895:
  case_895();
  break;
case 896:
  case_896();
  break;
case 897:
  case_897();
  break;
case 899:
  case_899();
  break;
case 900:
#line 6079 "cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 902:
#line 6087 "cs-parser.jay"
  {
	  	yyVal = Error_AwaitAsIdentifier (yyVals[0+yyTop]);
	  }
  break;
case 903:
  case_903();
  break;
case 904:
  case_904();
  break;
case 905:
  case_905();
  break;
case 906:
  case_906();
  break;
case 907:
  case_907();
  break;
case 908:
  case_908();
  break;
case 909:
  case_909();
  break;
case 910:
  case_910();
  break;
case 912:
  case_912();
  break;
case 913:
  case_913();
  break;
case 917:
  case_917();
  break;
case 920:
  case_920();
  break;
case 921:
  case_921();
  break;
case 922:
#line 6231 "cs-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 923:
#line 6235 "cs-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 928:
  case_928();
  break;
case 930:
  case_930();
  break;
case 931:
  case_931();
  break;
case 933:
  case_933();
  break;
case 934:
  case_934();
  break;
case 935:
  case_935();
  break;
case 936:
  case_936();
  break;
case 937:
#line 6309 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 938:
  case_938();
  break;
case 939:
#line 6319 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 940:
#line 6320 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 941:
  case_941();
  break;
case 942:
  case_942();
  break;
case 943:
  case_943();
  break;
case 946:
  case_946();
  break;
case 947:
  case_947();
  break;
case 948:
  case_948();
  break;
case 949:
#line 6392 "cs-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 950:
  case_950();
  break;
case 951:
  case_951();
  break;
case 952:
#line 6412 "cs-parser.jay"
  {
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
	  }
  break;
case 956:
#line 6422 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 958:
  case_958();
  break;
case 959:
#line 6439 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 960:
  case_960();
  break;
case 961:
  case_961();
  break;
case 962:
  case_962();
  break;
case 963:
#line 6480 "cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 968:
  case_968();
  break;
case 969:
  case_969();
  break;
case 970:
  case_970();
  break;
case 971:
  case_971();
  break;
case 972:
  case_972();
  break;
case 973:
  case_973();
  break;
case 974:
#line 6540 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 975:
  case_975();
  break;
case 976:
  case_976();
  break;
case 977:
  case_977();
  break;
case 978:
  case_978();
  break;
case 979:
#line 6581 "cs-parser.jay"
  {
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[-2+yyTop]), (Location) yyVals[0+yyTop]);
	  }
  break;
case 980:
  case_980();
  break;
case 981:
  case_981();
  break;
case 982:
  case_982();
  break;
case 984:
#line 6609 "cs-parser.jay"
  { lexer.putback ('}'); }
  break;
case 985:
#line 6613 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 987:
  case_987();
  break;
case 988:
  case_988();
  break;
case 990:
#line 6637 "cs-parser.jay"
  { yyVal = null; }
  break;
case 992:
#line 6642 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 996:
  case_996();
  break;
case 997:
  case_997();
  break;
case 998:
  case_998();
  break;
case 999:
  case_999();
  break;
case 1000:
  case_1000();
  break;
case 1007:
  case_1007();
  break;
case 1008:
  case_1008();
  break;
case 1009:
  case_1009();
  break;
case 1010:
  case_1010();
  break;
case 1011:
  case_1011();
  break;
case 1012:
  case_1012();
  break;
case 1013:
  case_1013();
  break;
case 1014:
  case_1014();
  break;
case 1015:
  case_1015();
  break;
case 1016:
  case_1016();
  break;
case 1017:
  case_1017();
  break;
case 1018:
  case_1018();
  break;
case 1019:
  case_1019();
  break;
case 1020:
  case_1020();
  break;
case 1021:
  case_1021();
  break;
case 1022:
  case_1022();
  break;
case 1023:
  case_1023();
  break;
case 1026:
#line 6876 "cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 1027:
  case_1027();
  break;
case 1028:
  case_1028();
  break;
case 1029:
  case_1029();
  break;
case 1030:
  case_1030();
  break;
case 1031:
  case_1031();
  break;
case 1034:
  case_1034();
  break;
case 1035:
  case_1035();
  break;
case 1036:
  case_1036();
  break;
case 1037:
  case_1037();
  break;
case 1038:
#line 6967 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 1039:
  case_1039();
  break;
case 1040:
#line 6979 "cs-parser.jay"
  {
		lexer.parsing_catch_when = false;
	  }
  break;
case 1041:
#line 6983 "cs-parser.jay"
  {
		lexer.parsing_catch_when = false;
	  }
  break;
case 1042:
  case_1042();
  break;
case 1043:
#line 6998 "cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1044:
#line 7005 "cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1045:
  case_1045();
  break;
case 1046:
#line 7015 "cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 1047:
  case_1047();
  break;
case 1048:
  case_1048();
  break;
case 1049:
  case_1049();
  break;
case 1050:
  case_1050();
  break;
case 1051:
  case_1051();
  break;
case 1052:
  case_1052();
  break;
case 1053:
  case_1053();
  break;
case 1054:
  case_1054();
  break;
case 1055:
  case_1055();
  break;
case 1056:
  case_1056();
  break;
case 1058:
  case_1058();
  break;
case 1059:
#line 7119 "cs-parser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 1060:
  case_1060();
  break;
case 1061:
  case_1061();
  break;
case 1062:
  case_1062();
  break;
case 1063:
  case_1063();
  break;
case 1064:
  case_1064();
  break;
case 1065:
  case_1065();
  break;
case 1066:
  case_1066();
  break;
case 1067:
  case_1067();
  break;
case 1068:
  case_1068();
  break;
case 1069:
#line 7223 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1070:
  case_1070();
  break;
case 1071:
#line 7239 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1072:
  case_1072();
  break;
case 1073:
  case_1073();
  break;
case 1074:
  case_1074();
  break;
case 1076:
  case_1076();
  break;
case 1077:
  case_1077();
  break;
case 1078:
#line 7303 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1079:
  case_1079();
  break;
case 1080:
  case_1080();
  break;
case 1081:
  case_1081();
  break;
case 1082:
  case_1082();
  break;
case 1083:
#line 7342 "cs-parser.jay"
  {
	  	yyVal = new object[] { yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]) };
	  }
  break;
case 1084:
  case_1084();
  break;
case 1086:
  case_1086();
  break;
case 1092:
#line 7371 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1093:
  case_1093();
  break;
case 1094:
#line 7390 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1095:
  case_1095();
  break;
case 1096:
  case_1096();
  break;
case 1097:
  case_1097();
  break;
case 1098:
  case_1098();
  break;
case 1099:
  case_1099();
  break;
case 1100:
  case_1100();
  break;
case 1101:
  case_1101();
  break;
case 1102:
  case_1102();
  break;
case 1103:
  case_1103();
  break;
case 1105:
#line 7535 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 1106:
#line 7542 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1107:
  case_1107();
  break;
case 1109:
  case_1109();
  break;
case 1110:
  case_1110();
  break;
case 1112:
  case_1112();
  break;
case 1113:
  case_1113();
  break;
case 1114:
#line 7588 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 1115:
  case_1115();
  break;
case 1116:
  case_1116();
  break;
case 1117:
#line 7605 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 1118:
  case_1118();
  break;
case 1119:
  case_1119();
  break;
case 1121:
  case_1121();
  break;
case 1122:
  case_1122();
  break;
case 1125:
  case_1125();
  break;
case 1126:
  case_1126();
  break;
case 1134:
#line 7730 "cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 1135:
#line 7737 "cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 1136:
  case_1136();
  break;
case 1137:
  case_1137();
  break;
case 1138:
  case_1138();
  break;
case 1139:
#line 7760 "cs-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }
  break;
case 1140:
#line 7764 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.ReadOnly;
	  }
  break;
case 1141:
  case_1141();
  break;
case 1142:
  case_1142();
  break;
case 1143:
  case_1143();
  break;
case 1144:
  case_1144();
  break;
case 1146:
#line 7800 "cs-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 1148:
#line 7808 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.ReadOnly;
	  }
  break;
case 1149:
#line 7812 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 1150:
#line 7819 "cs-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 1152:
  case_1152();
  break;
case 1153:
  case_1153();
  break;
case 1154:
  case_1154();
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_6()
#line 400 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");

			current_namespace.UnattachedAttributes = attrs;
		}
	  }

void case_7()
#line 410 "cs-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[0+yyTop];
		if (attrs != null) {
			foreach (var a in attrs.Attrs) {
				if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
					continue;

				if (a.ExplicitTarget == null)
					report.Error (-1671, a.Location, "Global attributes must have attribute target specified");
			}
		}

		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }

void case_8()
#line 425 "cs-parser.jay"
{
		if (yyToken == Token.EXTERN_ALIAS)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }

void case_13()
#line 445 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias") {
			syntax_error (lt.Location, "`alias' expected");
		} else {
			if (lang_version == LanguageVersion.ISO_1)
				FeatureIsNotAvailable (lt.Location, "external alias");

			lt = (LocatedToken) yyVals[-1+yyTop];
			if (lt.Value == QualifiedAliasMember.GlobalAlias) {
				RootNamespace.Error_GlobalNamespaceRedefined (report, lt.Location);
			}
			
			var na = new UsingExternAlias (new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop]));
			current_namespace.AddUsing (na);
			
			lbag.AddLocation (na, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_17()
#line 478 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_18()
#line 486 "cs-parser.jay"
{
		UsingClause uc;
		if (yyVals[-2+yyTop] != null) {
			if (lang_version <= LanguageVersion.V_5)
				FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "using static");

			uc = new UsingType ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
			lbag.AddLocation (uc, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			uc = new UsingNamespace ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
			lbag.AddLocation (uc, GetLocation (yyVals[0+yyTop]));
		}

		current_namespace.AddUsing (uc);
	  }

void case_19()
#line 502 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
			 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
		}

		if (yyVals[-4+yyTop] != null) {
			report.Error (8085, GetLocation (yyVals[-4+yyTop]), "A `using static' directive cannot be used to declare an alias");
		}

		var un = new UsingAliasNamespace (new SimpleMemberName (lt.Value, lt.Location), (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		current_namespace.AddUsing (un);
		
		lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_20()
#line 519 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }

void case_23()
#line 537 "cs-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[-2+yyTop];
		var name = (MemberName) yyVals[0+yyTop];
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
		var ns = new NamespaceContainer (name, current_namespace);
		current_namespace.AddTypeContainer (ns);
		current_container = current_namespace = ns;
	  }

void case_24()
#line 565 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_25()
#line 570 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			lbag.AddLocation (current_container, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		else
			lbag.AddLocation (current_container, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  
		current_container = current_namespace = current_namespace.Parent;
	  }

void case_26()
#line 579 "cs-parser.jay"
{
		report.Error (1514, lexer.Location, "Unexpected symbol `{0}', expecting `.' or `{{'", GetSymbolName (yyToken));

		var name = (MemberName) yyVals[0+yyTop];		
		var ns = new NamespaceContainer (name, current_namespace);
		lbag.AddLocation (ns, GetLocation (yyVals[-1+yyTop]));
		current_namespace.AddTypeContainer (ns);
	  }

void case_29()
#line 593 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_30()
#line 601 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_31()
#line 606 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_32()
#line 612 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_45()
#line 650 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
				report.Error (1527, ds.Location,
				"Namespace elements cannot be explicitly declared as private, protected, protected internal, or private protected");
			}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
			/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.OptAttributes != null) {
				ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file);
			}
		}
		current_namespace.DeclarationFound = true;
	  }

void case_47()
#line 672 "cs-parser.jay"
{
		current_namespace.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
		lexer.putback ('}');
	  }

void case_55()
#line 705 "cs-parser.jay"
{
		var sect = (List<Attribute>) yyVals[0+yyTop];
		yyVal = new Attributes (sect);
	  }

void case_56()
#line 710 "cs-parser.jay"
{
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = (List<Attribute>) yyVals[0+yyTop];
		if (attrs == null)
			attrs = new Attributes (sect);
		else if (sect != null)
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }

void case_57()
#line 723 "cs-parser.jay"
{
	  	PushLocation (GetLocation (yyVals[0+yyTop]));
		lexer.parsing_attribute_section = true;
	  }

void case_58()
#line 728 "cs-parser.jay"
{
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_59()
#line 736 "cs-parser.jay"
{
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }

void case_60()
#line 743 "cs-parser.jay"
{
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];

		lbag.InsertLocation (yyVal, 0, PopLocation ());
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_attr_target = null;
		lexer.parsing_attribute_section = false;
 	  }

void case_61()
#line 761 "cs-parser.jay"
{
		yyVal = yyVals[-2+yyTop];

		lbag.InsertLocation (yyVal, 0, PopLocation ());
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (yyVal, GetLocation(yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (yyVal, GetLocation(yyVals[0+yyTop]));
		}
	  }

void case_62()
#line 772 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-1+yyTop];
		var tne = new SimpleName (lt.Value, null, lt.Location);

		yyVal = new List<Attribute> () {
			new Attribute (null, tne, null, GetLocation (yyVals[-1+yyTop]), false)
		};
	  }

void case_63()
#line 783 "cs-parser.jay"
{
		if (CheckAttributeTarget (yyToken, GetTokenName (yyToken), GetLocation (yyVals[0+yyTop])).Length > 0)
			Error_SyntaxError (yyToken);

 		yyVal = null;
	  }

void case_64()
#line 793 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (yyToken, lt.Value, lt.Location);
	  }

void case_68()
#line 807 "cs-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		if (attrs != null) {
			attrs.Add ((Attribute) yyVals[0+yyTop]);
	  		lbag.AppendTo (attrs, GetLocation (yyVals[-1+yyTop]));
	  	}

		yyVal = attrs;
	  }

void case_70()
#line 824 "cs-parser.jay"
{
		--lexer.parsing_block;
		
		var tne = (ATypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) {
			report.Error (404, tne.Location, "Attributes cannot be generic");
		}

		yyVal = new Attribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
	  }

void case_75()
#line 852 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_76()
#line 858 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_77()
#line 864 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (lang_version < LanguageVersion.V_7_2 && args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
	  }

void case_78()
#line 878 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	  }

void case_81()
#line 895 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_83()
#line 907 "cs-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_84()
#line 917 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_85()
#line 929 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");

		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_93()
#line 963 "cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_94()
#line 968 "cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_108()
#line 989 "cs-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_109()
#line 999 "cs-parser.jay"
{
		current_local_parameters = current_type.PrimaryConstructorParameters;
		if (current_local_parameters == null) {
			report.Error (9010, GetLocation (yyVals[0+yyTop]), "Primary constructor body is not allowed");
			current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		}

		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_110()
#line 1010 "cs-parser.jay"
{
		current_local_parameters = null;
		var t = current_type as ClassOrStruct;
		if (t != null) {
			var b = (ToplevelBlock) yyVals[0+yyTop];
			if (t.PrimaryConstructorBlock != null) {
				report.Error (8041, b.StartLocation, "Primary constructor already has a body");
			} else {
				t.PrimaryConstructorBlock = b;
			}
		}
	  }

void case_112()
#line 1030 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7_2) {
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "ref structs");
		}

		yyVal = RefStructToken;
	  }

void case_113()
#line 1038 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7_2) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "ref structs");
		}

		yyVal = RefPartialStructToken;
	  }

void case_114()
#line 1053 "cs-parser.jay"
{
		var mods = (Modifiers) yyVals[-3+yyTop];
		if ((mods & Modifiers.READONLY) != 0 && lang_version < LanguageVersion.V_7_2) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "readonly structs");
		}
		if (yyVals[-1+yyTop] != null) {
			mods |= Modifiers.REF;
			if (yyVals[-1+yyTop] == RefPartialStructToken) {
				mods |= Modifiers.PARTIAL;
				yyVals[-2+yyTop] = yyVals[-1+yyTop];
			}
		}

		lexer.ConstraintsParsing = true;
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
		push_current_container (new Struct (current_container, (MemberName) yyVals[0+yyTop], mods, (Attributes) yyVals[-4+yyTop]), yyVals[-2+yyTop]);
	  }

void case_115()
#line 1073 "cs-parser.jay"
{
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

		if (yyVals[-2+yyTop] != null)
			current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-2+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-5+yyTop]));
		
		lexer.parsing_modifiers = true;
	  }

void case_116()
#line 1091 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_117()
#line 1096 "cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_118()
#line 1102 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_120()
#line 1120 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new Const (current_type, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }

void case_121()
#line 1133 "cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }

void case_122()
#line 1146 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddMember (new Const (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (Attributes) yyVals[-4+yyTop]));
	  }

void case_127()
#line 1171 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_129()
#line 1184 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_130()
#line 1189 "cs-parser.jay"
{
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_133()
#line 1204 "cs-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (LocatedToken) yyVals[0+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-3+yyTop]);
		current_type.AddField (current_field);
		yyVal = current_field;
	  }

void case_134()
#line 1219 "cs-parser.jay"
{ 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_135()
#line 1232 "cs-parser.jay"
{ 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "fixed size buffers");

		var lt = (LocatedToken) yyVals[0+yyTop];
		current_field = new FixedField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
			
		current_type.AddField (current_field);
	  }

void case_136()
#line 1243 "cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_139()
#line 1266 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_140()
#line 1272 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendToMember (current_field, GetLocation (yyVals[-2+yyTop]));
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_145()
#line 1299 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_147()
#line 1309 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_152()
#line 1335 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_154()
#line 1348 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_155()
#line 1354 "cs-parser.jay"
{
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_158()
#line 1364 "cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_159()
#line 1373 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Was added earlier in the case of body being eof for full ast*/
	  }

void case_160()
#line 1380 "cs-parser.jay"
{
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		async_block = false;
		
		if (method.Block == null) {
			method.ParameterInfo.CheckParameters (method);

			if ((method.ModFlags & Modifiers.ASYNC) != 0) {
				report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
					method.GetSignatureForError ());
			}
		} else {
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
					method.GetSignatureForError ());
			}
		}

		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_163()
#line 1416 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "byref locals and returns");
		}

		yyVal = new ReferenceTypeExpr ((FullNamedExpression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_165()
#line 1428 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7_2) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "readonly references");
		}

		yyVal = new ReferenceTypeExpr ((FullNamedExpression) yyVals[0+yyTop], true, GetLocation (yyVals[-3+yyTop]));
	  }

void case_167()
#line 1446 "cs-parser.jay"
{
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-6+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-7+yyTop]);

		current_type.AddMember (method);

		async_block = (method.ModFlags & Modifiers.ASYNC) != 0;

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = method;

		lexer.ConstraintsParsing = true;
	  }

void case_168()
#line 1468 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null) {
			var method = (Method) yyVals[-1+yyTop];
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		}

		yyVal = yyVals[-1+yyTop];
	  }

void case_170()
#line 1487 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		valid_param_mod = ParameterModifierType.All;
	  }

void case_172()
#line 1496 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		var modifiers = (Modifiers) yyVals[-10+yyTop];
		modifiers |= Modifiers.PARTIAL;

		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-8+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-11+yyTop]);

		current_type.AddMember (method);

		async_block = (method.ModFlags & Modifiers.ASYNC) != 0;

		if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-9+yyTop]));
		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_173()
#line 1527 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-3+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);

		current_type.AddMember (method);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_174()
#line 1548 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

		MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-3+yyTop],
									name, current_local_parameters, (Attributes) yyVals[-4+yyTop]);

		current_type.AddMember (method);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_181()
#line 1579 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7) {
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "expression body constructor");
		}

		++lexer.parsing_block;
	 }

void case_182()
#line 1587 "cs-parser.jay"
{
		lexer.parsing_block = 0;
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		var b = end_block (GetLocation (yyVals[0+yyTop]));
		b.IsCompilerGenerated = true;
		yyVal = b;
		current_block = null;
	 }

void case_183()
#line 1599 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6) {
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "expression bodied members");
		}

		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	 }

void case_184()
#line 1608 "cs-parser.jay"
{
		lexer.parsing_block = 0;
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		var b = end_block (GetLocation (yyVals[0+yyTop]));
		b.IsCompilerGenerated = true;
		yyVal = b;
	 }

void case_187()
#line 1624 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_188()
#line 1629 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  }

void case_189()
#line 1636 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_190()
#line 1642 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }

void case_191()
#line 1649 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_192()
#line 1659 "cs-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }

void case_193()
#line 1665 "cs-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_196()
#line 1682 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_197()
#line 1690 "cs-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_198()
#line 1699 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AddLocation (p, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_199()
#line 1723 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_200()
#line 1731 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Parameter.Modifier) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop], lt.Location);
	  }

void case_201()
#line 1737 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter (null, null, Parameter.Modifier.NONE, (Attributes) yyVals[-1+yyTop], l);
	  }

void case_202()
#line 1746 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], l);
	  }

void case_204()
#line 1760 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-5+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (Attributes) yyVals[-6+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }

void case_208()
#line 1809 "cs-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
		} else if ((mod & ~(Parameter.Modifier.This | Parameter.Modifier.ReadOnly)) == 0) {
			/* ok*/
		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_209()
#line 1835 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_210()
#line 1842 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_211()
#line 1849 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }

void case_212()
#line 1859 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "readonly references");

		yyVal = Parameter.Modifier.ReadOnly;
	  }

void case_213()
#line 1869 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_214()
#line 1874 "cs-parser.jay"
{
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }

void case_215()
#line 1881 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], null, (Attributes) yyVals[-3+yyTop], Location.Null);
	  }

void case_216()
#line 1890 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }

void case_217()
#line 1895 "cs-parser.jay"
{
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref, out or in");
		}	  
	  }

void case_219()
#line 1911 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }

void case_220()
#line 1922 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_221()
#line 1928 "cs-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		current_property = new Property (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_type.AddMember (current_property);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_222()
#line 1942 "cs-parser.jay"
{
		lexer.PropertyParsing = false;

		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();

		if (yyVals[-5+yyTop] is ReferenceTypeExpr) {
			if (current_property.Get == null) {
				report.Error (8146, GetLocation (yyVals[-4+yyTop]), "`{0}': property and indexer which return by reference must have a get accessor", current_property.GetSignatureForError ());
			}

			if (current_property.Set != null) {
				report.Error (8147, GetLocation (yyVals[-4+yyTop]), "`{0}': property and indexer which return by reference cannot have set accessors", current_property.GetSignatureForError ());
			}
		}
	  }

void case_223()
#line 1959 "cs-parser.jay"
{
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		lexer.parsing_modifiers = true;
	  }

void case_225()
#line 1971 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_226()
#line 1978 "cs-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		var property = new Property (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);

		property.Get = new Property.GetMethod (property, Modifiers.COMPILER_GENERATED, null, property.Location);
		property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];

		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, property.Get.Block.StartLocation,
				"`{0}': interface members cannot have a definition", property.GetSignatureForError ());
		}

		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", property.GetSignatureForError ());

		if (doc_support)
			property.DocComment = ConsumeStoredComment ();

		current_type.AddMember (property);

		current_local_parameters = null;
	  }

void case_228()
#line 2006 "cs-parser.jay"
{
		++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_229()
#line 2012 "cs-parser.jay"
{
		--lexer.parsing_block;
		((Property)current_property).Initializer = (Expression) yyVals[-1+yyTop];
		lbag.AppendToMember (current_property, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		end_block (GetLocation (yyVals[0+yyTop]));
		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_233()
#line 2036 "cs-parser.jay"
{
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-5+yyTop];
		Indexer indexer = new Indexer (current_type, type, (MemberName) yyVals[-4+yyTop], (Modifiers) yyVals[-6+yyTop], (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);
			
		current_property = indexer;

  		current_type.AddIndexer (indexer);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-5+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-3+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
	  }

void case_234()
#line 2062 "cs-parser.jay"
{
 		lexer.PropertyParsing = false;
		current_local_parameters = null;

		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();

		if (yyVals[-7+yyTop] is ReferenceTypeExpr) {
			if (current_property.Get == null) {
				report.Error (8146, GetLocation (yyVals[-6+yyTop]), "`{0}': property and indexer which return by reference must have a get accessor", current_property.GetSignatureForError ());
			}

			if (current_property.Set != null) {
				report.Error (8147, GetLocation (yyVals[-6+yyTop]), "`{0}': property and indexer which return by reference cannot have set accessors", current_property.GetSignatureForError ());
			}
		}
			
		current_property = null;		
	  }

void case_236()
#line 2092 "cs-parser.jay"
{
		current_property.Get = new Indexer.GetIndexerMethod (current_property, Modifiers.COMPILER_GENERATED, current_local_parameters, null, current_property.Location);
		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];
	  }

void case_241()
#line 2104 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_242()
#line 2118 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_243()
#line 2140 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_244()
#line 2161 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_245()
#line 2188 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_248()
#line 2211 "cs-parser.jay"
{
		/* TODO: lbag*/
	  	yyVal = null;
	  }

void case_249()
#line 2216 "cs-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_251()
#line 2231 "cs-parser.jay"
{
		lexer.ConstraintsParsing = true;
		push_current_container (new Interface (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_252()
#line 2238 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_253()
#line 2252 "cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_254()
#line 2258 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_258()
#line 2279 "cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_259()
#line 2284 "cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_270()
#line 2322 "cs-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			Operator op = new Operator (
				current_type, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters (op);

			if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_type.AddOperator (op);

			lbag.AddMember (op, mod_locations, lbag.GetLocations (decl));
		}
		
		current_local_parameters = null;
	  }

void case_272()
#line 2351 "cs-parser.jay"
{
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_273()
#line 2359 "cs-parser.jay"
{
		valid_param_mod = ParameterModifierType.DefaultValue | ParameterModifierType.ReadOnly;
		if ((Operator.OpType) yyVals[-1+yyTop] == Operator.OpType.Is)
			valid_param_mod |= ParameterModifierType.Out;
	  }

void case_274()
#line 2365 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else if (op == Operator.OpType.Is) {
			/* TODO: Special checks for is operator*/
		} else {
			if (p_count == 1) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			} else if (p_count != 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_298()
#line 2436 "cs-parser.jay"
{
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "is user operator");

		yyVal = Operator.OpType.Is;
	  }

void case_300()
#line 2450 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  

		if (current_local_parameters.Count != 1) {
			report.Error (1535, loc, "Overloaded unary operator `implicit' takes one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_302()
#line 2473 "cs-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  

		if (current_local_parameters.Count != 1) {
			report.Error (1535, loc, "Overloaded unary operator `explicit' takes one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_303()
#line 2492 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_304()
#line 2498 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_305()
#line 2508 "cs-parser.jay"
{ 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (doc_support)
			c.DocComment = ConsumeStoredComment ();

		current_local_parameters = null;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_306()
#line 2525 "cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }

void case_307()
#line 2534 "cs-parser.jay"
{
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
		
		var lt = (LocatedToken) yyVals[-4+yyTop];
		var mods = (Modifiers) yyVals[-5+yyTop];
		var c = new Constructor (current_type, lt.Value, mods, (Attributes) yyVals[-6+yyTop], current_local_parameters, lt.Location);

		if (lt.Value != current_container.MemberName.Name) {
			report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if (!current_local_parameters.IsEmpty) {
				report.Error (132, c.Location, "`{0}': The static constructor must be parameterless",
					c.GetSignatureForError ());
			}

			if ((mods & Modifiers.AccessibilityMask) != 0){
				report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
		} else {
			if (current_type.Kind == MemberKind.Struct && current_local_parameters.IsEmpty) {
				report.Error (568, c.Location, "Structs cannot contain explicit parameterless constructors");
			}
		}

		current_type.AddConstructor (c);
		lbag.AddMember (c, mod_locations, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;

		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }

void case_308()
#line 2572 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			var c = (Constructor) yyVals[-1+yyTop];
			c.Initializer = (ConstructorInitializer) yyVals[0+yyTop];
			
			if (c.IsStatic) {
				report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			}
		}

		yyVal = yyVals[-1+yyTop];
	  }

void case_312()
#line 2599 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_314()
#line 2609 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_315()
#line 2615 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
		yyVal = new ConstructorThisInitializer (null, GetLocation (yyVals[0+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_316()
#line 2621 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_317()
#line 2629 "cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_318()
#line 2638 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_type, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_type.AddMember (d);
		lbag.AddMember (d, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_319()
#line 2663 "cs-parser.jay"
{
		current_event_field = new EventField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_event_field);
		
		if (current_event_field.MemberName.ExplicitInterface != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_320()
#line 2677 "cs-parser.jay"
{
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_321()
#line 2690 "cs-parser.jay"
{
		current_event = new EventProperty (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_event);
		lbag.AddMember (current_event, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_322()
#line 2698 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_323()
#line 2705 "cs-parser.jay"
{
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_324()
#line 2718 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddMember (new EventField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (Attributes) yyVals[-4+yyTop]));
	  }

void case_327()
#line 2732 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_332()
#line 2756 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_333()
#line 2762 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_334()
#line 2770 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}

		++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		start_block (lexer.Location);
	  }

void case_335()
#line 2786 "cs-parser.jay"
{
		yyVal = yyVals[0+yyTop];

		--lexer.parsing_block;
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_338()
#line 2799 "cs-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_339()
#line 2804 "cs-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_340()
#line 2809 "cs-parser.jay"
{ 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_341()
#line 2817 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_342()
#line 2829 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_343()
#line 2845 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_344()
#line 2857 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_345()
#line 2873 "cs-parser.jay"
{
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_348()
#line 2883 "cs-parser.jay"
{
		current_type.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1519, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }

void case_349()
#line 2894 "cs-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `}' in class, struct, or interface member declaration");
 
		lexer.putback ('}');

	  	lexer.parsing_generic_declaration = false;
		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-2+yyTop], MemberName.Null, (Attributes) yyVals[-3+yyTop]);
		current_type.AddField (current_field);
		yyVal = current_field;
	  }

void case_350()
#line 2912 "cs-parser.jay"
{
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_351()
#line 2917 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new Enum (current_container, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (Attributes) yyVals[-6+yyTop]), null);
	  }

void case_352()
#line 2929 "cs-parser.jay"
{
		lexer.parsing_modifiers = true;
	  
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_353()
#line 2937 "cs-parser.jay"
{
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_356()
#line 2958 "cs-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_361()
#line 2976 "cs-parser.jay"
{
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_362()
#line 2984 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_363()
#line 2997 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_364()
#line 3005 "cs-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_type).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_365()
#line 3019 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-2+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_368()
#line 3046 "cs-parser.jay"
{
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_container, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (MemberName) yyVals[-4+yyTop], p, (Attributes) yyVals[-8+yyTop]);

		p.CheckParameters (del);

		current_container.AddTypeContainer (del);

		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_370()
#line 3065 "cs-parser.jay"
{
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
			current_delegate.SetConstraints ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, mod_locations, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_372()
#line 3084 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_374()
#line 3095 "cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_375()
#line 3103 "cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_377()
#line 3115 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_378()
#line 3121 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_379()
#line 3130 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_380()
#line 3135 "cs-parser.jay"
{  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_382()
#line 3147 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }

void case_383()
#line 3154 "cs-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_384()
#line 3162 "cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_385()
#line 3168 "cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_387()
#line 3184 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }

void case_388()
#line 3193 "cs-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeParameters != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_390()
#line 3204 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (ATypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }

void case_391()
#line 3213 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_392()
#line 3218 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, null, (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_393()
#line 3226 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_394()
#line 3232 "cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-3+yyTop];
		var lt2 = (LocatedToken) yyVals[-2+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_395()
#line 3240 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((ATypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_397()
#line 3250 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_398()
#line 3261 "cs-parser.jay"
{
		var tparams = new TypeParameters ();
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
	  }

void case_399()
#line 3267 "cs-parser.jay"
{
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_400()
#line 3277 "cs-parser.jay"
{
		var lt = (LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameter (new MemberName (lt.Value, lt.Location), (Attributes)yyVals[-2+yyTop], (VarianceDecl) yyVals[-1+yyTop]);
  	  }

void case_401()
#line 3282 "cs-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameter (MemberName.Null, null, null);
  	  }

void case_410()
#line 3326 "cs-parser.jay"
{
		report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_413()
#line 3342 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }

void case_416()
#line 3359 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "tuples");

		var a = (Tuple<TypeArguments, List<string>>) yyVals[-2+yyTop];
		if (a.Item1.Count < 2) {
			report.Error (8124, GetLocation (yyVals[-3+yyTop]), "Tuple must contain at least two elements");
		}

		yyVal = new TupleTypeExpr (a.Item1, a.Item2, GetLocation (yyVals[-3+yyTop]));

		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVal, (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_417()
#line 3377 "cs-parser.jay"
{
		var type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[-1+yyTop]);

		var names = new List<string> (2);
		var lt = (LocatedToken) yyVals[0+yyTop];
		names.Add (lt?.Value);

		yyVal = Tuple.Create (type_args, names);
	  }

void case_418()
#line 3388 "cs-parser.jay"
{
		var a = (Tuple<TypeArguments, List<string>>) yyVals[-3+yyTop];
		a.Item1.Add ((FullNamedExpression) yyVals[-1+yyTop]);
		var lt = (LocatedToken) yyVals[0+yyTop];
		a.Item2.Add (lt?.Value);
		yyVal = a;
	  }

void case_422()
#line 3408 "cs-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_423()
#line 3416 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_426()
#line 3432 "cs-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_427()
#line 3438 "cs-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_428()
#line 3447 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_468()
#line 3513 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_476()
#line 3534 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "tuples");

		yyVal = new TupleLiteral ((List<TupleLiteralElement>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_477()
#line 3544 "cs-parser.jay"
{
		yyVal = new List<TupleLiteralElement> () {
			(TupleLiteralElement) yyVals[-2+yyTop], (TupleLiteralElement) yyVals[0+yyTop]
		};
	  }

void case_478()
#line 3550 "cs-parser.jay"
{
		var list = (List<TupleLiteralElement>)yyVals[-2+yyTop];
		list.Add ((TupleLiteralElement) yyVals[0+yyTop]);
	  }

void case_480()
#line 3562 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new TupleLiteralElement (lt.Value, (Expression) yyVals[0+yyTop], lt.Location);
	  }

void case_481()
#line 3570 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "interpolated strings");

		yyVal = new InterpolatedString ((StringLiteral) yyVals[-2+yyTop], (List<Expression>) yyVals[-1+yyTop], (StringLiteral) yyVals[0+yyTop]);
	  }

void case_482()
#line 3577 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "interpolated strings");

		yyVal = new InterpolatedString ((StringLiteral) yyVals[0+yyTop], null, null);
	  }

void case_483()
#line 3587 "cs-parser.jay"
{
		var list = new List<Expression> ();
		list.Add ((InterpolatedStringInsert) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_484()
#line 3593 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((StringLiteral) yyVals[-1+yyTop]);
		list.Add ((InterpolatedStringInsert) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_486()
#line 3607 "cs-parser.jay"
{
		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-2+yyTop]) {
			Alignment = (Expression)yyVals[0+yyTop]
		};
	  }

void case_488()
#line 3617 "cs-parser.jay"
{
		lexer.parsing_interpolation_format = false;

		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-3+yyTop]) {
			Format = (string)yyVals[0+yyTop]
		};
	  }

void case_490()
#line 3629 "cs-parser.jay"
{
		lexer.parsing_interpolation_format = false;

		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-5+yyTop]) {
			Alignment = (Expression)yyVals[-3+yyTop],
			Format = (string) yyVals[0+yyTop]
		};
	  }

void case_495()
#line 3662 "cs-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_497()
#line 3674 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_498()
#line 3680 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_499()
#line 3686 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "null propagating operator");

		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new ConditionalMemberAccess ((Expression) yyVals[-4+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_500()
#line 3695 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_501()
#line 3701 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_502()
#line 3707 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new SimpleName ("await", ((LocatedToken) yyVals[-3+yyTop]).Location), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_503()
#line 3713 "cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_504()
#line 3721 "cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_506()
#line 3731 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_508()
#line 3739 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_509()
#line 3747 "cs-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_510()
#line 3752 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_511()
#line 3759 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_514()
#line 3774 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = new CollectionOrObjectInitializers (GetLocation (yyVals[-2+yyTop]));
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	}
 		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_515()
#line 3783 "cs-parser.jay"
{
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_518()
#line 3799 "cs-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_519()
#line 3805 "cs-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_520()
#line 3810 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_521()
#line 3818 "cs-parser.jay"
{
	  	var lt = (LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_522()
#line 3824 "cs-parser.jay"
{
	  	var lt = (LocatedToken) Error_AwaitAsIdentifier (yyVals[-2+yyTop]);
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_524()
#line 3833 "cs-parser.jay"
{
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }

void case_525()
#line 3841 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] == null)
			yyVal = new CollectionElementInitializer (GetLocation (yyVals[-2+yyTop]));
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));

		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_526()
#line 3850 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-4+yyTop]), "dictionary initializer");

		yyVal = new DictionaryElementInitializer ((Arguments)yyVals[-3+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_527()
#line 3858 "cs-parser.jay"
{
	  	report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = new CollectionElementInitializer (GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_532()
#line 3877 "cs-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_533()
#line 3883 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (lang_version < LanguageVersion.V_7_2 && list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_534()
#line 3892 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		yyVal = list;
	  }

void case_535()
#line 3906 "cs-parser.jay"
{
	  	if (lexer.putback_char == -1)
	  		lexer.putback (')'); /* TODO: Wrong but what can I do*/
		Error_SyntaxError (yyToken);
		yyVal = yyVals[-2+yyTop];
	  }

void case_536()
#line 3913 "cs-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_541()
#line 3934 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_542()
#line 3939 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_544()
#line 3948 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_545()
#line 3953 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_546()
#line 3961 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "out variable declaration");

		var lt = (LocatedToken) yyVals[0+yyTop];
		var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-1+yyTop], lv);
	  }

void case_548()
#line 3978 "cs-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_549()
#line 3983 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "null propagating operator");

		yyVal = new ElementAccess ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop])) {
			ConditionalAccess = true
		};

		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_550()
#line 3994 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_551()
#line 3999 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_552()
#line 4007 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_553()
#line 4013 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_554()
#line 4022 "cs-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_555()
#line 4028 "cs-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (lang_version < LanguageVersion.V_7_2 && args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }

void case_559()
#line 4055 "cs-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_560()
#line 4060 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_563()
#line 4082 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			if (lang_version <= LanguageVersion.ISO_2)
				FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_564()
#line 4095 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_565()
#line 4107 "cs-parser.jay"
{
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
				}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop])) {
			NoEmptyInterpolation = true
		};

		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_566()
#line 4118 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] == null)
	  		report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop])) {
			NoEmptyInterpolation = true
		};
	  }

void case_567()
#line 4127 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_568()
#line 4134 "cs-parser.jay"
{
		report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }

void case_569()
#line 4139 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		/* It can be any of new expression, create the most common one*/
		yyVal = new New ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_571()
#line 4151 "cs-parser.jay"
{
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }

void case_572()
#line 4159 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_578()
#line 4186 "cs-parser.jay"
{
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_579()
#line 4192 "cs-parser.jay"
{
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_582()
#line 4209 "cs-parser.jay"
{
		var lt = (LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_583()
#line 4215 "cs-parser.jay"
{
		var lt = (LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }

void case_584()
#line 4221 "cs-parser.jay"
{
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }

void case_585()
#line 4226 "cs-parser.jay"
{
		report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }

void case_589()
#line 4241 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_590()
#line 4249 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_591()
#line 4254 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_596()
#line 4284 "cs-parser.jay"
{
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_597()
#line 4291 "cs-parser.jay"
{
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_598()
#line 4305 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_599()
#line 4311 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_600()
#line 4320 "cs-parser.jay"
{
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_602()
#line 4329 "cs-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_603()
#line 4337 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_604()
#line 4347 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }

void case_605()
#line 4358 "cs-parser.jay"
{ 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_606()
#line 4363 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_607()
#line 4373 "cs-parser.jay"
{
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_608()
#line 4378 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new CheckedExpr (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_609()
#line 4387 "cs-parser.jay"
{
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_610()
#line 4392 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnCheckedExpr (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_611()
#line 4401 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-3+yyTop], GetLocation (yyVals[-2+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_619()
#line 4440 "cs-parser.jay"
{
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_620()
#line 4448 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_621()
#line 4459 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7_1)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "default literal");

		yyVal = new DefaultLiteralExpression (GetLocation (yyVals[0+yyTop]));
	  }

void case_625()
#line 4478 "cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_626()
#line 4483 "cs-parser.jay"
{
		if (!async_block) {
			 if (current_anonymous_method is LambdaExpression) {
				report.Error (4034, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing lambda expression is marked with the `async' modifier");
			} else if (current_anonymous_method != null) {
				report.Error (4035, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing anonymous method is marked with the `async' modifier");
			} else if (interactive_async != null) {
				current_block.Explicit.RegisterAsyncAwait ();
				interactive_async = true;
			} else {
				report.Error (4033, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing method is marked with the `async' modifier");
			}
		} else {
			current_block.Explicit.RegisterAsyncAwait ();
		}
		
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_627()
#line 4505 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7)
			FeatureIsNotAvailable (lexer.Location, "throw expression");

		yyVal = new ThrowExpression ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_628()
#line 4512 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.LogicalNot, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_629()
#line 4518 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.OnesComplement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_630()
#line 4524 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_631()
#line 4531 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Await (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_639()
#line 4569 "cs-parser.jay"
{ 
		Error_SyntaxError (yyToken);

	  	yyVal = new Unary (Unary.Operator.UnaryPlus, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_640()
#line 4575 "cs-parser.jay"
{ 
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.UnaryNegation, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_641()
#line 4581 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_642()
#line 4587 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_643()
#line 4593 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Indirection (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_644()
#line 4599 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.AddressOf, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_646()
#line 4608 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_647()
#line 4613 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_648()
#line 4618 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_649()
#line 4623 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_650()
#line 4630 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_651()
#line 4637 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_653()
#line 4648 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_654()
#line 4653 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_655()
#line 4658 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_656()
#line 4665 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_658()
#line 4676 "cs-parser.jay"
{
		var is_expr = new Is ((Expression) yyVals[-3+yyTop], ((FullNamedExpression) yyVals[-1+yyTop]), GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] != null) {
			if (lang_version < LanguageVersion.V_7)
				FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "pattern matching");

			var lt = (LocatedToken) yyVals[0+yyTop];
			var lv = new LocalVariable (current_block, lt.Value, lt.Location);
			is_expr.Variable = lv;
			current_block.AddLocalName (lv.Name, lv, true);
		}

		yyVal = is_expr;
	  }

void case_659()
#line 4691 "cs-parser.jay"
{
		var is_expr = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "pattern matching");

		yyVal = is_expr;
	  }

void case_660()
#line 4699 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new As ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_661()
#line 4705 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Is ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_662()
#line 4711 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Is (new SimpleName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_663()
#line 4716 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new As (new SimpleName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_670()
#line 4739 "cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_674()
#line 4769 "cs-parser.jay"
{
		var list = new List<PropertyPatternMember> ();
		list.Add ((PropertyPatternMember) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_675()
#line 4775 "cs-parser.jay"
{
		var list = (List<PropertyPatternMember>) yyVals[-2+yyTop];
		list.Add ((PropertyPatternMember) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_676()
#line 4784 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new PropertyPatternMember (lt.Value, (Expression) yyVals[0+yyTop], lt.Location);
	  }

void case_678()
#line 4793 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
			var lt = (LocatedToken) yyVals[0+yyTop];
			var variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (variable);
		}
	  }

void case_680()
#line 4846 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_681()
#line 4851 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_682()
#line 4856 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_683()
#line 4863 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_685()
#line 4874 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_686()
#line 4879 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_687()
#line 4884 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_688()
#line 4889 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_689()
#line 4894 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_690()
#line 4901 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_691()
#line 4908 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_692()
#line 4915 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_694()
#line 4926 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_695()
#line 4931 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_696()
#line 4936 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Equality, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_697()
#line 4943 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Inequality, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_699()
#line 4954 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_700()
#line 4959 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_702()
#line 4970 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_703()
#line 4975 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_705()
#line 4986 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_706()
#line 4991 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_708()
#line 5002 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_709()
#line 5007 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_711()
#line 5018 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_712()
#line 5023 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_714()
#line 5034 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_718()
#line 5052 "cs-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_719()
#line 5057 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "throw expression");

		var expr = new ThrowExpression ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-5+yyTop]), (Expression) yyVals[-3+yyTop], expr, GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_720()
#line 5066 "cs-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_721()
#line 5071 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-3+yyTop]), (Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_722()
#line 5077 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_723()
#line 5084 "cs-parser.jay"
{
		Error_SyntaxError (Token.CLOSE_BRACE);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		lexer.putback ('}');
	  }

void case_724()
#line 5095 "cs-parser.jay"
{
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_725()
#line 5100 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_726()
#line 5105 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_727()
#line 5110 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_728()
#line 5115 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_729()
#line 5120 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_730()
#line 5125 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_731()
#line 5130 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_732()
#line 5135 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_733()
#line 5140 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_734()
#line 5145 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_735()
#line 5150 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7)
			FeatureIsNotAvailable (GetLocation (yyVals[-4+yyTop]), "tuples");

		var exprs = (List<Expression>) yyVals[-3+yyTop];
		yyVal = new TupleDeconstruct (exprs, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_736()
#line 5158 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7)
			FeatureIsNotAvailable (GetLocation (yyVals[-4+yyTop]), "tuples");

		var exprs = (List<BlockVariable>) yyVals[-3+yyTop];
		yyVal = new TupleDeconstruct (exprs, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_737()
#line 5169 "cs-parser.jay"
{
		yyVal = new List<Expression> () {
			(Expression) yyVals[-2+yyTop],
			(Expression) yyVals[0+yyTop]
	  	};
	  }

void case_738()
#line 5176 "cs-parser.jay"
{
		var src = (List<Expression>) yyVals[-2+yyTop];
		src.Add ((Expression) yyVals[0+yyTop]);
		yyVal = src;
	  }

void case_739()
#line 5185 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		yyVal = new List<BlockVariable> (2) {
			new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li)
		};
	  }

void case_740()
#line 5194 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);

		var src = (List<BlockVariable>) yyVals[-3+yyTop];
		src.Add (new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li));
		yyVal = src;
	  }

void case_741()
#line 5204 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);

		if (lt.Value != "_") {
			report.Error (8184, lt.Location, "A deconstruction cannot mix declarations and expressions on the left-hand-side");
		} else {
			li.Type = InternalType.Discard;
		}

		var src = (List<BlockVariable>) yyVals[-2+yyTop];
		src.Add (new BlockVariable (new TypeExpression (li.Type, lt.Location), li));
		yyVal = src;
	  }

void case_742()
#line 5222 "cs-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }

void case_743()
#line 5229 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }

void case_744()
#line 5243 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_745()
#line 5249 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_746()
#line 5255 "cs-parser.jay"
{
	  	var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_747()
#line 5260 "cs-parser.jay"
{
	  	var lt = (LocatedToken) Error_AwaitAsIdentifier (yyVals[0+yyTop]);
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_749()
#line 5268 "cs-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_751()
#line 5279 "cs-parser.jay"
{
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_753()
#line 5287 "cs-parser.jay"
{
	  	/* Handles only cases like foo = x.FirstOrDefault (l => );*/
	  	/* where we must restore current_variable*/
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;

		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_757()
#line 5306 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_758()
#line 5314 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];	
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }

void case_759()
#line 5320 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_760()
#line 5325 "cs-parser.jay"
{
		var lt = (LocatedToken) Error_AwaitAsIdentifier (yyVals[-1+yyTop]);
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }

void case_761()
#line 5331 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_762()
#line 5336 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);
	  }

void case_763()
#line 5342 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_765()
#line 5351 "cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], false, GetLocation (yyVals[-4+yyTop]));
	  }

void case_766()
#line 5356 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_768()
#line 5365 "cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], true, GetLocation (yyVals[-5+yyTop]));
	  }

void case_769()
#line 5370 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_776()
#line 5393 "cs-parser.jay"
{
		yyVal = new RefValueExpr ((Expression) yyVals[-3+yyTop], (FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_777()
#line 5398 "cs-parser.jay"
{
		yyVal = new RefTypeExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_778()
#line 5403 "cs-parser.jay"
{
		yyVal = new MakeRefExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));	  
	  }

void case_783()
#line 5430 "cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];

		/* Cannot use opt_formal_parameter_list because it can be shared instance for empty parameters*/
	  	lbag.AppendToMember (current_container, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));

		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "primary constructor");
	  }

void case_788()
#line 5459 "cs-parser.jay"
{
		++lexer.parsing_block;
		current_type.PrimaryConstructorBaseArgumentsStart = GetLocation (yyVals[0+yyTop]);
	  }

void case_789()
#line 5464 "cs-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[0+yyTop]));
		current_type.PrimaryConstructorBaseArguments = (Arguments) yyVals[-1+yyTop];
		--lexer.parsing_block;

		yyVal = yyVals[-5+yyTop];
	  }

void case_791()
#line 5484 "cs-parser.jay"
{
		lexer.ConstraintsParsing = true;

		Class c = new Class (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
			
		push_current_container (c, yyVals[-3+yyTop]);
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
	  }

void case_792()
#line 5497 "cs-parser.jay"
{
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

		if (yyVals[-1+yyTop] != null)
			current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-5+yyTop]));

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_793()
#line 5516 "cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_794()
#line 5522 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_797()
#line 5541 "cs-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }

void case_800()
#line 5555 "cs-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0) {
			var accessibility = (m2 | m1 & Modifiers.AccessibilityMask);

			if (accessibility == (Modifiers.PRIVATE | Modifiers.PROTECTED)) {
				if (lang_version < LanguageVersion.V_7_2) {
					FeatureIsNotAvailable (lexer.Location, "private protected");
				}
			} else if (accessibility != (Modifiers.PROTECTED | Modifiers.INTERNAL)) {
				report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
					"More than one protection modifier specified");
			}
		}
		
		yyVal = m1 | m2;
	  }

void case_801()
#line 5581 "cs-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container.Kind == MemberKind.Namespace)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_802()
#line 5589 "cs-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_803()
#line 5594 "cs-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_804()
#line 5599 "cs-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_805()
#line 5604 "cs-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_806()
#line 5609 "cs-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_807()
#line 5614 "cs-parser.jay"
{
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_808()
#line 5619 "cs-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_809()
#line 5624 "cs-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_810()
#line 5629 "cs-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_811()
#line 5634 "cs-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_812()
#line 5639 "cs-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_813()
#line 5644 "cs-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_814()
#line 5649 "cs-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_815()
#line 5656 "cs-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_819()
#line 5673 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }

void case_822()
#line 5690 "cs-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_823()
#line 5696 "cs-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_824()
#line 5715 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_825()
#line 5721 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_826()
#line 5731 "cs-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_827()
#line 5737 "cs-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_828()
#line 5763 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_829()
#line 5770 "cs-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_833()
#line 5790 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");
		
		yyVal = yyVals[0+yyTop];
	  }

void case_836()
#line 5824 "cs-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_838()
#line 5836 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_839()
#line 5841 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_840()
#line 5850 "cs-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_841()
#line 5855 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_849()
#line 5882 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_882()
#line 5946 "cs-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_883()
#line 5951 "cs-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_884()
#line 5956 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_885()
#line 5964 "cs-parser.jay"
{
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_886()
#line 5972 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation (yyVals[0+yyTop]));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_889()
#line 5985 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_890()
#line 6001 "cs-parser.jay"
{ 
		var expr = (ATypeNameExpression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			if (expr.Name == "var" && expr is SimpleName)
				yyVal = new VarExpr (expr.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		}
	  }

void case_891()
#line 6013 "cs-parser.jay"
{
		var expr = (ATypeNameExpression) yyVals[-1+yyTop];
		yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_893()
#line 6019 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_895()
#line 6030 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "tuples");

		var a = (Tuple<TypeArguments, List<string>>) yyVals[-1+yyTop];

		yyVal = new TupleTypeExpr (a.Item1, a.Item2, GetLocation (yyVals[-2+yyTop]));
	  }

void case_896()
#line 6042 "cs-parser.jay"
{
		var type_args = new TypeArguments ();

		type_args.Add ((FullNamedExpression) yyVals[-4+yyTop]);
		type_args.Add ((FullNamedExpression) yyVals[-1+yyTop]);

		var names = new List<string> (2);
		var lt = (LocatedToken) yyVals[-3+yyTop];
		names.Add (lt?.Value);
		lt = (LocatedToken) yyVals[0+yyTop];
		names.Add (lt?.Value);

		yyVal = Tuple.Create (type_args, names);
	  }

void case_897()
#line 6057 "cs-parser.jay"
{
		var a = (Tuple<TypeArguments, List<string>>) yyVals[-3+yyTop];
		a.Item1.Add ((FullNamedExpression) yyVals[-1+yyTop]);
		var lt = (LocatedToken) yyVals[0+yyTop];
		a.Item2.Add (lt?.Value);
		yyVal = a;
	  }

void case_899()
#line 6069 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_903()
#line 6092 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_904()
#line 6099 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		if (yyVals[-2+yyTop] != null)
			lbag.AddLocation (yyVal, PopLocation (), GetLocation (yyVals[0+yyTop]));
		else
			lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_905()
#line 6108 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstant ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_906()
#line 6115 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_907()
#line 6121 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "byref locals and returns");
		}

		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ByRef, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_908()
#line 6132 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		if (yyVals[-2+yyTop] != null) {
			lbag.AddLocation (yyVal, PopLocation (), GetLocation (yyVals[0+yyTop]));
		} else {
			report.Error (8174, GetLocation (yyVals[-4+yyTop]), "A declaration of a by-reference variable must have an initializer");
			lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_909()
#line 6143 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7_2) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "readonly references");
		}

		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ByRef | LocalVariable.Flags.ReadonlyMask, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_910()
#line 6154 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		if (yyVals[-2+yyTop] != null) {
			lbag.AddLocation (yyVal, PopLocation (), GetLocation (yyVals[0+yyTop]));
		} else {
			report.Error (8174, GetLocation (yyVals[-5+yyTop]), "A declaration of a by-reference variable must have an initializer");
			lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_912()
#line 6169 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		PushLocation (GetLocation (yyVals[-1+yyTop]));
		yyVal = current_variable;
	  }

void case_913()
#line 6175 "cs-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_917()
#line 6193 "cs-parser.jay"
{
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }

void case_920()
#line 6208 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_921()
#line 6217 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_928()
#line 6250 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_930()
#line 6263 "cs-parser.jay"
{
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_931()
#line 6268 "cs-parser.jay"
{
		report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_933()
#line 6277 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7_2) {
			FeatureIsNotAvailable (GetLocation (yyVals[-4+yyTop]), "ref structs");
		}

		yyVal = new SpanStackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_934()
#line 6286 "cs-parser.jay"
{
		report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_935()
#line 6294 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "byref locals and returns");
		}

		yyVal = new ReferenceExpression ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_936()
#line 6305 "cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_938()
#line 6311 "cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }

void case_941()
#line 6329 "cs-parser.jay"
{
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			var expr = yyVals[0+yyTop] as Expression;
			yyVal = new StatementErrorExpression (expr);
		} else {
			yyVal = new StatementExpression (s);
		}
	  }

void case_942()
#line 6342 "cs-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		yyVal = new StatementExpression (new OptionalAssign (expr, lexer.Location));
	  }

void case_943()
#line 6347 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_946()
#line 6361 "cs-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_947()
#line 6370 "cs-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_948()
#line 6380 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new If ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_950()
#line 6394 "cs-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
	  }

void case_951()
#line 6400 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Switch ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));	
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_958()
#line 6431 "cs-parser.jay"
{
	  	var label = (SwitchLabel) yyVals[0+yyTop];
	  	label.SectionStart = true;
		current_block.AddStatement (label);
	  }

void case_960()
#line 6444 "cs-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }

void case_961()
#line 6449 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_962()
#line 6467 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_7)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "pattern matching");

/*		$$ = new SwitchLabel ((FullNamedExpression) $2), GetLocation ($1)) {*/
/*			PatternMatching = true*/
/*		};*/

		throw new NotImplementedException ("type pattern matching");
	  }

void case_968()
#line 6492 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_969()
#line 6500 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_970()
#line 6510 "cs-parser.jay"
{
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_971()
#line 6515 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Do ((Statement) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), Location.Null);
	  }

void case_972()
#line 6520 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Do ((Statement) yyVals[-4+yyTop], (BooleanExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_973()
#line 6530 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
		For f = new For (GetLocation (yyVals[-1+yyTop]));
		current_block.AddStatement (f);
		yyVal = f;
	  }

void case_975()
#line 6546 "cs-parser.jay"
{
		((For) yyVals[-2+yyTop]).Initializer = (Statement) yyVals[-1+yyTop];

		/* Pass the "For" object to the iterator_part4*/
		oob_stack.Push (yyVals[-2+yyTop]);
	  }

void case_976()
#line 6554 "cs-parser.jay"
{
		var locations = (Tuple<Location,Location>) yyVals[-1+yyTop];
		oob_stack.Pop ();
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = ((For) yyVals[-5+yyTop]);
		f.Statement = (Statement) yyVals[0+yyTop];
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-3+yyTop]), GetLocation (locations.Item1), GetLocation (locations.Item2));

		yyVal = end_block (GetLocation (yyVals[-3+yyTop]));
	  }

void case_977()
#line 6567 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_978()
#line 6575 "cs-parser.jay"
{
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
	  }

void case_980()
#line 6585 "cs-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `}'");
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_981()
#line 6594 "cs-parser.jay"
{
	  	For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_982()
#line 6599 "cs-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol expected ')'");
		For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_987()
#line 6619 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_988()
#line 6626 "cs-parser.jay"
{
		yyVal = current_variable;
		if (yyVals[-1+yyTop] != null)
			lbag.AddLocation (current_variable, PopLocation ());

		current_variable = null;
	  }

void case_996()
#line 6653 "cs-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_997()
#line 6669 "cs-parser.jay"
{
		report.Error (230, GetLocation (yyVals[-3+yyTop]), "Type and identifier are both required in a foreach statement");

		start_block (GetLocation (yyVals[-2+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_998()
#line 6682 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	
		start_block (GetLocation (yyVals[-3+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) yyVals[-1+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		
		Foreach f = new Foreach ((Expression) yyVals[-2+yyTop], li, null, null, null, GetLocation (yyVals[-4+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-3+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_999()
#line 6699 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }

void case_1000()
#line 6709 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, GetLocation (yyVals[-8+yyTop]));
		lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		end_block (GetLocation (yyVals[-2+yyTop]));
		
		yyVal = f;
	  }

void case_1007()
#line 6732 "cs-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1008()
#line 6740 "cs-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1009()
#line 6745 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }

void case_1010()
#line 6753 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_1011()
#line 6759 "cs-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_1012()
#line 6764 "cs-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_1013()
#line 6772 "cs-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1014()
#line 6777 "cs-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1015()
#line 6782 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_1016()
#line 6787 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Return (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_1017()
#line 6795 "cs-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1018()
#line 6800 "cs-parser.jay"
{
		yyVal = new Throw (null, GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1019()
#line 6805 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_1020()
#line 6810 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Throw (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_1021()
#line 6818 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_1022()
#line 6834 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1023()
#line 6852 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_1027()
#line 6878 "cs-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_1028()
#line 6883 "cs-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], Location.Null, true), (ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_1029()
#line 6888 "cs-parser.jay"
{
		Error_SyntaxError (1524, yyToken);
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), false);
	  }

void case_1030()
#line 6896 "cs-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_1031()
#line 6903 "cs-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		var prev_catch = l [l.Count - 1];
		if (prev_catch.IsGeneral && prev_catch.Filter == null) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		}
		
		l.Add (c);
		yyVal = l;
	  }

void case_1034()
#line 6924 "cs-parser.jay"
{
	  	var c = new Catch ((ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	c.Filter = (CatchFilterExpression) yyVals[-1+yyTop];
	  	yyVal = c;
	  }

void case_1035()
#line 6930 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Catch ((ExplicitBlock) current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}
		
		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
		lexer.parsing_catch_when = true;
	  }

void case_1036()
#line 6946 "cs-parser.jay"
{
	  	((Catch) yyVals[-1+yyTop]).Filter = (CatchFilterExpression) yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_1037()
#line 6951 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1039()
#line 6969 "cs-parser.jay"
{
		end_block (Location.Null);
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_1042()
#line 6985 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_5)
			FeatureIsNotAvailable (GetLocation (yyVals[-4+yyTop]), "exception filter");

		yyVal = new CatchFilterExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_1045()
#line 7010 "cs-parser.jay"
{
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_1047()
#line 7020 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_1048()
#line 7028 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Lock ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1049()
#line 7038 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_1050()
#line 7048 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_1051()
#line 7053 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		lbag.AddStatement (f, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_1052()
#line 7066 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_1053()
#line 7076 "cs-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_1054()
#line 7081 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_1055()
#line 7090 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_1056()
#line 7098 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new Using ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1058()
#line 7109 "cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }

void case_1060()
#line 7121 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }

void case_1061()
#line 7132 "cs-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1062()
#line 7144 "cs-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1063()
#line 7155 "cs-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1064()
#line 7162 "cs-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1065()
#line 7171 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }

void case_1066()
#line 7181 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
		};
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }

void case_1067()
#line 7196 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }

void case_1068()
#line 7206 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
		};
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }

void case_1070()
#line 7225 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1072()
#line 7241 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1073()
#line 7260 "cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_1074()
#line 7275 "cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[0+yyTop];

		if (yyVals[-1+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-1+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_1076()
#line 7288 "cs-parser.jay"
{
		report.Error (742, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `{0}'. A query body must end with select or group clause", GetSymbolName (yyToken));
		yyVal = yyVals[-1+yyTop];
	  }

void case_1077()
#line 7293 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_1079()
#line 7305 "cs-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1080()
#line 7312 "cs-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_1081()
#line 7320 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1082()
#line 7327 "cs-parser.jay"
{
		var obj = (object[]) yyVals[0+yyTop];

		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-2+yyTop], linq_clause_blocks.Pop (), (Expression)obj[0], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, (Location) obj[1]);
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1084()
#line 7344 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new object[2] { null, Location.Null };
	  }

void case_1086()
#line 7353 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_1093()
#line 7373 "cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_1095()
#line 7392 "cs-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1096()
#line 7402 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_1097()
#line 7410 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_1098()
#line 7418 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1099()
#line 7426 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_1100()
#line 7464 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_1101()
#line 7472 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_1102()
#line 7480 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1103()
#line 7488 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
			lbag.AddLocation (yyVal, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_1107()
#line 7544 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_1109()
#line 7555 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1110()
#line 7562 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_1112()
#line 7571 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_1113()
#line 7578 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_1115()
#line 7590 "cs-parser.jay"
{
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1116()
#line 7595 "cs-parser.jay"
{
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1118()
#line 7607 "cs-parser.jay"
{
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1119()
#line 7612 "cs-parser.jay"
{
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1121()
#line 7622 "cs-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_1122()
#line 7638 "cs-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_1125()
#line 7665 "cs-parser.jay"
{ 
		current_container = current_type = new Class (current_container, new MemberName ("<InteractiveExpressionClass "+ class_count++ +">"), Modifiers.PUBLIC, null);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		var method = new InteractiveMethod (
			current_type,
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			pars);
			
		current_type.AddMember (method);			
		oob_stack.Push (method);

		interactive_async = false;

		++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_1126()
#line 7693 "cs-parser.jay"
{
		--lexer.parsing_block;
		var method = (InteractiveMethod) oob_stack.Pop ();
		method.Block = (ToplevelBlock) end_block(lexer.Location);

		if (interactive_async == true) {
			method.ChangeToAsync ();
		}

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }

void case_1136()
#line 7739 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-1+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_1137()
#line 7745 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_1138()
#line 7751 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-3+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value);
	  }

void case_1141()
#line 7766 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }

void case_1142()
#line 7771 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }

void case_1143()
#line 7779 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }

void case_1144()
#line 7787 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop];
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }

void case_1152()
#line 7825 "cs-parser.jay"
{
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_1153()
#line 7831 "cs-parser.jay"
{
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_1154()
#line 7840 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }

#line default
   static readonly short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   14,   15,   15,   15,
   16,   16,   20,   21,   18,   18,   23,   23,   23,   19,
   19,   19,   24,   24,   25,   25,    7,    7,    6,    6,
   22,   22,    8,    8,   26,   26,   26,   27,   27,   27,
   27,   27,    9,    9,   10,   10,   35,   33,   38,   34,
   34,   34,   34,   36,   36,   36,   37,   37,   42,   39,
   40,   41,   41,   43,   43,   43,   43,   43,   44,   44,
   44,   48,   45,   47,   47,   51,   52,   52,   50,   50,
   55,   55,   56,   56,   57,   57,   57,   57,   57,   57,
   57,   57,   57,   57,   57,   57,   57,   57,   71,   66,
   73,   73,   73,   78,   81,   82,   83,   29,   29,   86,
   58,   58,   87,   87,   88,   88,   89,   91,   85,   85,
   90,   90,   96,   59,  100,   59,   59,   95,  103,   95,
   97,   97,  104,  104,  105,  106,  105,  101,  101,  107,
  107,  108,  109,   99,   99,  102,  102,  102,  112,   60,
   94,  114,   94,  115,   94,  118,  119,  110,  120,  121,
  122,  110,  110,  110,  111,  111,  111,  126,  127,  127,
  129,  127,  131,  125,  117,  117,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  133,  133,  136,  136,
  136,  136,  139,  136,  137,  137,  140,  140,  141,  141,
  141,  141,  134,  134,  134,  142,  142,  142,  135,  144,
  146,  147,  149,   61,  150,   61,  148,  152,  148,  151,
  151,  154,  156,   63,  155,  155,  145,  145,  145,  145,
  145,  160,  157,  161,  158,  159,  159,  159,  159,  162,
  163,  164,  166,   30,   30,  165,  165,  167,  167,  168,
  168,  168,  168,  168,  168,  168,  168,  168,  170,   64,
  171,  171,  174,  169,  169,  173,  173,  173,  173,  173,
  173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
  173,  173,  173,  173,  173,  173,  173,  173,  176,  175,
  177,  175,  175,  175,   65,  179,  181,  178,  180,  180,
  184,  182,  185,  182,  182,  182,  186,   67,  188,   62,
  191,  192,   62,   62,  187,  194,  187,  189,  189,  195,
  195,  196,  196,  197,  193,  190,  190,  190,  190,  190,
  201,  198,  202,  199,  200,  200,  200,   68,   69,  204,
  206,  207,   31,  203,  203,  203,  205,  205,  205,  208,
  208,  209,  210,  209,  209,  209,  211,  212,  213,   32,
  214,  214,   17,   17,   17,  215,  215,  215,  219,  219,
  217,  217,  217,  220,  220,  222,   76,  143,  116,  116,
  153,  153,  223,  223,  223,  221,  221,  224,  224,  225,
  225,  227,  227,  113,   84,   84,   98,   98,  138,  138,
  172,  172,  229,  229,  229,  229,  233,  233,  235,  235,
  234,  228,  232,  232,  232,  237,  237,  238,  236,  236,
  236,  236,  236,  236,  236,  239,  239,  239,  239,  239,
  239,  239,  239,  239,  240,  240,  240,  240,  240,  240,
  240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
  240,  240,  240,  240,  240,  240,  241,  241,  241,  242,
  242,  242,  242,  264,  264,  265,  266,  266,  267,  267,
  261,  261,  268,  268,  269,  269,  270,  269,  271,  269,
  272,  272,  273,  273,  244,  244,  263,  263,  263,  263,
  263,  263,  263,  263,  263,  263,  263,  263,  246,  246,
  246,  275,  275,  276,  276,  277,  277,  279,  279,  279,
  280,  280,  280,  280,  280,  280,  280,  281,  281,  183,
  183,  274,  274,  274,  274,  274,  286,  286,  285,  285,
  287,  287,  287,  287,  287,   54,  288,  247,  247,  247,
  247,  284,  284,  290,  290,  291,  291,  248,  249,  249,
  250,  251,  252,  252,  243,  243,  243,  243,  243,  296,
  292,  253,  253,  297,  297,  298,  298,  299,  299,  299,
  299,  300,  300,  300,  300,  293,  293,  230,  230,  295,
  295,  301,  301,  294,  294,   93,   93,  302,  302,  254,
  303,  303,  218,  216,  255,  255,  256,  256,  257,  257,
  258,  305,  259,  306,  259,  304,  304,  308,  307,  245,
  262,  309,  309,  309,  309,  309,  309,  309,  309,  309,
  309,  310,  310,  310,  310,  310,  310,  310,  310,  310,
  310,  310,  310,  310,  311,  311,  311,  311,  311,  311,
  311,  312,  312,  312,  312,  312,  312,  312,  312,  312,
  312,  312,  312,  313,  315,  315,  315,  315,  315,  315,
  315,  315,  316,  317,  317,  318,  319,  319,  320,  320,
  320,  320,  320,  321,  321,  321,  321,  321,  321,  321,
  321,  321,  322,  322,  322,  322,  322,  323,  323,  323,
  324,  324,  324,  325,  325,  325,  326,  326,  326,  327,
  327,  327,  328,  328,  329,  329,  331,  331,  331,  331,
  331,  331,  331,  333,  333,  333,  333,  333,  333,  333,
  333,  333,  333,  333,  333,  333,  334,  334,  335,  335,
  335,  336,  336,  337,  337,  337,  337,  338,  338,  340,
  339,  339,  339,  130,  130,   53,   53,  342,  341,  343,
  341,  344,  341,  345,  346,  341,  347,  348,  341,   46,
   46,  282,  282,  282,  282,  260,  260,  260,   92,  350,
   77,   77,  351,  352,  352,  352,  352,  354,  352,  355,
  356,  357,  358,   28,   75,   75,   74,   74,  123,  123,
  359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
  359,  359,  359,  359,  359,   79,   79,  353,  353,   80,
   80,  360,  360,  361,  361,  362,  362,  363,  363,  363,
  363,  226,  226,  364,  364,  365,  124,   72,   72,  366,
  128,   70,   70,  367,  367,  368,  368,  368,  368,  372,
  372,  373,  373,  373,  370,  370,  370,  370,  370,  370,
  370,  370,  370,  370,  370,  370,  370,  374,  374,  374,
  374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
  388,  388,  388,  388,  375,  389,  371,  289,  289,  390,
  390,  390,  390,  390,  391,  392,  392,  231,  231,  393,
   49,   49,  395,  369,  398,  369,  400,  369,  401,  369,
  394,  394,  394,  396,  396,  404,  404,  403,  403,  405,
  405,  397,  397,  399,  399,  406,  406,  407,  402,  402,
  402,  402,  330,  330,  332,  376,  376,  376,  387,  387,
  408,  409,  409,  377,  377,  410,  410,  410,  413,  411,
  411,  412,  412,  414,  414,  414,  415,  416,  416,  417,
  417,  417,  417,  378,  378,  378,  378,  418,  418,  419,
  419,  419,  423,  420,  426,  422,  422,  429,  425,  425,
  428,  428,  430,  430,  424,  424,  433,  432,  432,  427,
  427,  431,  431,  435,  434,  434,  421,  421,  436,  421,
  379,  379,  379,  379,  379,  379,  437,  438,  438,  439,
  439,  439,  440,  440,  440,  440,  441,  441,  441,  441,
  442,  442,  442,  443,  443,  380,  380,  380,  380,  444,
  444,  314,  314,  445,  448,  445,  445,  447,  447,  446,
  449,  446,  381,  382,  450,  385,  383,  383,  452,  453,
  386,  455,  456,  384,  384,  384,  454,  454,  451,  451,
  349,  349,  349,  349,  457,  457,  459,  459,  461,  460,
  462,  460,  458,  458,  458,  458,  458,  466,  464,  467,
  469,  464,  468,  468,  463,  463,  470,  470,  470,  470,
  470,  475,  471,  476,  472,  477,  478,  479,  473,  481,
  482,  483,  473,  480,  480,  485,  474,  484,  488,  484,
  487,  490,  487,  486,  486,  486,  489,  489,  489,  465,
  491,  465,    3,    3,  492,    3,    3,  493,  493,  283,
  283,  278,  278,    5,  494,  494,  494,  494,  494,  498,
  494,  494,  494,  494,  495,  495,  496,  499,  496,  497,
  497,  500,  500,  501,
  };
   static readonly short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    2,    1,    4,    6,    2,
    0,    1,    0,    0,   11,    3,    0,    1,    1,    1,
    3,    1,    0,    1,    0,    1,    0,    1,    0,    1,
    0,    1,    1,    2,    1,    1,    2,    1,    1,    1,
    1,    1,    0,    1,    1,    2,    0,    3,    0,    6,
    3,    2,    1,    1,    1,    1,    1,    3,    0,    3,
    1,    0,    3,    0,    1,    1,    3,    3,    1,    1,
    1,    0,    4,    4,    4,    1,    1,    1,    0,    1,
    0,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    0,    4,
    1,    1,    2,    0,    0,    0,    0,   16,    5,    0,
    9,    5,    0,    1,    1,    2,    3,    0,    3,    1,
    1,    1,    0,    8,    0,    9,    6,    0,    0,    3,
    0,    1,    1,    2,    2,    0,    5,    0,    1,    1,
    2,    3,    0,    4,    2,    1,    1,    1,    0,    3,
    1,    0,    3,    0,    4,    0,    0,   10,    0,    0,
    0,   12,    8,    5,    1,    1,    1,    1,    1,    1,
    0,    4,    0,    4,    0,    1,    1,    3,    3,    3,
    5,    3,    5,    1,    1,    1,    1,    3,    4,    6,
    2,    4,    0,    7,    0,    1,    1,    2,    1,    1,
    1,    1,    4,    6,    4,    1,    2,    2,    1,    0,
    0,    0,    0,   12,    0,    6,    0,    0,    4,    1,
    1,    0,    0,   10,    3,    1,    1,    2,    1,    2,
    1,    0,    5,    0,    5,    1,    1,    1,    1,    0,
    0,    0,    0,   15,    5,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    0,    5,
    1,    1,    0,    7,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    0,    7,
    0,    7,    2,    2,    2,    0,    0,    9,    0,    1,
    0,    6,    0,    6,    2,    1,    0,    8,    0,    9,
    0,    0,   10,    5,    0,    0,    3,    0,    1,    1,
    2,    2,    4,    0,    2,    2,    2,    1,    1,    1,
    0,    5,    0,    5,    1,    1,    1,    2,    4,    0,
    0,    0,   12,    0,    2,    2,    0,    1,    2,    1,
    3,    2,    0,    5,    3,    1,    0,    0,    0,   13,
    0,    1,    1,    3,    3,    1,    4,    4,    2,    2,
    0,    3,    2,    1,    3,    0,    3,    1,    1,    3,
    1,    2,    3,    4,    4,    0,    3,    1,    3,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    2,    1,    4,    2,    4,    0,    1,
    1,    1,    2,    2,    2,    1,    3,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    3,    3,    3,    1,    3,
    3,    1,    1,    3,    1,    3,    0,    4,    0,    6,
    1,    1,    1,    1,    3,    3,    4,    4,    5,    4,
    4,    4,    3,    3,    3,    4,    3,    4,    4,    4,
    3,    0,    1,    3,    4,    0,    1,    1,    3,    2,
    3,    3,    1,    2,    3,    5,    2,    1,    1,    0,
    1,    1,    3,    3,    3,    2,    1,    1,    1,    1,
    2,    2,    2,    4,    3,    2,    1,    4,    5,    4,
    3,    1,    3,    1,    3,    1,    1,    1,    4,    3,
    2,    2,    6,    3,    7,    4,    3,    7,    3,    0,
    2,    4,    3,    1,    2,    0,    1,    1,    3,    1,
    2,    3,    1,    1,    1,    0,    1,    1,    2,    2,
    3,    1,    2,    0,    1,    2,    4,    1,    3,    4,
    1,    1,    1,    2,    4,    4,    4,    2,    4,    2,
    4,    0,    4,    0,    5,    0,    1,    0,    4,    4,
    1,    1,    2,    2,    4,    2,    2,    2,    2,    4,
    2,    1,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    1,    3,    3,    3,    3,    3,
    3,    1,    3,    3,    3,    3,    3,    4,    3,    3,
    3,    3,    3,    1,    1,    2,    2,    1,    1,    4,
    1,    1,    4,    1,    3,    3,    1,    2,    1,    3,
    3,    3,    3,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    1,    3,    3,    3,    3,    1,    3,    3,
    1,    3,    3,    1,    3,    3,    1,    3,    3,    1,
    3,    3,    1,    3,    1,    1,    1,    5,    6,    5,
    4,    5,    5,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    5,    5,    3,    3,    2,    4,
    3,    1,    3,    3,    2,    1,    1,    0,    1,    0,
    2,    1,    1,    1,    1,    1,    1,    0,    4,    0,
    4,    0,    5,    0,    0,    7,    0,    0,    8,    1,
    1,    1,    1,    1,    1,    6,    4,    4,    1,    1,
    0,    1,    3,    0,    1,    1,    2,    0,    6,    0,
    0,    0,    0,   15,    0,    1,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    1,    2,    3,    0,
    1,    1,    2,    4,    3,    1,    3,    1,    3,    1,
    1,    0,    1,    1,    1,    0,    4,    1,    1,    0,
    4,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    4,    1,    2,    2,
    2,    1,    2,    1,    3,    5,    4,    1,    2,    1,
    1,    1,    0,    6,    0,    7,    0,    7,    0,    8,
    0,    2,    1,    0,    1,    0,    1,    1,    2,    2,
    4,    0,    2,    0,    1,    1,    2,    4,    1,    5,
    2,    1,    5,    2,    2,    2,    2,    2,    2,    2,
    1,    1,    1,    1,    1,    5,    7,    4,    0,    8,
    4,    0,    1,    1,    2,    1,    2,    1,    2,    3,
    3,    4,    1,    1,    1,    1,    1,    5,    4,    7,
    3,    6,    0,    4,    0,    5,    1,    0,    4,    2,
    2,    2,    1,    1,    0,    1,    0,    5,    1,    0,
    1,    0,    1,    1,    1,    3,    4,    5,    0,    9,
    1,    1,    1,    1,    1,    1,    2,    2,    2,    3,
    4,    3,    3,    3,    3,    2,    3,    2,    3,    2,
    4,    4,    3,    0,    1,    3,    4,    5,    3,    1,
    2,    0,    1,    3,    0,    7,    3,    2,    1,    0,
    0,    5,    2,    2,    0,    3,    5,    4,    0,    0,
   10,    0,    0,    9,    5,    4,    2,    1,    0,    2,
    2,    2,    2,    2,    4,    5,    4,    5,    0,    5,
    0,    6,    3,    2,    2,    2,    1,    0,    3,    0,
    0,    5,    2,    1,    1,    2,    1,    1,    1,    1,
    1,    0,    5,    0,    3,    0,    0,    0,   12,    0,
    0,    0,   13,    0,    2,    0,    3,    1,    0,    4,
    1,    0,    4,    1,    2,    2,    1,    2,    2,    0,
    0,    4,    2,    3,    0,    4,    2,    2,    3,    0,
    1,    1,    1,    2,    2,    2,    2,    4,    3,    0,
    7,    4,    4,    3,    1,    3,    0,    0,    4,    0,
    1,    1,    3,    2,
  };
   static readonly short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0, 1123,    0,    0, 1127,    0,
    0,   15,   17,  431,  437,  444,  432,  434,    0,  433,
    0,  440,  442,  429,    0,  436,  438,  430,  441,  443,
  439,    0,  386, 1145,    0,  435, 1134,    0,   10,    1,
    0,    0,    0,   12,    0,  943,    0,    0,    0,    0,
    0,  621,    0,    0,    0,  475,    0,    0,    0,    0,
    0,    0,    0,  473,    0,    0,    0,    0,  558,    0,
  474,    0,    0,    0, 1045,    0,    0,    0,  775,    0,
    0,    0,    0,    0,    0,    0,    0,  482,    0,  836,
    0,  885,    0,    0,    0,    0,    0,    0,    0,    0,
  472,    0,  764,    0,    0,  942,    0,  868,    0,  467,
  894,  892,    0,    0,    0,  446,  447,  448,  449,  450,
  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,
  461,  462,  463,  464,  465,  466,  469,  470,  471,  771,
    0,  632,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  772,  770,  773,  774,  852,  854,
    0,  850,  853,  869,  871,  872,  873,  874,  875,  876,
  877,  878,  879,  880,  870,    0,    0,    0,  944,  945,
  964,  965,  966,  967, 1001, 1002, 1003, 1004, 1005, 1006,
    0,    0,    0,   20,   22,    0, 1131,   16, 1124,    0,
    0,  281,  298,  280,  277,  282,  283,  276,  295,  294,
  287,  288,  284,  286,  285,  289,  278,  279,  290,  291,
  297,  296,  292,  293,    0, 1148, 1137,    0,    0, 1136,
    0, 1135,    3,   57,    0,    0,    0,   46,   43,   45,
   48,   49,   50,   51,   52,   55,   13,    0,    0,    0,
 1007,  608,  491,  492, 1043,    0,    0,    0,    0,    0,
    0,    0,    0, 1009, 1008,    0,  618,  612,  617,  884,
  941,  855,  882,  881,  883,  856,  857,  858,  859,  860,
  861,  862,  863,  864,  865,  866,  867,    0,    0,    0,
  973,    0,    0,    0,  902,  901,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1016,    0,    0,    0,
    0,    0,    0,  445,    0,    0,    0,    0, 1020, 1018,
    0,    0,    0,  610, 1044,    0,    0,    0,  900,  425,
    0,    0,    0,    0,    0,    0,    0,  405,  373,    0,
  376,  406,    0,  415,    0,    0,    0,    0,    0,    0,
    0,  767,    0,  631,    0,    0,  760,    0,    0,  626,
    0,    0,  483,  627,    0,    0,    0,    0,    0,    0,
    0,  629,  624,  639,  633,  640,  634,  628,  623,  644,
  638,  643,  637,  641,  635,  642,  636,  758,  604,    0,
  603,  468,  379,  380,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  886,    0,  372,    0,  423,  424,    0,
    0,  561,  562,    0,    0,    0,  890,  891,  903,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1126,  851,  889,    0,  893,  939,  940, 1077,
 1094,    0,    0, 1078, 1080,    0, 1106, 1063, 1061, 1087,
    0,    0, 1085, 1088, 1089, 1090, 1091, 1064, 1062,    0,
    0,    0,    0,    0,    0, 1144,    0,    0,  387,    0,
    0, 1146,    0,    0,   44,  806,  812,  804,    0,  801,
  811,  805,  803,  802,  809,  807,  808,  814,  810,  813,
  815,    0,    0,  799,   47,   56,  560,    0,  556,  557,
    0,    0,  554,    0,  905,    0,    0,    0,  971,    0,
  938,  936,  937,    0,    0,    0,  779,    0, 1012, 1010,
  780,    0,    0,  585,    0,    0,  573,  580,    0,    0,
    0,  574,    0,    0,  590,  592,    0,  569,    0,    0,
    0,    0,    0,  564,    0,  567,  571,  408,  407,    0,
  907,  935, 1015, 1014, 1013,    0,    0, 1019, 1017, 1029,
    0,    0,    0, 1030,  602,    0,  402,  601,    0,    0,
 1046,    0,    0,  899,    0,    0,  421,  409,    0,    0,
    0,  413,  414,    0,    0,    0,  412,    0,    0,    0,
  645,    0,    0,  614,    0,  762,  663,  662,    0,    0,
    0,  487,    0,  481,  849,    0,    0,  844,  846,  847,
  848,    0,  495,  496,  476,    0,    0,    0,  895,    0,
    0,  383,  384,    0,  212,  210,  209,  211,  747,    0,
    0,    0,    0,  742,    0,    0,    0,  739,    0,    0,
    0,    0, 1023,    0,    0,    0,  503,  504,    0,  507,
    0,    0,    0,    0,  505,    0,    0,  551,    0,  511,
    0,    0,    0,    0,  537,  540,    0,    0,  532,  539,
  538,    0,  724,  725,  726,  727,  728,  729,  730,  731,
  732,  734,  733,  649,  646,  651,  648,  650,  647,  660,
  657,  661,    0,    0,  671,    0,    0,    0,    0,    0,
  664,    0,  659,  672,  655,    0,  656,    0,  682,    0,
    0,  683,    0,  689,    0,  690,    0,  691,    0,  692,
    0,  696,    0,  697,    0,  700,    0,  703,    0,  706,
    0,  709,    0,  712,    0,  714,    0,  715,    0,  716,
    0,  589,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1076, 1075,    0, 1086,    0, 1074,    0,   18, 1142,
 1143,    0,    0,  207,    0,    0, 1152,  401,    0,    0,
    0,  398, 1138, 1140,   63,   65,   66,    0,    0,   58,
    0,    0,   67,   69,   32,   30,    0,    0,    0,  796,
    0,  800,  501,    0,  559,    0,  607,    0,  620,  196,
  219,    0,    0,    0,  186,    0,    0,    0,  197,  613,
    0, 1049,  977,    0,  995,  974,    0,  986,    0,  997,
    0, 1011,  948,    0, 1048,    0,    0,  572,    0,  581,
  591,  593,    0,    0,    0,    0,  523,    0,    0,  518,
    0,    0,  757,  756,  552,    0,  595,  566,    0,    0,
  158,  596,  156,  157,  598,    0,  909,    0,  606,  605,
  951,    0, 1041,    0,    0, 1027,    0, 1031,  600,  609,
 1056,    0, 1052,  969,    0,    0,    0,  420,  417,    0,
 1067,    0,  374,  375, 1065,    0,    0,  777,  778,    0,
    0,    0,  753,  752,  761,    0,  502,    0,    0,  484,
  838,  839,  837,  845,  480,  479,  478,  477,    0,    0,
  759,    0,  382,  745,    0,    0,    0,  630,  625,  737,
    0,  738,    0,  741,    0, 1022, 1021,  887,  508,  500,
    0,    0,  506,  497,  498,  611,  550,  548,  547,  543,
  542,    0,  541,    0,  536,  493,  494,  509,  510,    0,
  913,    0,    0,  666,  667,    0,    0, 1033,  658,    0,
  721,    0,    0, 1095, 1069,    0, 1096,    0, 1079, 1081,
 1092,    0, 1107,    0, 1073, 1121,    0, 1154,  208, 1149,
    0,  835,  834,    0,  833,    0,  397,    0,   62,   59,
    0,    0,    0,    0,    0,    0,    0,  161,  404,    0,
  790,    0,  111,  112,    0,    0,    0,   90,    0,  555,
    0,    0,    0,    0,    0,  201,  619,    0,    0,    0,
    0,    0,  987,  975,    0,  998,    0,    0, 1047,  582,
  579,    0,  527,    0,    0,    0, 1132, 1133,  514,  520,
    0,  524,    0,    0,    0,    0,    0,    0,    0,    0,
  949,    0, 1037,    0, 1034, 1028, 1055,    0,  968,  416,
    0,  377,  378, 1068, 1066,    0,  615,    0,  763,  754,
  751,  755,  489,  488,    0,  897,  385,  744,  743,  765,
  735,  736,  740,  499,  549,  546,  545,    0,  535,  534,
  533,    0,  929,  932,  912,    0,    0,    0,  918,    0,
    0,    0,  674,    0,  722,    0,  723,  718,  720,    0,
 1071,    0, 1100,    0,    0, 1115, 1116, 1109,    0,   19,
 1153,  400,  399,    0,    0,   68,   61,    0,   70,   31,
   24,  164,    0,    0,    0,  350,    0,  255,    0,  113,
  119,  114,   85,   87,   88,   84,   86,  923,  131,  132,
    0,    0,    0,  926,  217,  218,    0,    0,    0,    0,
  189,  198,  190,  192,  972,    0,    0,    0,    0,    0,
  996,    0,    0,  528,  529,  522,  525,  521,    0,  515,
  519,    0,  587,    0,  553,  563,  513,  599,  597,    0,
    0,    0,    0,    0, 1058,    0,    0,  418,  776,  768,
    0,  896,    0,  544,    0,    0,  904,  919,  670,    0,
  673,    0,    0,  719, 1070,    0,    0,    0, 1084,    0,
 1082, 1093,    0, 1122, 1141,    0,   81,    0,    0,   75,
   76,   79,   80,    0,    0,  163,  367,  356,  355,    0,
  791,  251,    0,    0,  906,  927,  202,    0,  215,    0,
    0,    0,  970, 1060,    0,    0,    0,  991,    0,    0,
  999,  947,    0,  568,  565,    0,  908,  956,    0,  963,
    0,    0,  954,    0,  958,    0, 1035, 1057, 1053,    0,
  490,  766,    0,    0,    0,  677,  676,  675,  933, 1072,
 1097,    0, 1083,    0,    0, 1111,    0,   82,   73,    0,
    0,  165,    0,  351,    0,    0,    0,    0,  782,    0,
    0,  203,    0,  193,  191, 1050,  988,  976,  984,  983,
  978,  980,    0,  526,  910,    0,    0,  950,  955,    0,
  959, 1042,    0,    0,  769,    0,  921,  678,    0, 1101,
 1118, 1119, 1112,   60,    0,   77,   78,    0,    0,    0,
    0,    0,    0,  785,    0,  817,    0,    0,  928,  200,
    0,  214,    0,    0, 1000,  961,  960,    0, 1039,    0,
 1036, 1054,  930,    0,    0,    0,   83,    0,    0,  368,
    0,    0,  366,  352,    0,  360,  428,    0,  426,    0,
    0,  792,    0,  822,  252,  783,  115,  204, 1051,  979,
    0,    0,  993,  962,  840, 1038, 1098,    0, 1113,    0,
    0,    0,  348,    0,    0,  819,    0,  788,    0,    0,
  823,    0,    0,  982,  981,    0,    0, 1102,   29,   28,
   25,  369,  365,    0,    0,  361,  427,    0,  825,    0,
    0,    0,  116,    0,    0,    0,    0,    0,   34,  353,
    0,  830,    0,  831,  828,    0,  826,  108,  109,    0,
  105,    0,    0,   93,   95,   96,   97,   98,   99,  100,
  101,  102,  103,  104,  106,  107,  159,    0,    0,  268,
  260,  261,  262,  263,  264,  265,  266,  267,    0,    0,
  258,    0,  841,    0, 1099,    0,  370,  364,  789,    0,
    0,    0,    0,  793,   94,    0,  181,  180,  305,  179,
    0,  253,  259,    0, 1105, 1103,  829,  827,    0,    0,
    0,    0,    0,    0,    0,    0,  317,    0,    0,    0,
  269,    0,    0,  275,    0,  183,  177,  160,  175,  176,
    0,    0,  117,  110,    0,    0,  304,    0,    0,  303,
    0,  169,    0,    0,  391,    0,  389,    0,    0,    0,
    0,    0,    0,  349,    0,    0,  794,    0,    0,  254,
    0,  122,  120,  324,    0,  388,    0,    0,    0,    0,
  135,    0,    0,    0,    0,    0,    0,  174,  166,    0,
    0,    0,  232,    0,  392,    0,  270,    0,    0,  182,
  118,    0,  321,    0,  301,  137,    0,  299,    0,    0,
    0,  139,    0,  393,    0,    0,  221,  226,    0,    0,
    0,  390,  273,  184,  130,  128,    0,    0,  326,    0,
    0,    0,    0,    0,  170,    0,  307,    0,    0,    0,
    0,  143,    0,    0,    0,    0,  394,  395,    0,    0,
    0,    0,    0,  125,  340,    0,  322,    0,    0,  334,
    0,    0,    0,  330,    0,  155,    0,    0,    0,    0,
  150,    0,    0,  178,  318,    0,  140,    0,  134,  144,
  167,  173,  241,    0,  222,    0,    0,  233,    0,  129,
    0,  121,  126,    0,    0,    0,  336,    0,  337,  327,
    0,    0,  320,  331,  302,    0,    0,  136,  151,  300,
    0,  316,    0,  308,  310,  146,    0,    0,    0,  238,
  240,    0,  274,  127,  341,  343,  323,    0,    0,  335,
  334,  154,  152,  171,  315,    0,    0,    0,  168,  242,
  244,  223,    0,  236,  234,    0,    0,  333,    0,  311,
  313,  147,    0,    0,    0,    0,  345,  346,  347,  342,
  344,  172,    0,    0,  249,  248,  246,  247,  243,  245,
  228,  224,  235,    0,    0,    0,  312,  314,  230,  231,
    0,  229,
  };
  protected static readonly short [] yyDgoto  = {             7,
    8,   50,    9,   51,   10,   11,   52,  245,  832,  833,
   12,   13,   53,   22,   23,  206,  345,  248,  817, 1025,
 1264, 1409, 1461, 1787, 1022,  249,  250,  251,  252,  253,
  254,  255,  256,  810,  503,  811,  812, 1155,  813,  814,
 1159, 1023, 1259, 1260, 1261,  281,  696, 1375,  117, 1039,
 1176, 1173,  875,  970, 1492, 1493, 1494, 1495, 1496, 1497,
 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,  636,
 1532,  933, 1036,  522,  821, 1587, 1338, 1273, 1385, 1422,
 1453, 1522, 1601, 1417, 1657, 1632, 1682, 1683, 1684, 1178,
 1680, 1179,  884, 1559, 1643, 1616, 1670,  577, 1663, 1637,
 1699, 1123, 1668, 1671, 1672, 1768, 1700, 1701, 1697, 1507,
 1568, 1536, 1028, 1163, 1265, 1588,  834, 1645, 1747, 1613,
 1703, 1779,  523,  282, 1570, 1705, 1539, 1436, 1571, 1101,
 1598,  835,  836,  837,  838,  839,  792,  661, 1391,  793,
  794, 1045, 1590, 1621, 1715, 1675, 1749, 1802, 1785, 1622,
 1811, 1806, 1591, 1649, 1775, 1752, 1716, 1717, 1799, 1783,
 1784, 1169, 1336, 1452, 1519, 1572, 1520, 1521, 1561, 1595,
 1562,  348,  235, 1679, 1564, 1664, 1661, 1508, 1584, 1744,
 1706, 1745,  697, 1793, 1794, 1583, 1660, 1634, 1692, 1687,
 1658, 1725, 1730, 1690, 1693, 1694, 1731, 1688, 1689, 1790,
 1776, 1777, 1166, 1270, 1414, 1380, 1444, 1415, 1416, 1464,
 1333, 1441, 1477,  418,  349,  119,  403,  404,  120,  654,
  499,  238, 1608,  801,  802, 1014, 1029,  121,  353,  465,
  340,  354,  609,  610,  909,  323, 1418, 1419,   46,  124,
  324,  126,  127,  128,  129,  130,  131,  132,  133,  134,
  135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
  145,  146,  147,  148,  149,  378,  379,  372,  373,  929,
 1231,  266,  978,  880, 1216, 1205,  868, 1069,  869,  870,
 1206,  150,  209,  876,  699,  700,  701,  971,  151,  532,
  533,  312, 1214,  878,  466,  314,  561,  562,  563,  564,
  567,  886,  599,  278,  538,  920,  279,  537,  152,  153,
  154,  155,  732,  989,  733,  734, 1132, 1133, 1317,  156,
  157,  158,  159,  160,  161,  162,  163,  164,  769,  770,
  165, 1102,  166,  410,  411,  663,  664,  665,  925,  926,
  167,  651,  629,  922,  405, 1233,  625, 1310,  168,  552,
 1339, 1383, 1386, 1468, 1167, 1335, 1450, 1565,  524, 1423,
 1424, 1486, 1487, 1015,  375, 1456,  637,  638,  283,  284,
  285,  171,  172,  173,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  185,  298,  676,  186,
  187,  381,  341,  983,  702, 1127, 1042,  828, 1182,  888,
 1079, 1125, 1128, 1286, 1129, 1183, 1184,  299,  188,  189,
  190, 1301, 1222, 1302, 1303, 1304, 1305,  191,  192,  193,
  194,  846,  545,  847, 1289, 1200, 1290, 1430, 1394, 1352,
 1431,  848, 1199,  849, 1433, 1353,  195,  196,  197,  198,
  199,  200,  326,  593,  594,  895, 1401, 1363, 1082,  337,
 1198, 1052, 1393, 1227, 1088, 1364,  201,  479,  202,  480,
 1140, 1246,  481,  482,  787,  778,  779, 1251, 1144,  483,
  484,  485,  486,  487, 1145,  773, 1142, 1369, 1457, 1525,
 1248, 1405, 1476, 1003,  781, 1004, 1325, 1253, 1326, 1406,
 1149,   17,   19,   47,   48,  237,  795, 1018,  497,  796,
  797,
  };
  protected static readonly short [] yySindex = {          -84,
    0, -141,  133,   45,   94, 2539,    0,  184,    0,    0,
   94,   45,    0,    0,  105,    0, 9799,   94,    0, -116,
 -192,    0,    0,    0,    0,    0,    0,    0,  274,    0,
  383,    0,    0,    0, 9409,    0,    0,    0,    0,    0,
    0,  214,    0,    0,  614,    0,    0,  638,    0,    0,
  184,  221,   94,    0,  342,    0,  330,  359, -138,21246,
 -151,    0,  270,  439, 9970,    0,  270,  270,  270,   88,
  270,  270,  789,    0,21138,11296,  270,  270,    0,11460,
    0,  411,  270, -119,    0,  270,  462,  270,    0,20618,
20618,  450,  270,  270,   19,13995,20001,    0,20742,    0,
19149,    0,14412,14551,14690,14829,14968,15107,15246,15385,
    0,  609,    0,18885,19291,    0,  337,    0, -228,    0,
    0,    0,  719,  988,  409,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -228,    0,  967,  444,  193,  503,  814,  677,  472,  477,
  523,  516,  521,  606,    0,    0,    0,    0,    0,    0,
 4904,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  680,  733, -249,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  125,  168,  221,    0,    0,  649,    0,    0,    0,18885,
18885,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  214,    0,    0,  706,  691,    0,
   65,    0,    0,    0,  221,22017,  981,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  845, -228,20143,
    0,    0,    0,    0,    0,20001, -156, -139,  874,  760,
 -256,  988, -228,    0,    0,18885,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  130,  226,21246,
    0,18885,20001,  781,    0,    0,  799,20001,20001, 7892,
  568, -149,  769,18885,21246, -228,    0,20001,13995,20285,
  609,  933,  818,    0,  826,  837,18885,20001,    0,    0,
  -98,  732, 1781,    0,    0,20001,  411,19291,    0,    0,
  462,20001,19169,  738,  721,  939, -228,    0,    0,  804,
    0,    0,  680,    0,  409,  951, -228,20601,20001,20001,
  439,    0,  931,    0,18885,18885,    0,14273, -228,    0,
 1045, 1037,    0,    0,10141,  598,  285,  831,  889,  871,
  847,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1840,
    0,    0,    0,    0,21716,  738,  937,  945, -228,  908,
  955,  927,20001,    0,  699,    0,  290,    0,    0, -241,
  329,    0,    0,  905,12280,10476,    0,    0,    0,20001,
20001,20001,20001,20001,20001,20001,20001,20001,20001,20001,
15524,15663,15802,12789,18165,15941,16080,16219,16358,16497,
16636,16775,16914,17053,17192,17331,17470,17609,17748,17887,
20878,19007,    0,    0,    0,  680,    0,    0,    0,    0,
    0,20618,20618,    0,    0, -228,    0,    0,    0,    0,
  217,  985,    0,    0,    0,    0,    0,    0,    0,  221,
  981,  629,  570,  214,  214,    0,  823,  155,    0,  214,
  984,    0, -148,22017,    0,    0,    0,    0, -131,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -135,22047,    0,    0,    0,    0,  942,    0,    0,
  992,  877,    0,  991,    0, 1018,  230,  411,    0,  270,
    0,    0,    0, -228,11624, -161,    0, 1010,    0,    0,
    0, -137,  146,    0,  760, -256,    0,    0,  979,    0,
 1025,    0, 1029,  977,    0,    0,  901,    0,13056,  903,
12444,  769,18865,    0,10968,    0,    0,    0,    0, -228,
    0,    0,    0,    0,    0,  154,  156,    0,    0,    0,
 -227,  411, -109,    0,    0,  462,    0,    0, 1042, 1051,
    0,  191, -228,    0,  205,  462,    0,    0,  959, 1022,
 1030,    0,    0,20001, 1162,  699,    0,20001, 1185, 1102,
    0, 1106, 1108,    0,21716,    0,    0,    0,  115,  942,
20001,    0,20001,    0,    0,   11,10141,    0,    0,    0,
    0,20001,    0,    0,    0,20285,20285, 1115,    0,21246,
  115,    0,    0,   76,    0,    0,    0,    0,    0,  738,
 -228,19169, 1120,    0, 1129,18026,20001,    0, 1132,20001,
 1141,21354,    0, 1260, 1111,10141,    0,    0, 1092,    0,
  942, -228,20143, 1095,    0,  699,  942,    0,  101,    0,
19291,20001, 1146, 1274,    0,    0,  322, -160,    0,    0,
    0, -147,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,20742,20742,    0,18885,  692,    0,    0,    0,
    0, -228,    0,    0,    0,  444,    0,  444,    0,14134,
  193,    0,  193,    0,  503,    0,  503,    0,  503,    0,
  503,    0,  814,    0,  814,    0,  677,    0,  472,    0,
  477,    0,  523,    0,  516,    0,18885,    0,  -23,    0,
 1153,    0,12444, 1240, -228, 1242, -228,12444,12444, 1151,
20001,    0,    0,  985,    0, -228,    0, 1117,    0,    0,
    0,19169,  823,    0, 1164, 1160,    0,    0,  779,  221,
  430,    0,    0,    0,    0,    0,    0, -163, 1165,    0,
 1166, 1163,    0,    0,    0,    0, 1167,12934, 1126,    0,
  196,    0,    0,  853,    0,20143,    0, 1168,    0,    0,
    0,  864,  201, 1174,    0, 1173, 1176, 1177,    0,    0,
20001,    0,    0, -228,    0,    0, 1180,    0, 1178,    0,
  487,    0,    0, 9970,    0, 9970,11788,    0,18358,    0,
    0,    0,13856,11952,  504,18865,    0,  173, -143,    0,
 1121, 1137,    0,    0,    0,  904,    0,    0, 1187, 1183,
    0,    0,    0,    0,    0, 1188,    0, -147,    0,    0,
    0, 1194,    0,18427,  411,    0,  411,    0,    0,    0,
    0, 9970,    0,    0, 9970,  733,19169,    0,    0,  699,
    0,20001,    0,    0,    0,20001,18885,    0,    0,  411,
 1191,  115,    0,    0,    0,19433,    0, 1193, 1149,    0,
    0,    0,    0,    0,    0,    0,    0,    0,21246, 1152,
    0,18885,    0,    0, -228,21716, 1233,    0,    0,    0,
20001,    0,20001,    0, -228,    0,    0,    0,    0,    0,
  942,  918,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -228,    0,18723,    0,    0,    0,    0,    0,11132,
    0,10640, 1198,    0,    0, 1201, -228,    0,    0, 1154,
    0,10804, 1268,    0,    0, 1289,    0, 1291,    0,    0,
    0, 1113,    0, 1207,    0,    0,  588,    0,    0,    0,
  823,    0,    0, 1169,    0,  155,    0,  823,    0,    0,
 1117, 1212, 1214, 1171, 1216, 1279, 1126,    0,    0, 1213,
    0, 1340,    0,    0, 1273, -130,12116,    0,12444,    0,
19575, 1218,  864,19169,18885,    0,    0,  469, 1343, 1344,
  206, 1217,    0,    0,20001,    0,20001, 1320,    0,    0,
    0,19717,    0,  802,19717,  925,    0,    0,    0,    0,
12914,    0, 1349,  680,12444, 1234,11788, 1232, -147, 1198,
    0,  270,    0, -228,    0,    0,    0, -128,    0,    0,
 1022,    0,    0,    0,    0, 1230,    0, 1265,    0,    0,
    0,    0,    0,    0, 1189,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  960,    0,    0,
    0,18885,    0,    0,    0, -228, 1229, 1198,    0,20742,
 1313,  811,    0,20001,    0,20742,    0,    0,    0,12444,
    0,12444,    0, -133,12444,    0,    0,    0,  633,    0,
    0,    0,    0, 1241, 1117,    0,    0,12608,    0,    0,
    0,    0,18885, 1239,18496,    0, 1126,    0, 1126,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -228, 1236, 1218,    0,    0,    0, -134, -124, 1244, 1246,
    0,    0,    0,    0,    0, 1238,11788, 1198, -147,20001,
    0, 1243, 9970,    0,    0,    0,    0,    0, 1235,    0,
    0, 1252,    0,  769,    0,    0,    0,    0,    0, 1198,
 1247, -157,20001, 1254,    0, 1198, 1255,    0,    0,    0,
 1196,    0,  115,    0, 1205, 1248,    0,    0,    0,21014,
    0, -228, 1262,    0,    0,12444, 1282,12444,    0,12444,
    0,    0,20001,    0,    0, 1163,    0,  607,  969,    0,
    0,    0,    0,   45,18885,    0,    0,    0,    0, 1263,
    0,    0, 1266, 1259,    0,    0,    0,  703,    0, 1261,
 1383, 1391,    0,    0, 1198, 1271, 1198,    0, 9970, -212,
    0,    0,19717,    0,    0, 1270,    0,    0,19291,    0,
 1276, -115,    0, 9628,    0, 1275,    0,    0,    0,  115,
    0,    0,20001,10640, -228,    0,    0,    0,    0,    0,
    0, 1306,    0, 1133, 1277,    0, 1283,    0,    0,12608,
   94,    0,  230,    0,  863, 1280,  230, 1280,    0,19575,
 1286,    0,20001,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 9970,    0,    0,   -5, 1231,    0,    0,10141,
    0,    0, -153, 9970,    0, 1288,    0,    0,12444,    0,
    0,    0,    0,    0,20001,    0,    0,  221, 1287,  221,
18885, 1280, 1318,    0, 1318,    0, 1292, 1318,    0,    0,
20001,    0, 9970,20001,    0,    0,    0, 1290,    0, 1294,
    0,    0,    0, 1325,12444,20001,    0,  221, 1301,    0,
 1253, 1116,    0,    0, 1298,    0,    0,  147,    0, 1302,
 1258,    0, 1318,    0,    0,    0,    0,    0,    0,    0,
  929, 1178,    0,    0,    0,    0,    0, 1335,    0,   -8,
 1318, 1429,    0, 1312,  221,    0,18885,    0,   83, 1314,
    0, 1315, 1316,    0,    0,10141,12444,    0,    0,    0,
    0,    0,    0, 1303, 1310,    0,    0,18865,    0,21928,
  178,  221,    0, 1319, 1337,12444, 1321,20001,    0,    0,
 1317,    0, 1323,    0,    0, 1322,    0,    0,    0,22047,
    0, 1324,  178,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -196,22047,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1327,  221,
    0,  178,    0, -228,    0, 1337,    0,    0,    0, 1326,
21928,10141,21462,    0,    0,  538,    0,    0,    0,    0,
21536,    0,    0, 1331,    0,    0,    0,    0,   11,18885,
18885,  142,18885,  494,  462, 1358,    0,  738,  835, 1332,
    0, 1401,    0,    0, 1310,    0,    0,    0,    0,    0,
20001, 1310,    0,    0, -110, -107,    0,18885,  -93,    0,
18885,    0, 1295, 1334,    0,  415,    0,  172, 1990,    0,
 1338, 1296,   79,    0,  538, 9409,    0,19433, 1330,    0,
 1310,    0,    0,    0,  415,    0, 1345, 1297, 1339, 1341,
    0, 1347, 1304, 1350,  230, 1346, 1351,    0,    0, 1354,
 1353, 1378,    0,  942,    0, 1076,    0, 1355, 1352,    0,
    0,   -9,    0, 1356,    0,    0, 1362,    0, 1361, 1363,
 1364,    0, 1359,    0,  230,  230,    0,    0,  230, 1365,
 1366,    0,    0,    0,    0,    0, 1367,  210,    0, 1369,
  230, 1441, 1370,  230,    0,  538,    0,11788, 1328, 1372,
 1359,    0, 1368, 1380,  213, 1384,    0,    0,  230,19575,
 1357, 1379, 1367,    0,    0,22047,    0,  221,  221,    0,
 1360, 1381, 1369,    0, 1386,    0,20001, 1388, 1387, 1370,
    0, 1390,  230,    0,    0,  110,    0, 1375,    0,    0,
    0,    0,    0,22047,    0,  213,  213,    0, 1392,    0,
   -9,    0,    0, -121, 1397,22047,    0,22047,    0,    0,
11788, 1393,    0,    0,    0, 1389, 1362,    0,    0,    0,
 1400,    0,  413,    0,    0,    0, 1318, 1128, 1405,    0,
    0,  511,    0,    0,    0,    0,    0, 1459, 1520,    0,
    0,    0,    0,    0,    0, 1409, 1410,11788,    0,    0,
    0,    0,  213,    0,    0,  548,  548,    0, 1318,    0,
    0,    0,  258,  258, 1404, 1414,    0,    0,    0,    0,
    0,    0,18865,18865,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1424, 1425,19575,    0,    0,    0,    0,
 1426,    0,
  };
  protected static readonly short [] yyRindex = {         4182,
    0,    0,10312, 4182,    0,    0,    0, 1792,    0,    0,
 4426, 2054,    0,    0,    0,    0,    0, 4426,    0, 1394,
   87,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1810,    0,    0, 1810,    0,    0, 1810,    0,    0,
 1792, 4469, 4269,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1442,    0,    0,    0,    0,    0,    0,
    0,    0,19311,    0,    0, 1432,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3876,    0,    0,    0,
    0,    0,    0,    0,    0,  404,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 6553,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 7280, 6482, 6785,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 7360, 7513, 7894, 8153, 1601, 8755, 8901, 1526,
 9120, 6421, 2164, 2374,    0,    0,    0,    0,    0,    0,
   87,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 7433, 7280,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 4543,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1810,    0,    0,  392,    0,    0,
    0,    0,    0,    0, 4607,  360, 4679,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 5327,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1443,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 5492, 1437,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3588,    0,    0,  215, 3724,    0,    0,    0,    0,    0,
    0,    0, 4028,    0, 3724,    0,    0,    0,    0,    0,
 1442,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1134,    0,    0,    0,  247, 9462, 1445,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1444, 3436,    0,    0,    0,    0,
    0,    0, 1432,    0, 5327,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  338,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2603,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 5759,    0,    0,    0,    0,    0,    0,    0, 4722,
 4794,  651,    0, 1810, 1810,    0,21371,   72,    0, 1810,
 1823,    0,    0,  202,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  228,18281,    0,    0,    0,    0, 5327,    0,    0,
    0,    0,    0,    0,    0,    0,21568,    0,    0,    0,
    0,    0,    0,    0, 1446,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  441, 2474,    0,    0,  308,  893,
    0,    0, 1453,  838,    0,    0,    0,    0,  275,    0,
    0, 5987, 1451,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1457,    0, 3000,    0,    0,  436,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  126,    0,    0,    0,  970,
    0,    0,    0,    0,    0, 3284,    0,    0,    0,    0,
    0,    0,    0,    0, 1444,    0,    0,    0,19859, 5327,
    0,    0,    0,    0,    0,    0,  317,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
19859,    0,    0,    0,    0,    0,    0,    0,    0,  776,
    0,    0, 1454,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1437,    0,    0,    0,    0, 5162,    0,
 5327,    0,    0, 4996,    0, 5327, 6152,    0,    0,    0,
    0,    0, -186,    0,    0,    0,    0,  339,    0,    0,
    0,  861,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 6718, 6950, 7060, 7170,
    0, 7586,    0,    0,    0, 7666,    0, 7739,    0,    0,
 8001,    0, 8077,    0, 8229,    0, 8305,    0, 8381,    0,
 8457,    0, 8609,    0, 8682,    0, 8828,    0, 8974,    0,
 9047,    0, 9193,    0, 9266,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5759,    0,    0,    0,    0,    0,    0,
    0,    0,19453,    0,    0, 1024,    0,    0, 1407,13225,
    0,    0,    0,    0,    0,    0,    0, 1014, -201,    0,
    0, 1458,    0,    0,    0,    0, 2343,    0,    0,    0,
    0,    0,    0,12772,    0,    0,    0, 1039,    0,    0,
    0,19595,21790,    0,    0, 1054, 1057, 1060,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1455,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1461,    0,
    0,    0,    0,    0, 8517,    0,    0,    0,  320,    0,
  299, 5657,    0,    0,    0,    0,    0,    0,    0, 1462,
    0,    0,    0,    0,    0, 1465,    0,  861,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3724,    0,    0,    0, 3284,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,19859,    0,    0,    0,    0,    0, 1136,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 5327,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1466,    0,    0,    0,    0,    0,    0, 2790,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -136,    0,  443,    0,    0,    0,    0,    0,    0,
19595,    0,    0,    0,    0,   72,    0,18743,    0,    0,
 1460,    0,  936,    0,    0,19737,    0,    0,    0, 1470,
    0, 1420,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1467,19879,    0,    0,    0,    0,21859,    0,    0,
    0, 1072,    0,    0,    0,    0,    0, 3175,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5822,    0, 6317, 1473,    0,  861, 1466,
    0,    0,    0, 1474,    0,    0,    0, 1072,    0,    0,
  970,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1471,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1075,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1472,    0,    0,    0,    0,    0, 1082, 1086,
    0,    0,    0,    0,    0,    0,    0, 1480,  861, -209,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5987,    0,    0,    0,    0,    0, 1466,
    0, 1485,    0,    0,    0, 1480,    0,    0,    0,    0,
    0,    0,19859,    0,  734,  842,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1458,    0, 5229,    0,    0,
    0,    0,    0,13693,    0,    0,    0,    0,    0,    0,
    0,    0,  480,    0,    0,    0,    0,  816,    0,  876,
    0,    0,    0,    0, 1482,    0, 1466,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1489,    0,    0,    0,    0,    0,    0,    0,19859,
    0,    0,    0,    0,  841,    0,    0,    0,    0,    0,
    0,    0,    0,  357,  524,    0,    0,    0,    0,    0,
13776,    0,21568,    0, -188,  566,21568,  566,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -162,
    0,    0, 1457,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 5491,    0,  401,
    0,  670, 1491,    0, 1491,    0,    0, 1491,    0,    0,
    0,    0,    0,  943,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 5986,    0,    0,
    0,13477,    0,    0, 1493,    0,    0,  546,    0,  714,
    0,    0,  556,    0,    0,    0,    0,    0,    0,    0,
    0,  946,    0,    0,    0,    0,    0,    0,    0, 4343,
 1483,  618,    0,    0,  407,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1494,    0,    0,    0,    0,
    0,    0,    0,    0, 2786,    0,    0, 1451,    0,    0,
13309,13561,    0,    0,  543,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  659,    0,    0,    0,18565,
    0,    0,13393,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,18639,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,13645,
    0,13309,    0,    0,    0,  543,    0,    0,    0,    0,
    0,  247,  228,    0,    0,    0,    0,    0,    0,    0,
  228,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2924,  302,    0,20536,    0, 1487,
    0,    0, 5160,    0, 2786,    0,    0,    0,    0,    0,
    0, 2786,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  715,    0,  554,    0,  664,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2786,    0,    0,    0,  684,    0,  742,    0,    0,    0,
    0,    0,    0,    0,21568, 1085,    0,    0,    0,    0,
    0,    0,    0, 1490,    0,  486,    0,    0,    0,    0,
    0,    0,    0, 1093,    0,    0,    0,    0,    0,    0,
    0,    0, 1488,    0,21568,21568,    0,    0,21642,    0,
    0,    0,    0,    0,    0,    0, 1502, 1100,    0, 1503,
21568,20427, 1504,21568,    0,    0,    0,    0,    0,    0,
 1505,    0,    0,    0, 4226,    0,    0,    0,21568,    0,
    0,    0, 1507,    0,    0,  435,    0, 6947,21959,    0,
    0,    0, 1508,    0,    0,    0,    0,    0,    0, 1509,
    0,    0,21568,    0,    0,  573,    0, 1097,    0,    0,
    0,    0,    0, 1135,    0, 6316, 6717,    0,    0,    0,
    0,    0,    0,    0,    0, 1517,    0, 1609,    0,    0,
    0, 1101,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  694,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 4226,    0,    0, 5654, 6149,    0,  694,    0,
    0,    0,    0,    0, 9404,    0,    0,    0,    0,    0,
    0,    0, 1451, 1451,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0, 1841,    0,    0,    0,    2,  -13, -190,  -48,  -44,
    0, 1883, 1892,  380,    0,    0, -170,    0,    0,    0,
    0,    0,    0,-1078, -830, -229, -511,    0,    0,    0,
    0,    0, -235,    0,    0,    0,  743,    0,  880,    0,
    0,    0,    0,  575,  579,  -17, -245,    0,  -37,    0,
    0,    0, -713,  866,  388,    0,  419,-1035, -794, -752,
 -742, -718, -715, -686, -674,    0,    0, -987,    0, -912,
    0,  364,    0,-1380,    0,   26,    0,    0,  576,-1296,
    0,    0,    0,  631,  194,    0,    0,    0,  233,-1283,
    0, -292, -312, 1105,    0,    0,    0, -745,  181,    0,
    0, -561,    0,    0,  248,    0,    0,  220,    0,    0,
-1461,    0,  391,    0,    0, -644, -978,    0,    0,    0,
    0,    0,  366,  -10,-1377,    0,    0,  418,    0,  332,
    0,    0,    0,  879,  886,  887, 1096, -297,    0,    0,
 -353,  894,  362,    0,-1178,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  158,    0,
    0,    0,    0,    0,    0,    0,    0,  420,    0,    0,
    0, -231,  343,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -543,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  200,    0,    0,  267,    0,  273,  277,  189,
    0,    0,    0,    0,    0,    0,    0,    0,  522,    0,
    0,    0,    0,  -83,    0, 1237, -318, -351, 1645,    0,
  344,    0,  412,    0,  957,    0, 1641,  766, -304, -268,
  -46,  167,    0, 1069,  895,  899,    0,  533,    0,    8,
 1170, -414,    0,    0, -408,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -407,    0,    0,    0,    0,    0,
    0,    0, -255,    0,    0,    0,  865,    0, 1376,    0,
    0,  -43,    0, -365,    0, -289,    0,    0,    0,  913,
 -977, -319, -123, 1123,    0, 1005,    0, 1307,   15, -354,
 1172,    0,    0,  775, 1917,    0,    0,    0,    0, 1142,
    0,    0,    0, 1632,    0,    0,    0,    0,    0, 2123,
 1063, 1066, -568,-1011,  754,    0,    0,  753,    0,  810,
 1067, 1544, 1545, 1554, 1555, 1543,    0, 1552, 1023,    0,
    0,  -67,    0,    0,    0,    0, 1070, 1398, -582,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -324,
  682,    0, -532,    0,    0,    0,    0,    0, -506,    0,
  595,    0,  488,    0,    0,    0,  718, -590,  -15, -348,
  -14,    0, 1856,    0,   84,    0,  114,  134,  151,  165,
  166,  170,  174,  176,  183,  199,    0, -778,    0,    0,
    0,    0,    0, -826,    0,-1013,    0,    0,    0,    0,
    0,  716, -609,  806,-1007,    0,  850, -524,    0,    0,
    0,    0,    0,    0,  726,    0,  730,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  641,    0,    0,    0,    0,    0,    0,
    0,    0, 1623,    0, 1447,  675,    0,    0,    0,    0,
  953,    0,    0,    0,    0,    0,    0, -183,    0,    0,
    0,    0,    0, 1561, 1269,    0,    0,    0,    0, 1562,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  518,
    0,    0,    0,    0,    0,    0,    0,    0,  643,    0,
    0,    0,    0,    0,    0,   46, 1034,    0,    0,    0,
 1036,
  };
  protected static readonly short [] yyTable = {           116,
  576,  169,  170,  246,  203,   18,  118,  247,  325,  579,
  548,  526,  490,  885,  530,  505,  822,  605,  489,  276,
  845,  990,  574,  300,  301,  302,  640,  308,  309,  879,
  728,   44,  307,  327,  328,  493,  729,  730,  620,  333,
  336,  427,  338,  572,  342,  607,  934,  463,  265,  359,
  360,  662,  346,  356,  560, 1078, 1389,  363,  322,  994,
  698, 1080,  331,  678,  999, 1000, 1221,  272,  941,  775,
  689,  332, 1224,  335,  273, 1058,  419, 1059,  428,  371,
  426,  415,  272,  377,  617,  958, 1130, 1208, 1425,  316,
  240, 1427, 1019,  242,  850,  979,  677,  408, 1298,  262,
  174,  597, 1399,  467,  274,  957,  568,  805,  981, 1533,
 1299,  608, 1070,  429,   14,  380,  334,  262,  853, 1114,
 1238, 1277, 1249, 1087,  815, 1171, 1089, 1225, 1541,  409,
  175, 1279,  468, 1627,  806,  305,  334,  682,  893,  204,
  399, 1755,  818,   20, 1462, 1602,  819, 1537, 1604,  263,
  176,  784, 1299,  116,  246,  169,  170,  588,  491,  591,
  118, 1349, 1610,  400,  990, 1350,  807,  177,  990, 1351,
  401,    1,  990,  608,   71,   71, 1435,  897,   71,  530,
  402,  178,  179,  122,  784, 1538,  180,  683,  469,  775,
  181,  775,  182,  775, 1756,  306,  504,  772,  264,  183,
  491,    6,  305, 1114, 1704,  205, 1296,  820, 1114,  823,
 1114,  957,  893, 1114, 1114,  184, 1114, 1114, 1250,  980,
  263,  528,  531,  569,  336,  570,  122,  263,  426,  305,
  275,  122,  991,  399,  100,  535, 1071,  263,  263,  982,
  854,  122,  529, 1114, 1648,  207, 1655, 1459,  534,  871,
 1396,  775, 1220,  100,  174,  526,  400,  263, 1197,  877,
  505,  612,  306,  401,  914,  957,  502,  122,  573,  264,
 1300,  662,  559, 1347,    2,  808,  264, 1238,  581,  571,
  496,  122,   15,  589,  175,  547,  264,  264,  640,  306,
  551,  553,  816,   43,  604, 1060,  361,  913,  613, 1280,
  582, 1114,  377, 1368,  176, 1724,  264,  272,  419,  615,
  587,  927, 1300, 1603,  544, 1354, 1605,  272,  600,  619,
  602,  177,  272, 1174,  551, 1177,  601,  640,  962,  580,
 1611,  630,  809, 1748,  965,  178,  179,  122, 1469, 1099,
  180,  622,  623, 1130,  181, 1758,  182, 1759,    3,    4,
    5,    6,  603,  183, 1379,  303,  967,  992, 1387,  639,
  641, 1215,  960,  304,  945, 1742,   53,  964,  966,  184,
  923,  668, 1287, 1460, 1774, 1397, 1235, 1656,   53,  681,
  470,  410,  305,  686,  931,  539, 1480,  531,  531,   16,
  501,  396, 1413,  608,  771,  674, 1720, 1577, 1789, 1789,
  208,  855, 1446,    2, 1625, 1798, 1798,  529,  695,  889,
  798,  891,  703,  704,  705,  706,  707,  708,  709,  710,
  711,  712,  713,  470, 1292, 1327, 1245, 1618, 1247,   20,
  608, 1252,  208, 1488,  774,  776, 1511,  530,  780, 1009,
   49,  246,  306,  362,  768,  491,  901, 1578,  932,  799,
 1769,  305,  272,  800,  444,  942, 1046, 1413,    6,  731,
  904, 1195,  579, 1470,  471, 1685,  122, 1031, 1713,  472,
  540,  473,  782,  797,  474,  475,  968,  476,  477,  797,
  826,  122, 1792,  797, 1511,  830, 1597,  100,   43,  410,
 1743,  445, 1032, 1600, 1008,   53,  841,  943,  797,  795,
 1066,  410, 1626,  410,  122,  410,  842,  471,  851,  901,
 1348,  306,  472, 1795,  473, 1218, 1051,  474,  475, 1033,
  476,  477, 1631,  856,  795,  797, 1447,  840,   55,  244,
 1201,  890, 1320,  892, 1322,  531, 1323, 1750, 1751,  790,
  791,  122,  887, 1474,  797,  803, 1067,  894, 1619,  410,
 1489,  795,  244,  874, 1130,  695,  471,  883, 1093,  844,
  608,  472,  478,  473,  526,  903,  474,  475,  902,  476,
  477,  831,  381,  796, 1395,  244,  446,  447,  381,  210,
  530,  896,  905, 1196,  244, 1402,  597,  244, 1285,  381,
  236, 1092,  662,  381, 1786,  244,  911,  526,  796,  541,
  915, 1566,  412,  560,  244,  488,  381,  542, 1118,  607,
 1068,  122, 1117,  928, 1429,  371, 1285, 1007,  924, 1549,
  842,  639,  641,  944,  935,  796, 1034, 1035,  936,  936,
  100,  797,  797,  797,  954, 1284, 1641,  797,  381, 1796,
  924,  797, 1114,  427,  961,  531,  263,  396,  516,  950,
 1312,  413,  952,  305,  783, 1404,  797,  272,  795,  795,
  639,  641,  643,  543,  940,  529, 1673, 1674, 1765,  902,
 1676, 1315, 1130,  969,  969,  608, 1766, 1512, 1130,  272,
  428,  583, 1695,  797,  842, 1702,  955,  583,  211, 1185,
  843, 1438,  305,  517,  988,  264, 1117,  797, 1108,  976,
 1719, 1117,  797, 1117,  258,  972, 1117, 1117,  259, 1117,
 1117,  122,  516,  679,  608,  530,  531,  414,  902, 1513,
  347,  357,  644,  257, 1741, 1512,  680, 1365, 1180, 1514,
 1357,  396,  796,  796, 1120,  396, 1117,  996, 1767,  998,
  261,  396, 1056, 1475,  407,  583, 1187, 1072, 1006, 1580,
  797,  871,  684, 1515,  843,  874, 1516,  517,  260,  977,
  874,  874, 1526, 1002,  396,  685,  416, 1513,  396,  934,
  396,  396,  396,  396,  357,  530,  531, 1514,  396, 1110,
  359, 1057, 1108,  100,  902, 1517, 1217, 1108,  531, 1108,
  797,  797, 1108, 1108, 1117, 1108, 1108, 1518, 1104, 1581,
  339, 1515, 1384,  122, 1516, 1213, 1053, 1579,  529, 1016,
 1189,  399,  608,  403,  902,  277,  122,  579,  902,  781,
  902,  559, 1090,  551,   53,  728,  358,  902,  531,  396,
   53,  729,  730, 1517,  400,  441,  442,  443,  122,  883,
  494,  495,  122,  244, 1030, 1518,  874,  398,  695, 1420,
  809, 1017,  781,  339, 1566,  352,  352,  122,  396,  403,
  781,  456,  396, 1110,  381,  396,  272,  396, 1110,  845,
 1110,  457,  396, 1110, 1110, 1288, 1110, 1110,  902,  352,
 1108, 1566, 1104, 1773, 1085,  818, 1086, 1104,  470, 1104,
 1065, 1566, 1104, 1104, 1094, 1104, 1104,  388, 1095,  821,
  399,  877,  448,  449,   45,  816,  536, 1108, 1100, 1097,
  100,  924, 1263,  458, 1124,  123,  309, 1113,  818, 1567,
  100,  459,  818,  400, 1481, 1139,  388,  460,  821, 1479,
  401, 1606,  546, 1111, 1116, 1112,  531,  821,  816,  461,
  402,  398,  531,  565, 1620,  309,  272,  566,  611, 1131,
  398,  789,  398, 1105,  309,  640,  695,  586,  123, 1491,
 1510, 1110,  695,  123,  883, 1254,  611,  799, 1639, 1150,
  386,  800,  471,  123,  768,  352,  352,  472,  642,  473,
 1104, 1491,  474,  475,  809,  476,  477,  590,  355,  355,
  236,  362,  239, 1328,  399,  627,  628,  362,  824,  123,
  591,  462,  824,  399,  363,  399, 1356,  225, 1510,  786,
 1491,  640,  355,  123,  236,  788,  241,  400,  592,  874,
  122,  874,  122,  547,  401,  399,  400, 1180,  400,  381,
  653,  824,  381,  401,  402,  401,  220,  820, 1223, 1202,
  824,  352,  786,  402, 1204,  402,  988, 1204,  400,  416,
 1392,  972, 1164,  787,  311,  401,  386,  874,  386,  883,
  386, 1172,  381,  386,  987,  386,  820,  352,  122,  123,
  386,  122,  492, 1012,  721,  820,  416, 1341,  416,  578,
  454,  455,  822,  339, 1263, 1013,  787,  386, 1236, 1342,
  416,  386,  352,  381,  133,  506,  133,  417, 1428,  611,
  527,  133,  775,  777,  386,  122, 1707,  640,  355,  355,
  339,  931,  339,  931,  500,  931, 1243,  655,  400,  507,
  531,  319,  874,  319,  874,  401,  498,  874,  319,  656,
  352,  352,  508,  381,  399,  386,  657,  510,  369,  381,
 1262,  575,  511, 1274,  512,  513,  514,  515,  658, 1278,
  381,  361,  516,  746,  381,  746,  517,  400,  655, 1037,
 1585,  310,  549,  311,  401,  352, 1038,  381,  518, 1760,
  656,  519, 1043,  520,  355, 1207,  526,  657,  505,  883,
  550, 1075,  551,  640, 1241, 1528,  125, 1408,  583,  658,
 1242,  199, 1271,  199, 1272,  199,  417,  521,  123,  381,
  355,  450,  451,  122, 1131, 1306, 1782,  584,  645,  352,
  646,  578,  355,  123, 1032,  452,  453,  578,  585,  920,
 1032,  920,  924,  920,  649,  355,  650,  616,  874,  125,
  874,  355,  874,  614,  125, 1324,  123,  352,  352, 1337,
  911,  355,  911, 1381,  125,  618, 1124,  272,  579, 1804,
 1805,  213,  825,  213,  731,  213,  826,  469, 1586,  745,
  747,  749,  751,  355,  355, 1331,  584, 1617,  647,  469,
  125,  469,  584,  123,  626, 1204,  861,  988,  872, 1074,
  862,  547,  566, 1075,  125,  669, 1617,  670,  639,  641,
  469,  469,  531, 1115,  648, 1366,  883,  826,  355,  924,
 1209, 1563, 1454,  355,  980, 1650, 1455, 1651,  673, 1563,
  469,   72, 1262,  731,  666,   72,  992, 1378,  469,  994,
  992,  469,  547,  994,  667,  547,  350,  350,  687,  246,
  584, 1411,  671,  491,  672, 1412,  906, 1234,  907,  980,
  125,  786,  355,  123,  639,  641, 1329,  419, 1330,  419,
  350,  874,  420,  430,  525,  244,  986, 1407,  804,  246,
   53,  400,   53,  491,  263,  857,  421, 1180,  827,  122,
  355,  355,  824,  547,  431,  432,  433,  434,  435,  436,
  437,  438,  439,  440,   53,  422,  423,  874, 1324,  381,
  381,  852,  381,  381,   64,  829, 1411,   53,  858, 1151,
 1412, 1151,   53,  633,  634,  424,  122,   53,  859,   53,
   53,   53,   53,  264,  860,   53,  425,   53,  922,  899,
  922,   53, 1490, 1509,  631,  632, 1412,  800,  900,  187,
  531,  187,  194,   53,  194,  195,   53,  195,   53,  874,
  639,  641,  350,  123, 1490,  908,  350,  350, 1412, 1059,
  695, 1059,   74,  910,   74,  122,  912,  219,  874,  219,
  547,  188,   53,  188,  138,  122,  138, 1146, 1147,  125,
  122, 1509,  325, 1490,  325,  800,  145, 1412,  145,  916,
  332,  917,  332,  918,  125,  919, 1545, 1371, 1372, 1443,
  244,  352,  957, 1810,  939,  400,  498, 1770, 1771,  946,
  485,  485,  486,  486,  797,  797,  947,  125,  736,  738,
  937,  938,  350,  741,  743,  956,  639,  641,  951,  122,
  753,  755,  974,  355, 1084, 1569,  122,  953,  959,  975,
  122,  963,  578,  993,  995,  123,  997, 1001,  350, 1011,
  406, 1010, 1021,  611,  125, 1024, 1020, 1096,  123,   43,
  350, 1047, 1048, 1599, 1041, 1049, 1050, 1055,  207,  122,
  355, 1054,  980,  350, 1076, 1073, 1081, 1077, 1098,  350,
  123, 1104, 1107, 1103,  123, 1106, 1110, 1126, 1130,  350,
 1100,  318, 1134, 1141, 1569, 1143, 1148, 1157, 1161,  123,
 1158, 1162, 1152, 1165, 1160, 1168, 1170, 1181, 1193, 1194,
 1203,  350,  350, 1197, 1212, 1219,  569, 1229, 1230, 1686,
 1237, 1240, 1232,  800,  727, 1267, 1255, 1275, 1311, 1283,
 1291, 1293,  122, 1281,  355, 1282, 1714, 1294, 1297, 1321,
  800, 1307, 1309, 1313, 1314, 1334,  350, 1319, 1344, 1726,
 1728,  350, 1337,  800,  800, 1340, 1345, 1343, 1346, 1358,
  883, 1355, 1362, 1370, 1398, 1569, 1373, 1421, 1374,  352,
 1381, 1390,  547, 1403, 1410,  355, 1435, 1714, 1714, 1426,
 1434,  800,  800, 1437, 1440, 1188, 1442, 1445, 1448, 1736,
  350, 1449,  352, 1458, 1463, 1465, 1471, 1472, 1473, 1478,
  355, 1479, 1523, 1524, 1529, 1582, 1696, 1534,  122, 1530,
 1542, 1531, 1527, 1547, 1573, 1594, 1596,  352,  350,  350,
 1615, 1630, 1623,  883,  125, 1635,  355, 1633, 1614, 1624,
 1626, 1566, 1636, 1638, 1714, 1647, 1640, 1605,  800, 1644,
 1646, 1653, 1642, 1654,  351,  351, 1662, 1665, 1669,  350,
 1666, 1667, 1659, 1677, 1678, 1711, 1681,  161, 1691, 1698,
  883, 1708,  123, 1709,  123,  531,  531, 1712,  351, 1718,
 1722, 1746, 1733, 1735, 1762, 1788, 1788, 1740, 1738, 1753,
 1757,  161, 1797, 1797, 1756,  695,  695, 1764, 1772, 1761,
 1721,  704, 1755, 1732,  161, 1780, 1781, 1803, 1809,  161,
 1801,    9,  355, 1266,  161, 1269,  161,  161,  161,  161,
  123, 1807, 1808,  123,  161,  355,  125, 1812,  161, 1147,
  352, 1737,  161, 1024,  616,  355,  576,   21, 1025,  125,
  161,  748, 1139,  161,  479,  161,  577,  985,  530, 1040,
  832,  749,  797,   35,  575,   36,  989,  123,   35,  531,
  355,  125,  354,  250,  355,  125,   36,  914,  924,  161,
  351, 1032,  915,  925,  351,  351,  693,  916,  952,  917,
  125,  350,  953,  820,  820,  704,  358,  842,  381,  141,
  704,  797,  704,  704,  704,  704,  704,  704,  704,  704,
  704,  704,  704,  123,  328,  148,  142,  578,  124,  329,
  149,  243,  704,  704,   54, 1332,   21, 1256,  350,  704,
 1156,  704, 1175,  704, 1376,  704,  704,  704, 1377, 1544,
  161, 1535, 1574, 1388, 1754, 1723,  704, 1763, 1710, 1739,
  351,  704, 1027, 1560, 1589, 1540, 1190, 1044,  352, 1629,
  352,  704,  704, 1191, 1192,  123, 1186, 1607, 1628, 1543,
  693, 1800,  355,  355,  704,  693,  351,  693,  693,  693,
  693,  693,  693,  693,  693,  693,  693,  693,  351, 1734,
 1778, 1729,  350,  704, 1727, 1791, 1466,  693,  693, 1652,
 1593,  351, 1153,  598,  693, 1091,  693,  351,  693, 1467,
  693,  693,  693, 1211, 1121, 1228, 1064,  351, 1295,  313,
  693,  693,  624, 1316, 1318,  693,  693, 1040,  973,  757,
 1061,  759,  765,  350,  693,  693,  693,  693,  930,  351,
  351,  761,  766,  763, 1138, 1109, 1382, 1451, 1548,  693,
  355, 1360,  921,  125,  350,  125,  464, 1359,  350, 1367,
  352, 1308, 1276, 1361, 1432,  675,  595, 1400,  693,  898,
 1226,  784,  785, 1546,  351,   24, 1151,   25, 1439,  351,
   26, 1154, 1005,   40,  350,   27,    0,    0,    0,    0,
   28,  355,    0,  355,    0,    0,    0,    0,    0,   30,
    0,  125,    0,    0,  125,    0,   32,    0,    0,    0,
    0,   33,    0,    0,    0,   34,    0,    0,  351,    0,
    0,    0,    0,    0,    0,  652,    0,   36,    0,   37,
 1485,  123,    0,   38,   24,    0,   25,    0,  125,   26,
    0,   39,   40,    0,   27,   41,  351,  351,  596,   28,
    0,    0,    0,    0,    0,    0,    0,    0,   30,    0,
  350,    0,    0,    0,    0,   32,    0,    0,  123,    0,
   33,    0,    0,  350,   34,    0,  352,  351,    0,    0,
    0,    0,    0,  350,    0,    0,   36,  343,   37,    0,
    0, 1485,   38,  355,    0,    0,    0,    0,    0,    0,
   39,   40,    0,    0,   41,    0,    0,   87,  350,    0,
 1575, 1576,  350,    0,    0,    0,    0,  123,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  123,    0,    0,
    0,    0,  123,    0,  406,    0,  125,    0, 1609,    0,
    0, 1612,  352,    0,    0,    0,  343,    0,  370,    0,
    0,  374,    0,    0,    0,  383,  385,  387,  389,  391,
  393,  395,  397,    0,    0,  352,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  506,  123,    0,    0,    0,    0,    0,  350,  123,    0,
    0,    0,  123,  406,    0,    0,    0,    0,    0,  351,
    0,    0,    0,    0,  507,    0,    0,    0,    0,  355,
  350,  350,    0,    0,    0,    0,    0,  508,    0,    0,
    0,  123,  510,    0,    0,    0,  352,  511,    0,  512,
  513,  514,  515,    0,    0,    0,  351,  516,    0,    0,
   40,  517,    0,    0,   40,  352,  352,    0,  578,    0,
    0,    0,    0,  518,    0,   40,  519,    0,  520,    0,
    0,   40,    0,    0,    0,   40,    0,    0,   40,    0,
    0,    0,   26,  352,    0,  355,  352,    0,    0,    0,
   40,   40,  521,    0,  123,   40,   40,    0,  350,    0,
    0,   40,    0,   40,   40,   40,   40,    0,  355,    0,
  351,   40,  125,    0,    0,   40,    0,   40,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   40,    0,   40,
   40,  350,   40,    0,    0,    0,   40,    0,    0,  350,
    0,  350,    0,    0,    0,    0,    0,    0,    0,  727,
    0,  351,    0, 1605,    0,    0,   40,    0,    0,  713,
    0,    0,    0,    0,    0,    0,    0,   40,   40,  355,
  123,  355,  351,    0,    0,    0,  351,    0,    0,  355,
    0,  370,    0,    0,    0,    0,    0,    0,  355,  355,
    0,  355,    0,    0,    0,    0,    0,    0,  125,    0,
    0,    0,  351,    0,    0,    0,    0,    0,  125,    0,
    0,    0,    0,  125,    0,    0,  355,    0,    0,  355,
  621,    0,    0,    0,   40,   40,    0,    0,    0,    0,
  370,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  350,    0,  713,    0,    0,    0,    0,  713,    0,
  713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
  713,    0,  125,    0,    0,    0,    0,    0,    0,  125,
  713,  713,    0,  125,    0,    0,    0,  713,  351,  713,
    0,  713,    0,  713,  713,  713,    0,    0,    0,    0,
    0,  351,    0,    0,    0,    0,    0,    0,    0,  713,
    0,  351,  125,  715,  717,  719,    0,    0,  621,  621,
  621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
  621,  621,  621,  621,    0,    0,  351,    0,    0,    0,
  351,    0,    0,    0,    0,    0,    0,    0,    0,   26,
    0,  713,  588,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   26,    0,    0,  350,    0,    0,
   26,    0,    0,    0,   26,  125,    0,   26,    0,  717,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   26,
   26,    0,    0,    0,   26,   26,    0,    0,    0,    0,
   26,    0,   26,   26,   26,   26,    0,    0,    0,    0,
   26,    0,    0,    0,   26,  351,   26,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   26,    0,    0,   26,
    0,   26,    0,  350,    0,   26,    0,    0,  351,  351,
    0,  621,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  125,    0,    0,    0,   26,  350,    0,    0,    0,
    0,    0,    0,  717,    0,   23,   26,   26,  717,    0,
  717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
  717,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  717,  717,    0,    0,    0,    0,    0,  717,    0,  717,
    0,  717,    0,  717,  717,  717,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  351,  350,    0,  350,
    0,    0,    0,   26,   26,    0,    0,  350,    0,    0,
    0,    0,    0,    0,    0,   33,  350,  350,  949,  350,
    0,    0,    0,    0,    0, 1592,    0,    0,    0,  351,
    0,    0,    0,   24,    0,   25,    0,  351,   26,  351,
    0,  717, 1592,   27,  350,    0,    0,  350,   28,    0,
    0,    0,   29,    0,    0, 1592,    0,   30,    0,    0,
    0,  381,   31,    0,   32,    0,    0,  381,  381,   33,
    0,    0,    0,   34,   35,  984,  985,  901,  381, 1592,
  381,  901,  381,  901,    0,   36,    0,   37,  588,    0,
  901,   38,  370,  588,  588,  381,    0,    0,    0,   39,
   40,  381,  381,   41,    0,    0,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  588,    0,    0,
    0,  381,    0,    0,    0,    0,    0,  381,    0,  381,
  588,  588,  381,    0,    0,  588,    0,    0,  588,  351,
  588,  901,  588,  588,  588,  588,    0,    0,    0,    0,
  588,    0,    0,    0,  588,    0,    0,    0,  588,    0,
    0,    0,    0,    0,    0,    0,  588,    0,    0,  588,
    0,  588,  588,    0,    0,    0,  588,  588,    0,  588,
  588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
    0,    0,   43,    0,    0,  588,  588,  588,    0,  588,
  588,    0,    0,    0,    0,  588,  588,    0,  588,  588,
  588,  588,  588,  588,  588,  370,  588,  588,    0,  588,
  588,  588,  588,  588,  588,  588,  588,  588,  588, 1026,
  588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
  588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
  588,  588,    0,    0,  588,  351,  588,    0,  588,    0,
    0,  588,    0,    0,    0,    0,    0,    0,    0,    0,
  588,   33,   33,    0,    0,  934,   33,    0,    0,    0,
   33,    0,   33,    0,    0,   33,    0,   33,   33,    0,
   33,    0,    0,   33,    0,   33,    0,   33,   33,   33,
   33,    0,    0,   33,   33,    0,    0,    0,    0,   33,
    0,   33,   33,   33,    0,    0,   33,   33,   33,    0,
   33,  351,    0,   33,    0,   33,   33,   33,   33,   33,
    0,    0,   33,   33,   33,    0,    0,   33,   33,   33,
    0,    0,    0,    0,  351,    0,   33,   33,    0,   33,
   33,    0,   33,   33,   33,    0,    0,    0,   33,  934,
    0,    0,    0,    0,  934,    0,  934,  934,  934,  934,
  934,  934,  934,  934,  934,  934,  934,    0,   33,    0,
    0,    0,    0,    0,    0,    0,  934,  934,   33,   33,
   33,    0,   33,  934,    0,  934,    0,  934,   33,  934,
  934,  934,    0,    0,  946,  351,    0,  351,    0,    0,
    0,    0,    0,    0,  403,  351,    0,    0,    0,    0,
    0,    0,    0,  621,  351,  351,    0,  351,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  403,   33,
    0,    0,    0,    0,    0,    0,   33,   33,    0,    0,
    0,  403,  351,    0,    0,  351,  403,  934,    0,  272,
    0,  403,    0,  403,  403,  403,  403,    0,    0,    0,
    0,  403,    0,    0,    0,  403,    0,    0,    0,  403,
    0,    0, 1239,    0,    0, 1026, 1026,  403, 1244,    0,
  403,    0,  403, 1026, 1026, 1026, 1026, 1026,    0, 1026,
 1026,    0, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
 1026,    0,    0,  381,    0, 1026,  403, 1026, 1026, 1026,
 1026, 1026, 1026,    0,    0, 1026,    0,  403,    0, 1026,
 1026,    0, 1026, 1026, 1026,    0,    0,    0,    0,    0,
    0,    0,    0, 1026, 1026,    0, 1026,    0, 1026, 1026,
    0,    0, 1026,    0, 1026, 1026, 1026, 1026, 1026, 1026,
 1026, 1026, 1026, 1026, 1026, 1026,    0, 1026,    0,    0,
 1026, 1026,    0,    0, 1026, 1026,    0,  403,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1026,
 1026, 1026, 1026, 1026,    0,    0, 1026, 1026, 1026,    0,
    0,    0, 1026, 1026,    0,    0, 1026,    0,    0,    0,
    0, 1026, 1026, 1026, 1026, 1026,    0,    0,    0, 1026,
    0, 1026,    0,    0,    0,    0,    0, 1026, 1026,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1026, 1026, 1026, 1026,    0, 1026,    0, 1026,
  946,  946,    0,    0,    0,  381,    0, 1026,  946,  946,
  946,  946,  946,    0,  946,  946,    0,  946,  946,  946,
  946,  946,  946,  946,  946,    0,    0,    0,    0,    0,
  946,    0,  946,  946,  946,  946,  946,  946,    0,    0,
  946,    0,    0,    0,  946,  946,    0,  946,  946,  946,
    0,    0,    0,    0,    0,    0,    0,    0,  946,  946,
    0,  946,    0,  946,  946,    0,    0,  946,    0,  946,
  946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
  946,    0,  946,    0,    0,  946,  946,    0,    0,  946,
  946,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  946,  946,  946,  946,  946,  381,
    0,  946,  946,  946,  381,  381,    0,  946,  946,    0,
    0,  946,    0,    0,    0,    0,  946,  946,  946,  946,
  946,    0,    0,    0,  946,    0,  946,    0,  381,    0,
    0,    0,  946,  946,    0,    0,    0,    0,    0,    0,
    0,  381,  381,    0,    0,    0,  381,  898,    0,  381,
    0,  381,    0,  381,  381,  381,  381,  946,  946,  946,
  946,  381,  946,    0,  946,  381,    0,    0,    0,  381,
    0,    0,  946,    0,    0,    0,    0,  381,    0,    0,
  381,    0,  381,  381,    0,    0,    0,  381,  381,    0,
  381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
  381,  381,    0,    0,    0,    0,  381,  381,    0,    0,
  381,  381,    0,    0,    0,    0,  381,  381,  381,  381,
  381,  381,  381,  381,  381,  381,    0,  381,  381,    0,
    0,  381,  381,  381,  381,  381,    0,    0,  381,  381,
    0,    0,    0,  381,  381,  381,  381,  381,  381,  381,
  381,  381,    0,    0,    0,    0,  381,  381,    0,    0,
    0,    0,  381,    0,    0,  381,    0,  381,    0,  381,
    0,    0,  381,    0,    0,    0,    0,    0,    0,    0,
  381,  381,    0,  371,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  381,  381,    0,    0,    0,  381,    0,
    0,    0,    0,  381,    0,  381,  381,  381,  381,    0,
    0,    0,    0,  381,    0,    0,    0,  381,    0,    0,
    0,  381,    0,    0,    0,    0,    0,    0,    0,  381,
    0,    0,  381,    0,  381,  381,    0,    0,    0,  381,
  381,    0,  381,  381,  381,  381,  381,  381,  381,  381,
  381,  381,  381,  381,    0,    0,    0,    0,  381,  381,
    0,    0,  381,  381,    0,    0,    0,    0,  381,  381,
  381,  381,  381,  381,  381,  381,  381,  381,    0,  381,
  381,    0,    0,  381,  381,  381,  381,  381,    0,    0,
  381,  381,    0,    0,    0,  381,  381,  381,  381,  381,
  381,  381,  381,  898,    0,    0,    0,    0,  898,  898,
    0,    0,    0,    0,  381,    0,    0,  381,    0,  381,
    0,  381,    0,    0,  381,    0,    0,    0,    0,    0,
    0,    0,  898,  381,    0,  422,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  898,  898,    0,    0,    0,
  898,    0,    0,  898,    0,  898,    0,  898,  898,  898,
  898,    0,    0,    0,    0,  898,    0,    0,    0,  898,
    0,    0,    0,  898,    0,    0,    0,    0,    0,    0,
    0,  898,    0,    0,  898,    0,  898,  898,    0,    0,
    0,  898,  898,    0,  898,  898,  898,  898,  898,  898,
  898,  898,  898,  898,  898,    0,    0,    0,    0,    0,
  898,  898,    0,    0,  898,  898,    0,    0,    0,    0,
  898,  898,  898,  898,  898,  898,    0,  898,  898,  898,
    0,  898,  898,    0,    0,  898,  898,  898,  898,  371,
    0,    0,  898,  898,  371,  371,    0,  898,  898,  898,
  898,  898,  898,  898,  898,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  898,    0,  371,  898,
    0,  898,    0,  898,    0,    0,  898,    0,    0,    0,
    0,  371,  371,    0,    0,  898,  371,  411,    0,  371,
    0,  371,    0,  371,  371,  371,  371,    0,    0,    0,
    0,  371,    0,    0,    0,  371,    0,    0,    0,  371,
    0,    0,    0,    0,    0,    0,    0,  371,    0,    0,
  371,    0,  371,  371,    0,    0,    0,  371,  371,    0,
  371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
  371,    0,    0,    0,    0,    0,  371,  371,    0,    0,
  371,  371,    0,    0,    0,    0,  371,  371,  371,  371,
  371,  371,    0,  371,  371,  371,    0,  371,  371,    0,
    0,  371,  371,  371,  371,    0,    0,    0,  371,  371,
    0,    0,    0,  371,  371,  371,  371,  371,  371,  371,
  371,  422,    0,    0,    0,    0,  422,  422,    0,    0,
    0,    0,  371,    0,    0,  371,    0,  371,    0,  371,
    0,    0,  371,    0,    0,    0,    0,    0,    0,    0,
  422,  371,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  422,  422,    0,    0,    0,  422,    0,
    0,   39,    0,  422,    0,  422,  422,  422,  422,    0,
    0,    0,    0,  422,    0,    0,    0,  422,    0,    0,
    0,  422,    0,    0,    0,    0,    0,    0,    0,  422,
    0,    0,  422,    0,  422,  422,    0,    0,    0,  422,
  422,    0,  422,  422,  422,  422,  422,  422,  422,  422,
  422,  422,  422,    0,    0,    0,    0,    0,  422,  422,
    0,    0,  422,  422,    0,    0,    0,    0,  422,  422,
  422,  422,  422,  422,    0,  422,  422,  422,    0,  422,
  422,    0,    0,  422,  422,  422,  422,    0,   38,    0,
  422,  422,    0,    0,    0,  422,  422,  422,  422,  422,
  422,  422,  422,  411,    0,    0,    0,    0,  411,  411,
    0,    0,    0,    0,  422,    0,    0,  422,    0,  422,
    0,  422,    0,    0,  422,    0,    0,    0,    0,    0,
    0,    0,  411,  422,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  411,  411,    0,    0,    0,
  411,    0,    0,  411,    0,  411,    0,  411,  411,  411,
  411,    0,   27,    0,    0,  411,    0,    0,    0,  411,
    0,    0,    0,  411,    0,    0,    0,    0,    0,    0,
    0,  411,    0,    0,  411,    0,  411,  411,    0,    0,
    0,  411,  411,    0,  411,  411,  411,  411,  411,  411,
  411,  411,  411,  411,  411,    0,    0,    0,    0,    0,
  411,  411,    0,    0,  411,  411,    0,    0,    0,    0,
  411,  411,    0,  411,  411,  411,    0,  411,  411,  411,
    0,  411,  411,    0,    0,  411,  411,  411,  411,    0,
    0,    0,  411,  411,    0,   37,    0,  411,  411,  411,
  411,  411,  411,  411,  411,    0,    0,    0,   39,    0,
    0,    0,   39,    0,    0,    0,  411,    0,    0,  411,
    0,  411,    0,   39,    0,    0,    0,    0,    0,   39,
    0,    0,    0,   39,    0,  411,   39,    0,    5,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   39,   39,
    0,    0,    0,   39,   39,    0,   53,    0,    0,   39,
    0,   39,   39,   39,   39,    0,    0,    0,    0,   39,
    0,    0,    0,   39,    0,   39,    0,    0,    0,    0,
   53,    0,    0,    0,    0,   39,    0,   39,   39,    0,
   39,    0,    0,   53,   39,   38,    0,    0,   53,   38,
    0,    0,    0,   53,    0,   53,   53,   53,   53,    0,
   38,    0, 1128,   53,   39,    0,   38,   53,    0,    0,
   38,    0,    0,   38,    0,    0,   39,    0,    0,   53,
    0,    0,   53,    0,   53,   38,   38,    0,    0,    0,
   38,   38,    0,    0,    0,    0,   38,    0,   38,   38,
   38,   38,    0,    0,    0,    0,   38,    0,   53,    0,
   38,    0,   38,    0,    0,   53,   53,    0,    0,   27,
    0,    0,   38,   27,    0,   38,   53,   38,    0,    0,
    0,   38,   39,   39,   27,    0,    0,    0,    0,    0,
   27,    0,    0,    0,   27,    0,    0,   27,    0,    0,
    0,   38,    0,    0,    0,    0,    0,    0,    0,   27,
   27,    0,   38,   38,   27,   27,    0,    0,    0,    0,
   27,    0,   27,   27,   27,   27,    0,    0,    0,    0,
   27,    0,    0,    0,   27,    0,   27,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   27,    0,    7,   27,
    0,   27,   37,    0,    0,   27,   37,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   37,    0,   38,
   38,    0,    0,   37,    0,   27,    0,   37,    0,    0,
   37,    0,    0,    0,    0,    0,   27,   27,    0,    0,
    0, 1129,   37,   37,    0,    5,    0,   37,   37,   53,
    0,    0,    0,   37,    0,   37,   37,   37,   37,    0,
   53,    0,    0,   37,    0,    0,   53,   37,    0,   37,
   53,    0,    0,   53,    0,    0,    0,    0,    0,   37,
    0,    0,   37,    0,   37,   53,   53,    0,   37,    0,
   53,   53,    0,   27,   27,    0,   53,    0,   53,   53,
   53,   53,    0,    0,    0,    0,   53,    0,   37,    0,
   53,    0,   53,   54,    0,    0,    0,    0,    0, 1128,
   37,    0,   53,   53,    0,   53,    0,   53,    0,    0,
    0,   53,    0,    0,   53,    0,    0,    0,    0,    0,
   53,    0,    0,    0,   53,    0,    0,   53,    0,    0,
    0,   53,    0,    0,    0,    0,    0,    0,    0,   53,
   53,    0,    0,    0,   53,   53,    0,    0,    0,    0,
   53,    0,   53,   53,   53,   53,   37,   37,    0,    0,
   53,    0,    0,   53,   53,    0,   53,   53,    0,    0,
    0,    0,    0,    0,    0,    0,   53,    0,   53,   53,
    0,   53,    0,    0,   53,   53,    0,    0,   53,    0,
    0,   53,    0,    0,    0,    0,    0,    0,    0,   53,
   53,    0,    0,   53,   53,   53,    0,    0,   53,   53,
    0,    0,    0,    0,   53,    0,   53,   53,   53,   53,
    0,    0,    0,    0,   53,    0,    0,    0,   53,    0,
   53,    0,    0,    0,    0,    7,    0,    0,    0,   54,
   53,    0,    0,   53,    0,   53,    0,    0,    0,   53,
   54,    0,    0,    0,    0,    0,   54,    0,    0,    0,
   54,    0,    0,   54,    0,    0,    0,    0,    0,   53,
    0,    0,    0,   53,   53,   54,   54,    0, 1129,    0,
   54,   54,   53,    0,    0,    0,   54,    0,   54,   54,
   54,   54,    0,   53,    0,    0,   54,    0,    0,   53,
   54,    0,   54,   53,    0,    0,   53,    0,    0,    0,
    0,    0,   54,    0,    0,   54,    0,   54,   53,   53,
    0,   54,    0,   53,   53,    0,    0,    0,    0,   53,
    0,   53,   53,   53,   53,    0,    0,   53,   53,   53,
    0,   54,    0,   53,    0,   53,    0,    0,    0,    0,
   54,    0,    0,    0,   54,   53,    0,    0,   53,    0,
   53,    0,    0,    0,   53,   54,    0,    0,    0,    0,
    0,   54,    0,    0,    0,   54,    0,    0,   54,    0,
    0,    0,    0,    0,   53,    0,    0,    0,    0,    0,
   54,   54,    0,    0,    0,   54,   54,    0,    0,    0,
    0,   54,    0,   54,   54,   54,   54,    0,    0,   54,
   54,   54,    0,    0,    0,   54,    0,   54,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   54,    0,    0,
   54,    0,   54,    0,    0,    0,   54,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   53,   53,    0,    0,   54,    0,    0,   56,
    0,    0,    0,    0,    0,    0,    0,   57,   24,   58,
   25,    0,    0,   26,   59,    0,   60,   61,   27,   62,
   63,   64,   65,   28,    0,    0,    0,    0,    0,   66,
    0,   67,   30,   68,   69,   70,   71,    0,    0,   32,
    0,    0,    0,   72,   33,    0,   73,   74,   34,    0,
    0,    0,    0,    0,    0,    0,    0,   75,   76,    0,
   36,    0,   37,   77,   54,   54,   38,    0,   78,   79,
   80,   81,   82,   83,   39,   40,   84,   85,   41,   86,
    0,   87,    0,    0,   88,   89,    0,    0,   90,   91,
    0,  901,    0,    0,    0,    0,    0,  901,    0,    0,
    0,    0,    0,   92,   93,   94,   95,   96,    0,    0,
   97,   98,   99,    0,    0,    0,  100,    0,    0,    0,
  101,    0,    0,    0,    0,  102,  103,  104,  105,  106,
    0,    0,    0,  107,  901,  108,    0,    0,    0,    0,
    0,  109,  110,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  111,  112,  113,  114,
    0,    0,    0,  115,    0,  901,    0,    0,    0,    0,
  901,  207,  901,  901,  901,  901,  901,  901,  901,  901,
  901,  901,  901,  901,    0,    0,    0,    0,    0,  901,
  901,    0,  901,  901,    0,    0,    0,    0,  901,  901,
  901,  901,  901,  901,  901,  901,  901,  901,    0,  901,
  901,    0,  901,  901,  901,  901,  901,  901,  901,  901,
  901,  901,    0,  901,  901,  901,  901,  901,  901,  901,
  901,  901,  901,  901,  901,  901,  901,  901,  901,  901,
  901,  901,  901,  901,  901,  901,    0,  901,    0,  901,
  402,  901,  901,  901,  901,    0,    0,    0,    0,    0,
    0,    0,    0,  901,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  402,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  402,    0,    0,
  901,    0,  402,    0,    0,  271,    0,  402,    0,  402,
  402,  402,  402,    0,    0,    0,    0,  402,    0,    0,
    0,  402,    0,    0,    0,  402,    0,    0,    0,    0,
  381,    0,    0,  402,    0,    0,  402,    0,  402,    0,
    0,  901,    0,    0,    0,    0,  901,    0,  901,  901,
  901,  901,  901,  901,  901,  901,  901,  901,  901,  901,
    0,    0,  402,    0,    0,  901,  901,  381,  901,  901,
    0,    0,    0,  402,  901,  901,  901,  901,  901,  901,
  901,  901,  901,  901,    0,  901,  901,    0,  901,  901,
  901,  901,  901,  901,  901,  901,  901,  901,    0,  901,
  901,  901,  901,  901,  901,  901,  901,  901,  901,  901,
  901,  901,  901,  901,  901,  901,  901,  901,  901,  901,
  901,  901,  381,  402,    0,  901,    0,  901,  381,    0,
  901,    0,    0,  381,    0,    0,    0,    0,    0,  901,
    0,    0,    0,    0,    0,  381,  381,  381,  381,  901,
    0,    0,  381,  381,    0,    0,  381,  381,  381,  381,
  381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
  381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
  381,  381,  381,  381,  381,  381,  381,  381,    0,    0,
    0,    0,    0,    0,  381,    0,    0,  381,    0,    0,
    0,    0,    0,    0,    0,    0,  381,    0,    0,    0,
    0,  381,    0,  381,  381,  381,  381,  381,  381,  381,
  381,  381,  381,  381,  381,    0,    0,    0,    0,    0,
  381,  381,    0,  381,  381,    0,    0,    0,    0,  381,
  381,  381,  381,  381,  381,  381,  381,  381,  381,    0,
  381,  381,    0,  381,  381,  381,  381,  381,  381,  381,
  381,  381,  381,    0,  381,  381,  381,  381,  381,  381,
  381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
  381,  381,  381,  381,  381,  381,    0,  381,    0,    0,
  381,   53,  381,  381,    0,  381,    0,    0,    0,    0,
    0,    0,   53,    0,  381,    0,    0,    0,   53,    0,
    0,    0,   53,    0,    0,   53,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   53,   53,    0,
  381,    0,   53,   53,    0,    0,    0,    0,   53,    0,
   53,   53,   53,   53,    0,    0,    0,    0,   53,    0,
    0,    0,   53,    0,   53,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   53,    0,    0,   53,    0,   53,
    0,  381,    0,   53,    0,    0,  381,    0,  381,  381,
  381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
    0,    0,    0,   53,    0,  381,  381,    0,  381,  381,
    0,    0,    0,    0,   41,  381,  381,  381,  381,  381,
  381,  381,  381,  381,    0,  381,  381,    0,  381,  381,
  381,  381,  381,  381,  381,  381,  381,  381,    0,  381,
  381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
  381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
  381,    0,  590,    0,   33,  381,    0,  381,  590,    0,
  381,   53,   53,    0,    0,    0,    0,    0,    0,  381,
    0,    0,    0,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   33,    0,    0,    0,  590,   33,    0,    0,    0,
    0,   33,    0,   33,   33,   33,   33,    0,    0,   33,
    0,   33,    0,    0,    0,   33,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   33,    0,    0,
   33,    0,   33,    0,    0,    0,  590,    0,    0,    0,
    0,  590,    0,  590,  590,  590,  590,  590,  590,  590,
  590,  590,  590,  590, 1120,    0,   33,    0,    0,    0,
    0,  590,    0,  590,  590,    0,    0,   33,   33,  590,
  590,  590,  590,  590,  590,  590,  590,  590,  590,    0,
  590,  590,    0,  590,  590,  590,  590,  590,  590,  590,
  590,  590,  590,    0,  590,  590,  590,  590,  590,  590,
  590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
  590,  590,  590,  590,  590,  590,    0,  586,    0,    0,
    0,    0,  590,  586,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  590,    0,    0,    0, 1120,    0,
    0,    0,    0, 1120,    0, 1120, 1120, 1120, 1120, 1120,
 1120, 1120, 1120, 1120, 1120,    0,    0,    0,    0,    0,
  586,    0,    0,    0,    0, 1120, 1120,    0,    0,    0,
    0,    0, 1120,    0, 1120,    0, 1120,    0, 1120, 1120,
 1120,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  586,    0,    0,    0,    0,  586,    0,  586,  586,
  586,  586,  586,  586,  586,  586,  586,  586,  586,    0,
    0,    0,    0,    0,    0,    0,  586,    0,  586,  586,
    0,    0,    0,    0,  586,  586, 1120,  586,  586,  586,
  586,  586,  586,  586,    0,  586,  586,    0,  586,  586,
  586,  586,  586,  586,  586,  586,  586,  586,    0,  586,
  586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
  586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
  586,    0,  594,    0,    0,    0,   53,  586,  594,    0,
  586,    0,    0,    0,    0,    0,    0,   53,    0,  586,
    0,    0,    0,   53,    0,    0,    0,   53,    0,    0,
   53,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   53,   53,    0,  594,    0,   53,   53,    0,
    0,    0,    0,   53,    0,   53,   53,   53,   53,    0,
    0,    0,    0,   53,    0,    0,    0,   53,    0,   53,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   53,
    0,    0,   53,    0,   53,    0,  594,    0,   53,    0,
    0,  594,    0,  594,  594,  594,  594,  594,  594,  594,
  594,  594,  594,  594,    0,    0,    0,    0,   53,    0,
    0,  594,    0,  594,  594,    0,    0,    0,    0,   42,
  594,    0,  594,  594,  594,  594,  594,  594,  594,    0,
  594,  594,    0,  594,  594,  594,  594,  594,  594,  594,
  594,  594,  594,    0,  594,  594,  594,  594,  594,  594,
  594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
  594,  594,  594,  594,  594,  594,    0,  381,    0,   33,
    0,   33,  594,  381,    0,  594,   53,   53,    0,    0,
    0,    0,    0,    0,  594,    0,    0,    0,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   33,    0,    0,    0,
  381,   33,    0,    0,    0,    0,   33,    0,   33,   33,
   33,   33,    0,    0,    0,    0,   33,    0,    0,    0,
   33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   33,    0,    0,   33,    0,   33,    0,    0,
    0,  381,    0,    0,    0,    0,  381,    0,  381,  381,
  381,  381,  381,  381,  381,  381,  381,  381,  381,    0,
    0,   33,    0,    0,    0,    0,  381,    0,  381,  381,
    0,    0,   33,   33,    0,  381,    0,  381,  381,  381,
  381,  381,  381,  381,    0,  381,  381,    0,  381,  381,
  381,  381,  381,  381,  381,  381,  381,  381,    0,  381,
  381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
  381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
  381,    0,  512,    0,    0,    0,   53,  381,  512,    0,
  381,    0,    0,    0,    0,    0,    0,    0,    0,  381,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   53,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   53,    0,  512,    0,    0,   53,    0,
    0,    0,    0,   53,    0,   53,   53,   53,   53,    0,
    0,    0,    0,   53,    0,    0,    0,   53,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   53,
    0,    0,   53,    0,   53,    0,  512,    0,    0,    0,
    0,  512,    0,  512,  512,  512,  512,  512,  512,  512,
  512,  512,  512,  512,    0,    0,  710,    0,   53,    0,
    0,  512,    0,  512,  512,   53,   53,    0,    0,  237,
  512,    0,  512,  512,  512,  512,  512,  512,  512,    0,
  512,  512,    0,  512,  512,  512,  512,  512,  512,  512,
  512,  512,  512,    0,  512,  512,  512,  512,  512,  512,
  512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
  512,  512,  512,  512,  512,  512,    0,  622,    0,    0,
    0,    0,  512,  622,    0,  512,    0,    0,    0,    0,
    0,    0,    0,    0,  512,    0,    0,    0,    0,    0,
  710,    0,    0,    0,    0,  710,    0,  710,  710,  710,
  710,  710,  710,  710,  710,  710,  710,  710,    0,    0,
  622,    0,    0,    0,    0,    0,    0,  710,  710,    0,
    0,    0,    0,    0,  710,    0,  710,    0,  710,    0,
  710,  710,  710,    0,    0,    0,    0,    0,  381,    0,
    0,    0,    0,    0,  381,    0,  710,    0,  901,    0,
    0,  622,    0,    0,    0,    0,  622,  710,  622,  622,
  622,  622,  622,  622,  622,  622,  622,  622,  622,  710,
    0,    0,    0,    0,    0,    0,    0,    0,  622,  622,
    0,  381,    0,    0,    0,  622,    0,  622,  710,  622,
    0,  622,  622,  622,    0,  622,  622,  901,  622,  622,
  622,  622,  622,  622,  622,  622,  622,  622,    0,    0,
    0,  622,  622,  622,  622,  622,  622,  622,  622,  622,
  622,  622,  622,  622,  622,  622,  622,  622,  622,    0,
  622,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  381,    0,    0,    0,    0,    0,  381,  381,    0,  622,
    0,    0,    0,    0,    0,    0,  381,  381,  381,  381,
  381,  381,  381,  901,  381,    0,  381,  381,    0,  381,
  381,  381,  381,  381,  381,  381,  381,  381,  381,    0,
  381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
  381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
  381,  381,    0,  371,    0,    0,  381,   53,  381,  371,
    0,  381,    0,    0,    0,    0,    0,    0,    0,    0,
  381,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   53,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   53,    0,  371,    0,    0,   53,
    0,    0,    0,    0,   53,    0,   53,   53,   53,   53,
    0,    0,    0,    0,   53,    0,    0,    0,   53,    0,
  445,    0,    0,    0,    0,    0,  445,    0,    0,    0,
   53,    0,    0,   53,    0,   53,    0,  371,    0,    0,
    0,    0,  371,    0,  371,  371,  371,  371,  371,  371,
  371,  371,  371,  371,  371,    0,    0,    0,    0,   53,
    0,  371,  445,  445,  371,  371,   53,   53,    0,    0,
  239,  371,  371,  371,  445,  371,  445,  371,  371,  371,
    0,  371,  371,    0,    0,  371,  371,  371,  371,    0,
    0,    0,  371,  371,    0,  445,  445,  371,  371,  371,
  371,  371,  371,  371,  371,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  445,  371,    0,    0,    0,
    0,  371,    0,  445,    0,    0,  445,    0,  371,  445,
    0,    0,    0,    0,    0,  371,    0,    0,  445,  371,
  445,  445,  445,  445,  445,  445,  445,    0,  445,  445,
    0,  445,  445,  445,  445,  445,    0,  445,  445,  445,
  445,    0,  445,  445,  445,  445,  445,  445,  445,  445,
  445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
  445,  445,  445,  445,    0,  665,    0,   53,  371,    0,
  445,  665,    0,  445,    0,    0,    0,    0,    0,    0,
    0,    0,  445,    0,    0,    0,    0,    0,    0,    0,
    0,   53,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   53,    0,    0,    0,  665,   53,
    0,    0,    0,    0,   53,    0,   53,   53,   53,   53,
    0,    0,   53,    0,   53,    0,    0,    0,   53,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   53,    0,    0,   53,    0,   53,    0,    0,    0,  665,
    0,    0,    0,    0,  665,    0,  665,  665,  665,  665,
  665,  665,  665,  665,  665,  665,  665,    0,    0,   53,
    0,    0,    0,    0,  446,  669,  665,  665,    0,    0,
  338,  669,    0,  665,    0,  665,  446,  665,  446,  665,
  665,  665,    0,  665,  665,    0,    0,  665,  665,  665,
  665,    0,    0,    0,  665,  665,    0,  446,  446,  665,
  665,  665,  665,  665,  665,  665,  665,    0,  669,    0,
    0,    0,    0,    0,    0,    0,    0,  446,  665,    0,
    0,    0,    0,    0,    0,  446,    0,    0,  446,    0,
    0,    0,    0,    0,    0,    0,    0,  665,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  669,
    0,    0,    0,    0,  669,    0,  669,  669,  669,  669,
  669,  669,  669,  669,  669,  669,  669,    0,    0,    0,
    0,    0,    0,    0,  449,  668,  669,  669,    0,    0,
    0,  668,    0,  669,    0,  669,  449,  669,  449,  669,
  669,  669,    0,  669,  669,    0,    0,  669,  669,  669,
  669,    0,    0,    0,  669,  669,    0,  449,  449,  669,
  669,  669,  669,  669,  669,  669,  669,    0,  668,    0,
    0,    0,    0,    0,    0,    0,    0,  449,  669,    0,
    0,    0,    0,    0,    0,  449,    0,    0,  449,    0,
    0,    0,    0,    0,    0,    0,    0,  669,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  668,
    0,    0,    0,    0,  668,    0,  668,  668,  668,  668,
  668,  668,  668,  668,  668,  668,  668,    0,    0,    0,
    0,    0,    0,    0,  459,  371,  668,  668,    0,    0,
    0,  371,    0,  668,    0,  668,  459,  668,  459,  668,
  668,  668,    0,  668,  668,    0,    0,  668,  668,  668,
  668,    0,    0,    0,  668,  668,    0,  459,  459,  668,
  668,  668,  668,  668,  668,  668,  668,    0,  371,    0,
    0,    0,    0,    0,    0,    0,    0,  459,  668,    0,
    0,    0,    0,    0,    0,  459,    0,    0,  459,    0,
    0,    0,    0,    0,    0,    0,    0,  668,    0,    0,
    0,    0,    0,    0,    0,  645,    0,    0,    0,  371,
    0,  645,    0,    0,  371,    0,  371,  371,  371,  371,
  371,  371,  371,  371,  371,  371,  371,    0,    0,    0,
    0,    0,    0,  371,    0,    0,  371,  371,    0,    0,
    0,    0,    0,  371,  371,  371,    0,  371,  645,  371,
  371,  371,    0,  371,  371,    0,    0,  371,  371,  371,
  371,    0,    0,    0,  371,  371,    0,    0,    0,  371,
  371,  371,  371,  371,  371,  371,  371,    0,  888,    0,
    0,    0,    0,    0,  888,    0,    0,    0,  371,  645,
    0,    0,    0,  371,  645,    0,  645,  645,  645,  645,
  645,  645,  645,  645,  645,  645,  645,  371,    0,    0,
    0,    0,    0,    0,    0,    0,  645,  645,    0,    0,
    0,  888,    0,  645,    0,  645,    0,  645,    0,  645,
  645,  645,    0,  645,  645,    0,    0,  645,  645,  645,
  645,  645,  645,  645,  645,  645,    0,    0,    0,  645,
  645,  645,  645,  645,  645,  645,  645,    0,  652,    0,
    0,    0,  888,    0,  652,    0,    0,  888,  645,  888,
  888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
    0,    0,    0,    0,    0,    0,  888,  645,    0,  888,
  888,    0,    0,    0,    0,    0,  888,    0,  888,    0,
  888,  652,  888,  888,  888,    0,  888,  888,    0,    0,
  888,  888,  888,  888,    0,    0,    0,  888,  888,    0,
    0,    0,  888,  888,  888,  888,  888,  888,  888,  888,
    0, 1032,    0,    0,    0,    0,    0, 1032,    0,    0,
    0,  888,  652,    0,    0,    0,  888,  652,    0,  652,
  652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
  888,    0,    0,    0,    0,    0,    0,    0,    0,  652,
  652,    0,    0,    0, 1032,    0,  652,    0,  652,    0,
  652,    0,  652,  652,  652,    0,  652,  652,    0,    0,
  652,  652,  652,  652,    0,    0,    0,  652,  652,    0,
    0,    0,  652,  652,  652,  652,  652,  652,  652,  652,
    0,  653,    0,    0,    0, 1032,    0,  653,    0,    0,
 1032,  652, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
 1032, 1032, 1032,    0,    0,    0,    0,    0,    0,    0,
  652,    0, 1032, 1032,    0,    0,    0,    0,    0, 1032,
    0, 1032,    0, 1032,  653, 1032, 1032, 1032,    0, 1032,
 1032,    0,    0, 1032, 1032, 1032, 1032,    0,    0,    0,
 1032, 1032,    0,    0,    0, 1032, 1032, 1032, 1032, 1032,
 1032, 1032, 1032,    0,  654,    0,    0,    0,    0,    0,
  654,    0,    0,    0, 1032,  653,    0,    0,    0,    0,
  653,    0,  653,  653,  653,  653,  653,  653,  653,  653,
  653,  653,  653, 1032,    0,    0,    0,    0,    0,    0,
    0,    0,  653,  653,    0,    0,    0,  654,    0,  653,
    0,  653,    0,  653,    0,  653,  653,  653,    0,  653,
  653,    0,    0,  653,  653,  653,  653,    0,    0,    0,
  653,  653,    0,    0,    0,  653,  653,  653,  653,  653,
  653,  653,  653,    0,    0,    0,    0,    0,  654,    0,
    0,    0,    0,  654,  653,  654,  654,  654,  654,  654,
  654,  654,  654,  654,  654,  654,    0,    0,    0,    0,
    0,    0,    0,  653,    0,  654,  654,    0,    0,    0,
    0,    0,  654,    0,  654,    0,  654,    0,  654,  654,
  654,    0,  654,  654,    0,    0,  654,  654,  654,  654,
    0,    0,    0,  654,  654,    0,    0,    0,  654,  654,
  654,  654,  654,  654,  654,  654,    0,  554,    0,  679,
    0,    0,    0,    0,    0,   57,   24,  654,   25,    0,
    0,   26,  267,    0,    0,    0,   27,   62,   63,   64,
    0,   28,    0,    0,    0,    0,  654,   66,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   73,   74,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   77,    0,    0,   38,    0,    0,   79,    0,   81,
    0,   83,   39,   40,  268,    0,   41,    0,    0,    0,
    0,    0,    0,  679,    0,    0,    0,    0,  679,    0,
  679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
  679,   92,   93,   94,  269,  555,  680,    0,   97,   98,
  679,  679,    0,    0,    0,    0,    0,  679,  320,  679,
    0,  679,    0,  679,  679,  679,    0,    0,    0,    0,
    0,  679,  679,  679,  679,    0,    0,    0,  679,  679,
    0,    0,    0,  679,  679,  679,  679,  679,  679,  679,
  679,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  679,    0,  111,  556,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  557,  558,
    0,  679,  681,    0,    0,    0,    0,    0,    0,    0,
  680,    0,    0,    0,    0,  680,    0,  680,  680,  680,
  680,  680,  680,  680,  680,  680,  680,  680,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  680,  680,    0,
    0,    0,    0,    0,  680,    0,  680,    0,  680,    0,
  680,  680,  680,    0,    0,    0,    0,    0,  680,  680,
  680,  680,    0,    0,    0,  680,  680,    0,    0,    0,
  680,  680,  680,  680,  680,  680,  680,  680,  684,    0,
    0,    0,    0,    0,    0,    0,  681,    0,    0,  680,
    0,  681,    0,  681,  681,  681,  681,  681,  681,  681,
  681,  681,  681,  681,    0,    0,    0,    0,  680,    0,
    0,    0,    0,  681,  681,    0,    0,    0,    0,    0,
  681,    0,  681,    0,  681,    0,  681,  681,  681,    0,
    0,    0,    0,    0,  681,  681,  681,  681,    0,    0,
    0,  681,  681,    0,    0,    0,  681,  681,  681,  681,
  681,  681,  681,  681,  685,    0,    0,    0,    0,    0,
    0,    0,  684,    0,    0,  681,    0,  684,    0,  684,
  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
    0,    0,    0,    0,  681,    0,    0,    0,    0,  684,
  684,    0,    0,    0,    0,    0,  684,    0,  684,    0,
  684,    0,  684,  684,  684,    0,    0,    0,    0,    0,
  684,  684,  684,  684,    0,    0,    0,  684,  684,    0,
    0,    0,    0,    0,  684,  684,  684,  684,  684,  684,
  686,    0,    0,    0,    0,    0,    0,    0,  685,    0,
    0,  684,    0,  685,    0,  685,  685,  685,  685,  685,
  685,  685,  685,  685,  685,  685,    0,    0,    0,    0,
  684,    0,    0,    0,    0,  685,  685,    0,    0,    0,
    0,    0,  685,    0,  685,    0,  685,    0,  685,  685,
  685,    0,    0,    0,    0,    0,  685,  685,  685,  685,
    0,    0,    0,  685,  685,    0,    0,    0,    0,    0,
  685,  685,  685,  685,  685,  685,  687,    0,    0,    0,
    0,    0,    0,    0,  686,    0,    0,  685,    0,  686,
    0,  686,  686,  686,  686,  686,  686,  686,  686,  686,
  686,  686,    0,    0,    0,    0,  685,    0,    0,    0,
    0,  686,  686,    0,    0,    0,    0,    0,  686,    0,
  686,    0,  686,    0,  686,  686,  686,    0,    0,    0,
    0,    0,  686,  686,  686,  686,    0,    0,    0,  686,
  686,    0,    0,    0,    0,    0,  686,  686,  686,  686,
  686,  686,  688,    0,    0,    0,    0,    0,    0,    0,
  687,    0,    0,  686,    0,  687,    0,  687,  687,  687,
  687,  687,  687,  687,  687,  687,  687,  687,    0,    0,
    0,    0,  686,    0,    0,    0,    0,  687,  687,    0,
    0,    0,    0,    0,  687,    0,  687,    0,  687,    0,
  687,  687,  687,    0,    0,    0,    0,    0,  687,  687,
  687,  687,  381,    0,    0,  687,  687,    0,  381,    0,
    0,    0,  687,  687,  687,  687,  687,  687,    0,    0,
    0,    0,    0,    0,    0,    0,  688,    0,    0,  687,
    0,  688,    0,  688,  688,  688,  688,  688,  688,  688,
  688,  688,  688,  688,    0,  381,    0,    0,  687,    0,
    0,    0,    0,  688,  688,    0,    0,    0,    0,    0,
  688,    0,  688,    0,  688,    0,  688,  688,  688,    0,
    0,    0,    0,    0,  688,  688,  688,  688,    0,    0,
    0,  688,  688,    0,    0,    0,    0,    0,  688,  688,
  688,  688,  688,  688,  694,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  688,    0,    0,    0,    0,
    0,  381,    0,    0,    0,    0,    0,    0,    0,    0,
  381,    0,    0,  381,  688,  381,  381,    0,    0,    0,
  381,  381,    0,    0,  381,  381,  381,  381,  381,  381,
  381,  381,  381,    0,  381,  381,  381,  381,  381,  381,
  381,  381,  381,  381,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  381,  381,    0,  695,    0,    0,
    0,    0,  381,    0,    0,  381,    0,    0,  694,    0,
    0,    0,    0,  694,  381,  694,  694,  694,  694,  694,
  694,  694,  694,  694,  694,  694,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  694,  694,    0,    0,    0,
    0,    0,  694,    0,  694,    0,  694,    0,  694,  694,
  694,    0,    0,    0,    0,    0,    0,    0,  694,  694,
    0,    0,    0,  694,  694,    0,    0,    0,    0,    0,
  698,    0,  694,  694,  694,  694,    0,    0,    0,    0,
    0,  695,    0,    0,    0,    0,  695,  694,  695,  695,
  695,  695,  695,  695,  695,  695,  695,  695,  695,    0,
    0,    0,    0,    0,    0,    0,  694,    0,  695,  695,
    0,    0,    0,    0,    0,  695,    0,  695,    0,  695,
    0,  695,  695,  695,    0,    0,    0,    0,    0,    0,
    0,  695,  695,    0,    0,    0,  695,  695,    0,    0,
    0,    0,    0,  699,    0,  695,  695,  695,  695,    0,
    0,    0,    0,    0,  698,    0,    0,    0,    0,  698,
  695,  698,  698,  698,  698,  698,  698,  698,  698,  698,
  698,  698,    0,    0,    0,    0,    0,    0,    0,  695,
    0,  698,  698,    0,    0,    0,    0,    0,  698,    0,
  698,    0,  698,    0,  698,  698,  698,    0,    0,    0,
    0,    0,    0,    0,  698,  698,    0,    0,    0,  698,
  698,    0,    0,    0,    0,    0,  701,    0,    0,    0,
  698,  698,    0,    0,    0,    0,    0,  699,    0,    0,
    0,    0,  699,  698,  699,  699,  699,  699,  699,  699,
  699,  699,  699,  699,  699,    0,    0,    0,    0,    0,
    0,    0,  698,    0,  699,  699,    0,    0,    0,    0,
    0,  699,    0,  699,    0,  699,    0,  699,  699,  699,
    0,    0,    0,    0,    0,    0,    0,  699,  699,    0,
    0,    0,  699,  699,    0,    0,    0,    0,    0,  702,
    0,    0,    0,  699,  699,    0,    0,    0,    0,    0,
  701,    0,    0,    0,    0,  701,  699,  701,  701,  701,
  701,  701,  701,  701,  701,  701,  701,  701,    0,    0,
    0,    0,    0,    0,    0,  699,    0,  701,  701,    0,
    0,    0,    0,    0,  701,    0,  701,    0,  701,    0,
  701,  701,  701,    0,    0,    0,    0,    0,    0,    0,
    0,  701,    0,    0,    0,  701,  701,    0,    0,    0,
    0,    0,  705,    0,    0,    0,  701,  701,    0,    0,
    0,    0,    0,  702,    0,    0,    0,    0,  702,  701,
  702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
  702,    0,    0,    0,    0,    0,    0,    0,  701,    0,
  702,  702,    0,    0,    0,    0,    0,  702,    0,  702,
    0,  702,    0,  702,  702,  702,    0,    0,    0,    0,
    0,    0,    0,    0,  702,    0,    0,    0,  702,  702,
    0,    0,    0,    0,    0,  707,    0,    0,    0,  702,
  702,    0,    0,    0,    0,    0,  705,    0,    0,    0,
    0,  705,  702,  705,  705,  705,  705,  705,  705,  705,
  705,  705,  705,  705,    0,    0,    0,    0,    0,    0,
    0,  702,    0,  705,  705,    0,    0,    0,    0,    0,
  705,    0,  705,    0,  705,    0,  705,  705,  705,    0,
    0,    0,    0,    0,    0,    0,    0,  705,    0,    0,
    0,    0,  705,    0,    0,    0,    0,    0,  708,    0,
    0,    0,  705,  705,    0,    0,    0,    0,    0,  707,
    0,    0,    0,    0,  707,  705,  707,  707,  707,  707,
  707,  707,  707,  707,  707,  707,  707,    0,    0,    0,
    0,    0,    0,    0,  705,    0,  707,  707,    0,    0,
    0,    0,    0,  707,    0,  707,    0,  707,    0,  707,
  707,  707,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  707,    0,    0,    0,    0,
    0,  711,    0,    0,    0,  707,  707,    0,    0,    0,
    0,    0,  708,    0,    0,    0,    0,  708,  707,  708,
  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
    0,    0,    0,    0,    0,    0,    0,  707,    0,  708,
  708,    0,    0,    0,    0,    0,  708,    0,  708,    0,
  708,    0,  708,  708,  708,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  708,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  708,  708,
    0,    0,    0,    0,    0,  711,    0,    0,    0,    0,
  711,  708,  711,  711,  711,  711,  711,  711,  711,  711,
  711,  711,  711,    0,    0,    0,    0,    0,    0,    0,
  708,    0,  711,  711,    0,    0,    0,    0,    0,  711,
    0,  711,    0,  711,    0,  711,  711,  711,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  227,
    0,  711,    0,    0,  227,    0,    0,    0,  227,    0,
  227,    0,  711,  227,    0,  227,  227,    0,  227,    0,
    0,  227,    0,  227,  711,  227,  227,  227,  227,    0,
    0,  227,  227,    0,  212,    0,    0,  227,    0,  227,
  227,  227,    0,  711,  227,    0,  227,  213,  227,    0,
    0,  227,    0,  227,  227,  227,  227,  227,    0,    0,
  227,  227,  227,  381,    0,  227,  227,  227,    0,    0,
    0,    0,    0,    0,  227,  227,  214,  227,  227,    0,
  227,  227,  227,    0,    0,    0,  227,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  381,    0,    0,    0,    0,    0,  227,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  227,  227,  227,    0,
  227,    0,    0,    0,    0,    0,  227,    0,    0,    0,
    0,  215,  216,  217,  218,    0,  219,  220,  221,  222,
  223,  224,  225,  226,    0,    0,  227,  228,  229,  230,
  231,  232,  233,  234,    0,    0,    0,    0,    0,  381,
    0,    0,    0,    0,    0,    0,  381,  227,    0,    0,
    0,    0,    0,    0,  227,  227,  381,    0,  381,  381,
  381,  381,    0,    0,    0,  381,  381,    0,  381,  381,
  381,  381,  381,  381,  381,  381,  381,  381,    0,  381,
  381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
  381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
  381,    0,    0,  635,    0,  381,    0,  381,    0,    0,
  381,   57,   24,   58,   25, 1299,    0,   26,   59,  381,
   60,   61,   27,   62,   63,   64,   65,   28,    0,    0,
    0,    0,    0,   66,    0,   67,   30,   68,   69,   70,
   71,    0,    0,   32,    0,    0,    0,   72,   33,    0,
   73,   74,   34,    0,    0,    0,    0,    0,    0,    0,
    0,   75,   76,    0,   36,    0,   37,   77,    0,    0,
   38,    0,   78,   79,   80,   81,   82,   83,   39,   40,
   84,   85,   41,   86,    0,   87,    0,    0,   88,   89,
    0,    0,   90,   91,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   92,   93,   94,
   95,   96,    0,    0,   97,   98,   99,    0,    0,    0,
  100,    0,    0,    0,  101,    0,    0,    0,    0,  102,
  103,  104,  105,  106,    0,    0,    0,  107,    0,  108,
    0,    0,    0,    0,    0,  109,  110,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  111,  112,  113,  114,   56, 1300,    0,  115,    0,    0,
    0,    0,   57,   24,   58,   25,    0,    0,   26,   59,
    0,   60,   61,   27,   62,   63,   64,   65,   28,    0,
    0,    0,    0,    0,   66,    0,   67,   30,   68,   69,
   70,   71,    0,    0,   32,    0,    0,    0,   72,   33,
    0,   73,   74,   34,    0,    0,    0,    0,    0,    0,
    0,    0,   75,   76,    0,   36,    0,   37,   77,    0,
    0,   38,    0,   78,   79,   80,   81,   82,   83,   39,
   40,   84,   85,   41,   86,    0,   87,    0,    0,   88,
   89,    0,    0,   90,   91,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   92,   93,
   94,   95,   96,    0,    0,   97,   98,   99,    0,    0,
    0,  100,    0,    0,    0,  101,    0,    0,    0,    0,
  102,  103,  104,  105,  106,    0,    0,    0,  107,    0,
  108,    0,    0,    0,    0,    0,  109,  110,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  111,  112,  113,  114,  280,    0,    0,  115,    0,
    0,    0,    0,   57,   24,   58,   25,    0,    0,   26,
   59,    0,   60,   61,   27,   62,   63,   64,   65,   28,
    0,    0,    0,    0,    0,   66,    0,   67,   30,   68,
   69,   70,   71,    0,    0,   32,    0,    0,    0,   72,
   33,    0,   73,   74,   34,    0,    0,    0,    0,    0,
    0,    0,    0,   75,   76,    0,   36,    0,   37,   77,
    0,    0,   38,    0,   78,   79,   80,   81,   82,   83,
   39,   40,   84,   85,   41,   86,    0,   87,    0,    0,
   88,   89,    0,    0,   90,   91,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
   93,   94,   95,   96,    0,    0,   97,   98,   99,    0,
    0,    0,  100,    0,    0,    0,  101,    0,    0,    0,
    0,  102,  103,  104,  105,  106,    0,    0,    0,  107,
    0,  108,    0,    0,    0,    0,    0,  109,  110,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  111,  112,  113,  114,  635,    0,    0,  115,
    0,    0,    0,    0,   57,   24,   58,   25,    0,    0,
   26,   59,    0,   60,   61,   27,   62,   63,   64,   65,
   28,    0,    0,    0,    0,    0,   66,    0,   67,   30,
   68,   69,   70,   71,    0,    0,   32,    0,    0,    0,
   72,   33,    0,   73,   74,   34,    0,    0,    0,    0,
    0,    0,    0,    0,   75,   76,    0,   36,    0,   37,
   77,    0,    0,   38,    0,   78,   79,   80,   81,   82,
   83,   39,   40,   84,   85,   41,   86,    0,   87,    0,
    0,   88,   89,    0,    0,   90,   91,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   92,   93,   94,   95,   96,    0,    0,   97,   98,   99,
    0,    0,    0,  100,    0,    0,    0,  101,    0,    0,
    0,    0,  102,  103,  104,  105,  106,    0,    0,    0,
  107,    0,  108,    0,    0,    0,    0,    0,  109,  110,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  111,  112,  113,  114, 1125,    0,    0,
  115,    0,    0,    0,    0, 1125, 1125, 1125, 1125,    0,
    0, 1125, 1125,    0, 1125, 1125, 1125, 1125, 1125, 1125,
 1125, 1125,    0,    0,    0,    0,    0, 1125,    0, 1125,
 1125, 1125, 1125, 1125, 1125,    0,    0, 1125,    0,    0,
    0, 1125, 1125,    0, 1125, 1125, 1125,    0,    0,    0,
    0,    0,    0,    0,    0, 1125, 1125,    0, 1125,    0,
 1125, 1125,    0,    0, 1125,    0, 1125, 1125, 1125, 1125,
 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,    0, 1125,
    0,    0, 1125, 1125,    0,    0, 1125, 1125,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1125, 1125, 1125, 1125, 1125,    0,    0, 1125, 1125,
 1125,    0,    0,    0, 1125,    0,    0,    0, 1125,    0,
    0,    0,    0, 1125, 1125, 1125, 1125, 1125,    0,    0,
    0, 1125,    0, 1125,    0,    0,    0,    0,    0, 1125,
 1125,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  690,    0,    0, 1125, 1125, 1125, 1125,    0,   57,
   24, 1125,   25,    0,    0,   26,  267,    0,    0,    0,
   27,   62,   63,   64,    0,   28,    0,    0,    0,    0,
    0,   66,    0,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   73,   74,
   34,    0,  691,    0,    0,    0,    0,    0,    0,  692,
    0,    0,   36,    0,   37,   77,    0,    0,   38,    0,
    0,   79,    0,   81,    0,   83,   39,   40,  268,    0,
   41,    0,    0,    0,    0,    0,    0,  693,    0,    0,
   90,   91,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   92,   93,   94,   95,   96,
    0,    0,   97,   98,   99,    0,    0,    0,    0,    0,
    0,    0,  320,    0,    0,  694,    0,    0,  103,  104,
  105,  106,    0,    0,    0,  107,    0,  108,    0,    0,
    0,    0,    0,  109,  110,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  881,    0,    0,  111,  112,
  113,  114,    0,   57,   24,  115,   25,    0,    0,   26,
  267,    0,    0,    0,   27,   62,   63,   64,    0,   28,
    0,    0,    0,    0,    0,   66,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   73,   74,   34,    0,    0,    0,    0,    0,
    0,    0,    0,  318,    0,    0,   36,    0,   37,   77,
 1122,    0,   38,    0,    0,   79,    0,   81,    0,   83,
   39,   40,  268,    0,   41,    0,    0,    0,    0,    0,
    0,   89,    0,    0,   90,   91,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
   93,   94,   95,  319,    0,    0,   97,   98,   99,    0,
    0,    0,  575,    0,    0,    0,  320,    0,    0,    0,
    0,    0,  103,  104,  105,  106,    0,    0,    0,  107,
    0,  108,    0,    0,    0,    0,    0,  109,  110,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1135,
    0,    0,  111,  321,  113,  114,    0,   57,   24,  115,
   25,    0,    0,   26,  267,    0,    0,    0,   27,   62,
   63,   64,    0,   28,    0,    0,    0,    0,    0,   66,
    0,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   73,   74,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   77,  767,    0,   38,    0,    0,   79,
 1136,   81,    0,   83,   39,   40,  268,    0,   41,    0,
    0,    0,    0,    0,    0,   89,    0,    0,   90,   91,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   92,   93,   94,   95,  319,    0,    0,
   97,   98,   99,    0,    0,    0,    0, 1137,    0,    0,
  320,    0,    0,    0,    0,    0,  103,  104,  105,  106,
    0,    0,    0,  107,    0,  108,    0,    0,    0,    0,
    0,  109,  110,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  881,    0,    0,  111,  321,  113,  114,
    0,   57,   24,  115,   25,    0,    0,   26,  267,    0,
    0,    0,   27,   62,   63,   64,    0,   28,    0,    0,
    0,    0,    0,   66,    0,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   73,   74,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   77,    0,    0,
   38,    0,    0,   79,    0,   81,    0,   83,   39,   40,
  268,    0,   41,    0,    0,    0,    0,    0,    0,   89,
    0,    0,   90,   91,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   92,   93,   94,
   95,  319,    0,    0,   97,   98,   99,    0,    0,    0,
  575,  882,    0,    0,  320,    0,    0,    0,    0,    0,
  103,  104,  105,  106,    0,    0,    0,  107,    0,  108,
    0,    0,    0,    0,    0,  109,  110,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1119,    0,    0,
  111,  321,  113,  114,    0,   57,   24,  115,   25,    0,
    0,   26,  267,    0,    0,    0,   27,   62,   63,   64,
    0,   28,    0,    0,    0,    0,    0,   66,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   73,   74,   34,    0,  691,    0,
    0,    0,    0,    0,    0,  692,    0,    0,   36,    0,
   37,   77,    0,    0,   38,    0,    0,   79,    0,   81,
    0,   83,   39,   40,  268,    0,   41,    0,    0,    0,
    0,    0,    0,  693,    0,    0,   90,   91,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   92,   93,   94,   95,   96,    0,    0,   97,   98,
   99,    0,    0,    0,    0,    0,    0,    0,  320,    0,
    0,    0,    0,    0,  103,  104,  105,  106,    0,    0,
    0,  107,    0,  108,    0,    0,    0,    0,    0,  109,
  110,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  317,    0,    0,  111,  112,  113,  114,    0,   57,
   24,  115,   25,    0,    0,   26,  267,    0,    0,    0,
   27,   62,   63,   64,    0,   28,    0,    0,    0,    0,
    0,   66,    0,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   73,   74,
   34,    0,    0,    0,    0,    0,    0,    0,    0,  318,
    0,    0,   36,    0,   37,   77,    0,    0,   38,    0,
    0,   79,    0,   81,    0,   83,   39,   40,  268,    0,
   41,    0,    0,    0,    0,    0,    0,   89,    0,    0,
   90,   91,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   92,   93,   94,   95,  319,
    0,    0,   97,   98,   99,    0,    0,    0,    0,    0,
    0,    0,  320,    0,    0,    0,    0,    0,  103,  104,
  105,  106,    0,    0,    0,  107,    0,  108,    0,    0,
    0,    0,    0,  109,  110,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  329,    0,    0,  111,  321,
  113,  114,    0,   57,   24,  115,   25,    0,    0,   26,
  267,    0,    0,    0,   27,   62,   63,   64,    0,   28,
    0,    0,    0,    0,    0,   66,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   73,   74,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   77,
    0,    0,   38,    0,    0,   79,    0,   81,    0,   83,
   39,   40,  268,    0,   41,    0,    0,    0,    0,    0,
    0,   89,    0,    0,   90,   91,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
   93,   94,   95,  319,    0,    0,   97,   98,   99,    0,
    0,    0,    0,    0,    0,    0,  320,    0,    0,    0,
    0,  330,  103,  104,  105,  106,    0,    0,    0,  107,
    0,  108,    0,    0,    0,    0,    0,  109,  110,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  843,
    0,    0,  111,  321,  113,  114,    0,   57,   24,  115,
   25,    0,    0,   26,  267,    0,    0,    0,   27,   62,
   63,   64,    0,   28,    0,    0,    0,    0,    0,   66,
    0,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   73,   74,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   77,    0,    0,   38,    0,    0,   79,
    0,   81,    0,   83,   39,   40,  268,    0,   41,    0,
    0,   87,    0,    0,    0,   89,    0,    0,   90,   91,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   92,   93,   94,   95,  319,    0,    0,
   97,   98,   99,    0,    0,    0,    0,    0,    0,    0,
  101,    0,    0,    0,    0,    0,  103,  104,  105,  106,
    0,    0,    0,  107,    0,  108,    0,    0,    0,    0,
    0,  109,  110,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  881,    0,    0,  111,  321,  113,  114,
    0,   57,   24,  115,   25,    0,    0,   26,  267,    0,
    0,    0,   27,   62,   63,   64,    0,   28,    0,    0,
    0,    0,    0,   66,    0,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   73,   74,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   77,    0,    0,
   38,    0,    0,   79,    0,   81,    0,   83,   39,   40,
  268,    0,   41,    0,    0,    0,    0,    0,    0,   89,
    0,    0,   90,   91,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   92,   93,   94,
   95,  319,    0,    0,   97,   98,   99,    0,    0,    0,
  575,    0,    0,    0,  320,    0,    0,    0,    0,    0,
  103,  104,  105,  106,    0,    0,    0,  107,    0,  108,
    0,    0,    0,    0,    0,  109,  110,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  873,    0,    0,
  111,  321,  113,  114,    0,   57,   24,  115,   25,    0,
    0,   26,  267,    0,    0,    0,   27,   62,   63,   64,
    0,   28,    0,    0,    0,    0,    0,   66,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   73,   74,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   77,    0,    0,   38,    0,    0,   79,    0,   81,
    0,   83,   39,   40,  268,    0,   41,    0,    0,    0,
    0,    0,    0,   89,    0,    0,   90,   91,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   92,   93,   94,   95,  319,    0,    0,   97,   98,
   99,    0,    0,    0,    0, 1063,    0,    0,  320,    0,
    0,    0,    0,    0,  103,  104,  105,  106,    0,    0,
    0,  107,    0,  108,    0,    0,    0,    0,    0,  109,
  110,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  873,    0,    0,  111,  321,  113,  114,    0,   57,
   24,  115,   25,    0,    0,   26,  267,    0,    0,    0,
   27,   62,   63,   64,    0,   28,    0,    0,    0,    0,
    0,   66,    0,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   73,   74,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   77,    0,    0,   38,    0,
    0,   79,    0,   81,    0,   83,   39,   40,  268,    0,
   41,    0,    0,   87,    0,    0,    0,   89,    0,    0,
   90,   91,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   92,   93,   94,   95,  319,
    0,    0,   97,   98,   99,    0,    0,    0,    0,    0,
    0,    0,  101,    0,    0,    0,    0,    0,  103,  104,
  105,  106,    0,    0,    0,  107,    0,  108,    0,    0,
    0,    0,    0,  109,  110,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  688,    0,    0,  111,  321,
  113,  114,    0,   57,   24,  115,   25,    0,    0,   26,
  267,    0,    0,    0,   27,   62,   63,   64,    0,   28,
    0,    0,    0,    0,    0,   66,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   73,   74,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   77,
    0,    0,   38,    0,    0,   79,    0,   81,    0,   83,
   39,   40,  268,    0,   41,    0,    0,    0,    0,    0,
    0,   89,    0,    0,   90,   91,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
   93,   94,   95,   96,    0,    0,   97,   98,   99,    0,
    0,    0,    0,    0,    0,    0,  320,    0,    0,    0,
    0,    0,  103,  104,  105,  106,    0,    0,    0,  107,
    0,  108,    0,    0,    0,    0,    0,  109,  110,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  873,
    0,    0,  111,  112,  113,  114,    0,   57,   24,  115,
   25,    0,    0,   26,  267,    0,    0,    0,   27,   62,
   63,   64,    0,   28,    0,    0,    0,    0,    0,   66,
    0,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   73,   74,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   77,    0,    0,   38,    0,    0,   79,
    0,   81,    0,   83,   39,   40,  268,    0,   41,    0,
    0,    0,    0,    0,    0,   89,    0,    0,   90,   91,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   92,   93,   94,   95,  319,    0,    0,
   97,   98,   99,    0,    0,    0,    0,    0,    0,    0,
  320,    0,    0,    0,    0,    0,  103,  104,  105,  106,
    0,    0,    0,  107,    0,  108,    0,    0,    0,    0,
    0,  109,  110,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1257,    0,    0,  111,  321,  113,  114,
    0,   57,   24,  115,   25,    0,    0,   26,  267,    0,
    0,    0,   27,   62,   63,   64,    0,   28,    0,    0,
    0,    0,    0,   66,    0,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   73,   74,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   77,    0,    0,
   38,    0,    0,   79,    0,   81,    0,   83,   39,   40,
  268,    0,   41,    0,    0,    0,    0,    0,    0,   89,
    0,    0,   90,   91,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   92,   93,   94,
   95,   96,    0,    0,   97,   98,   99,    0,    0,    0,
    0,    0,    0,    0,  320,    0,    0,    0,    0,    0,
  103,  104,  105,  106,    0,    0,    0,  107,    0,  108,
    0,    0,    0,    0,    0,  109,  110,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   89,    0,    0,
  111, 1258,  113,  114,    0,   89,   89,  115,   89,    0,
    0,   89,   89,    0,  720,    0,   89,   89,   89,   89,
    0,   89,    0,   24,    0,   25,    0,   89,   26,    0,
   89,    0,    0,   27,    0,    0,    0,   89,   28,    0,
    0,    0,   89,    0,   89,   89,   89,   30,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,   89,   33,
   89,   89,    0,   34,   89,    0,    0,   89,    0,   89,
    0,   89,   89,   89,   89,   36,   89,   37,    0,    0,
    0,   38,    0,   89,    0,    0,   89,   89,    0,   39,
   40,    0,    0,   41,    0,    0,   87,    0,    0,    0,
    0,   89,   89,   89,   89,   89,    0,    0,   89,   89,
   89,    0,    0,    0,    0,    0,    0,    0,   89,    0,
    0,    0,    0,    0,   89,   89,   89,   89,    0,    0,
    0,   89,    0,   89,    0,  343,    0,    0,    0,   89,
   89,    0,    0,    0,    0,    0,    0,   57,   24,    0,
   25,    0,    0,   26,  267,    0,    0,    0,   27,   62,
   63,   64,    0,   28,   89,   89,   89,   89,   24,   66,
   25,   89,   30,   26,    0,    0,    0,    0,   27,   32,
    0,    0,  406,   28,   33,    0,   73,   74,   34,    0,
    0,    0,   30,    0,    0,    0,    0,    0,    0,   32,
   36,    0,   37,   77,   33,    0,   38,    0,   34,   79,
    0,   81,    0,   83,   39,   40,  268, 1026,   41,    0,
   36,    0,   37,    0,    0,   89,   38,    0,   90,   91,
    0,    0,    0,    0,   39,   40,    0,    0,   41,    0,
    0,  596,    0,   92,   93,   94,   95,  863,    0,    0,
   97,   98,   99,    0,    0,    0,  864, 1210,    0,    0,
  320,    0,    0,    0,    0,    0,  103,  104,  105,  106,
    0,    0,    0,  107,    0,  108,    0,    0,    0,    0,
  343,  109,  110,    0,    0,    0,    0,    0,    0,   57,
   24,    0,   25,    0,    0,   26,  267,    0,    0,    0,
   27,   62,   63,   64,    0,   28,  111,  865,  113,  114,
    0,   66,  866,    0,   30,    0,    0,    0,    0,    0,
  867,   32,    0,    0,    0,    0,   33,  406,   73,   74,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   77,    0,    0,   38,    0,
    0,   79,    0,   81,    0,   83,   39,   40,  268,    0,
   41,    0,    0,    0,    0,    0,    0,   89,    0,    0,
   90,   91,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   92,   93,   94,   95,  863,
    0,    0,   97,   98,   99,    0,    0,    0,  864,    0,
    0,    0,  320,    0,    0,    0,    0,    0,  103,  104,
  105,  106,    0,    0,    0,  107,    0,  108,    0,    0,
    0,    0,    0,  109,  110,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  111,  865,
  113,  114,    0,    0,  866,   54,    0,   54,    0,   54,
    0,   54,  867,    0,   54,    0,   54,   54,    0,   54,
    0,    0,   54,    0,   54,    0,   54,   54,   54,   54,
    0,    0,   54,   54,    0,    0,    0,    0,   54,   54,
   54,   54,   54,    0,    0,   54,    0,   54,    0,   54,
    0,   54,   54,    0,   54,   54,   54,   54,   54,    0,
   54,   54,   54,   54,    0,    0,   54,   54,   54,    0,
    0,    0,    0,    0,    0,   54,   54,    0,   54,   54,
    0,   54,   54,   54,    0,    0,    0,   54,    0,   53,
    0,    0,    0,   53,    0,   53,    0,    0,   53,    0,
   53,   53,    0,   53,    0,    0,   53,   54,   53,    0,
   53,   53,   53,   53,   54,   54,   53,   53,    0,    0,
    0,   54,   53,    0,   53,   53,   53,    0,    0,   53,
    0,   53,    0,   53,    0,    0,   53,    0,   53,   53,
   53,   53,   53,    0,    0,   53,   53,   53,    0,    0,
   53,   53,   53,    0,    0,    0,    0,    0,    0,   53,
   53,    0,   53,   53,    0,   53,   53,   53,   54,    0,
    0,   53,    0,   53,    0,   54,   54,   53,    0,   53,
    0,    0,   53,    0,   53,   53,    0,   53,    0,    0,
   53,   53,   53,    0,   53,   53,   53,   53,    0,    0,
   53,   53,   91,    0,    0,   53,   53,    0,   53,   53,
   53,   53,    0,   53,    0,   53,    0,   53,    0,    0,
   53,    0,   53,   53,   53,   53,   53,    0,    0,   53,
   53,   53,    0,    0,   53,   53,   53,    0,    0,    0,
    0,    0,    0,   53,   53,    0,   53,   53,    0,   53,
   53,   53,   53,    0,    0,   53,    0,   54,    0,   53,
   53,   54,    0,   54,    0,    0,   54,    0,   54,   54,
    0,   54,    0,    0,   54,   53,   54,    0,   54,   54,
   54,   54,    0,    0,   54,   54,   92,    0,    0,   53,
   54,    0,   54,   54,   54,   53,    0,   54,    0,   54,
    0,   54,    0,    0,   54,    0,   54,   54,   54,   54,
   54,    0,    0,   54,   54,   54,    0,    0,   54,   54,
   54,    0,    0,    0,    0,    0,    0,   54,   54,    0,
   54,   54,    0,   54,   54,   54,   53,    0,    0,   54,
    0,   53,    0,   53,   53,   53,    0,   53,    0,    0,
   53,    0,   53,   53,    0,   53,    0,    0,   53,   54,
   53,    0,   53,   53,   53,   53,    0,    0,   53,   53,
    0,    0,    0,   54,   53,    0,   53,   53,   53,   54,
    0,   53,    0,   53,    0,   53,    0,    0,   53,    0,
   53,   53,   53,   53,   53,    0,    0,   53,   53,   53,
    0,    0,   53,   53,   53,    0,    0,    0,    0,    0,
    0,   53,   53,    0,   53,   53,    0,   53,   53,   53,
   54,    0,    0,   53,    0,   53,    0,   54,   54,   53,
    0,   53,    0,    0,   53,    0,   53,   53,    0,   53,
    0,    0,   53,   53,   53,    0,   53,   53,   53,   53,
    0,    0,   53,   53,  256,    0,    0,   53,   53,    0,
   53,   53,   53,    0,    0,   53,    0,   53,    0,   53,
    0,    0,   53,   39,   53,   53,   53,   53,   53,    0,
    0,   53,   53,   53,   39,    0,   53,   53,   53,    0,
   39,    0,    0,    0,   39,   53,   53,   39,   53,   53,
    0,   53,   53,   53,   53,    0,    0,   53,    0,   39,
   39,   53,   53,    0,   39,   39,    0,    0,    0,    0,
   39,    0,   39,   39,   39,   39,    0,   53,    0,    0,
   39,    0,    0,    0,   39,    0,   39,    0,  257,    0,
    0,   53,    0,    0,    0,    0,   39,    0,   39,   39,
    0,   39,    0,    0,    0,   39,   37,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   37,    0,    0,
    0,    0,    0,   37,    0,   39,    0,   37,    0,    0,
   37,    0,    0,    0,    0,    0,   39,   39,   53,    0,
    0,    0,   37,   37,    0,   53,   53,   37,   37,    0,
    0,    0,    0,   37,    0,   37,   37,   37,   37,    0,
    0,    0,    0,   37,    0,    0,    0,   37,    0,   37,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,  364,   37,    0,   37,    0,    0,  365,   37,   57,
   24,    0,   25,   39,   39,   26,  267,    0,    0,    0,
   27,   62,   63,   64,    0,   28,    0,    0,   37,    0,
    0,   66,    0,    0,   30,    0,    0,    0,    0,   37,
   37,   32,    0,    0,  366,    0,   33,    0,   73,   74,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   77,    0,    0,   38,    0,
    0,   79,    0,   81,    0,   83,   39,   40,  268,    0,
   41,    0,    0,    0,    0,    0,    0,    0,    0,  367,
    0,    0,    0,    0,    0,    0,   37,   37,    0,    0,
    0,    0,    0,    0,    0,   92,   93,   94,  269,  368,
    0,    0,   97,   98,   99,    0,    0,    0,    0,    0,
    0,    0,  320,    0,  369,    0,    0,    0,  103,  104,
  105,  106, 1062,    0,    0,  107,    0,  108,    0,    0,
  364,    0,    0,  109,  110,    0,  365,    0,   57,   24,
    0,   25,    0,    0,   26,  267,    0,    0,    0,   27,
   62,   63,   64,    0,   28,    0,    0,    0,  111,  271,
   66,  114,    0,   30,    0,    0,    0,    0,    0,    0,
   32,    0,    0,  366,    0,   33,    0,   73,   74,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   77,    0,    0,   38,    0,    0,
   79,    0,   81,    0,   83,   39,   40,  268,    0,   41,
    0,    0,    0,    0,    0,    0,    0,    0,  367,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   92,   93,   94,  269,  368,    0,
    0,   97,   98,   99,    0,    0,    0,    0,    0,    0,
    0,  320,    0,  369,    0,    0,    0,  103,  104,  105,
  106,    0,    0,    0,  107,    0,  108,    0,    0,  364,
    0,    0,  109,  110,    0,  365,    0,   57,   24,    0,
   25,    0,    0,   26,  267,    0,    0,    0,   27,   62,
   63,   64,    0,   28,    0,    0,    0,  111,  271,   66,
  114,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,  366,    0,   33,    0,   73,   74,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   77,    0,    0,   38,    0,    0,   79,
    0,   81,    0,   83,   39,   40,  268,    0,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   92,   93,   94,  269,  368,    0,    0,
   97,   98,   99,    0,    0,    0,    0,    0,    0,    0,
  320,    0,  369,    0,    0,    0,  103,  104,  105,  106,
    0,    0,    0,  107,    0,  108,    0,    0,  364,    0,
    0,  109,  110,    0,    0,    0,   57,   24,    0,   25,
    0,    0,   26,  267,    0,    0,    0,   27,   62,   63,
   64,    0,   28,    0,    0,    0,  111,  271,   66,  114,
    0,   30,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   73,   74,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   77,    0,    0,   38,    0,    0,   79,    0,
   81,    0,   83,   39,   40,  268,    0,   41,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   92,   93,   94,  269,  368,    0,    0,   97,
   98,   99,    0,    0,    0,    0,    0,    0,    0,  320,
    0,  369,    0,    0,    0,  103,  104,  105,  106,    0,
    0,    0,  107,    0,  108,    0,    0,  382,    0,    0,
  109,  110,    0,    0,    0,   57,   24,    0,   25,    0,
    0,   26,  267,    0,    0,    0,   27,   62,   63,   64,
    0,   28,    0,    0,    0,  111,  271,   66,  114,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   73,   74,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   77,    0,    0,   38,    0,    0,   79,    0,   81,
    0,   83,   39,   40,  268,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   92,   93,   94,  269,  368,    0,    0,   97,   98,
   99,    0,    0,    0,    0,    0,    0,    0,  320,    0,
    0,    0,    0,    0,  103,  104,  105,  106,    0,    0,
    0,  107,    0,  108,    0,    0,  384,    0,    0,  109,
  110,    0,    0,    0,   57,   24,    0,   25,    0,    0,
   26,  267,    0,    0,    0,   27,   62,   63,   64,    0,
   28,    0,    0,    0,  111,  271,   66,  114,    0,   30,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,   73,   74,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   77,    0,    0,   38,    0,    0,   79,    0,   81,    0,
   83,   39,   40,  268,    0,   41,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   92,   93,   94,  269,  368,    0,    0,   97,   98,   99,
    0,    0,    0,    0,    0,    0,    0,  320,    0,    0,
    0,    0,    0,  103,  104,  105,  106,    0,    0,    0,
  107,    0,  108,    0,    0,  386,    0,    0,  109,  110,
    0,    0,    0,   57,   24,    0,   25,    0,    0,   26,
  267,    0,    0,    0,   27,   62,   63,   64,    0,   28,
    0,    0,    0,  111,  271,   66,  114,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   73,   74,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   77,
    0,    0,   38,    0,    0,   79,    0,   81,    0,   83,
   39,   40,  268,    0,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
   93,   94,  269,  368,    0,    0,   97,   98,   99,    0,
    0,    0,    0,    0,    0,    0,  320,    0,    0,    0,
    0,    0,  103,  104,  105,  106,    0,    0,    0,  107,
    0,  108,    0,    0,  388,    0,    0,  109,  110,    0,
    0,    0,   57,   24,    0,   25,    0,    0,   26,  267,
    0,    0,    0,   27,   62,   63,   64,    0,   28,    0,
    0,    0,  111,  271,   66,  114,    0,   30,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   73,   74,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   77,    0,
    0,   38,    0,    0,   79,    0,   81,    0,   83,   39,
   40,  268,    0,   41,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   92,   93,
   94,  269,  368,    0,    0,   97,   98,   99,    0,    0,
    0,    0,    0,    0,    0,  320,    0,    0,    0,    0,
    0,  103,  104,  105,  106,    0,    0,    0,  107,    0,
  108,    0,    0,  390,    0,    0,  109,  110,    0,    0,
    0,   57,   24,    0,   25,    0,    0,   26,  267,    0,
    0,    0,   27,   62,   63,   64,    0,   28,    0,    0,
    0,  111,  271,   66,  114,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   73,   74,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   77,    0,    0,
   38,    0,    0,   79,    0,   81,    0,   83,   39,   40,
  268,    0,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   92,   93,   94,
  269,  368,    0,    0,   97,   98,   99,    0,    0,    0,
    0,    0,    0,    0,  320,    0,    0,    0,    0,    0,
  103,  104,  105,  106,    0,    0,    0,  107,    0,  108,
    0,    0,  392,    0,    0,  109,  110,    0,    0,    0,
   57,   24,    0,   25,    0,    0,   26,  267,    0,    0,
    0,   27,   62,   63,   64,    0,   28,    0,    0,    0,
  111,  271,   66,  114,    0,   30,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   73,
   74,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   77,    0,    0,   38,
    0,    0,   79,    0,   81,    0,   83,   39,   40,  268,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   92,   93,   94,  269,
  368,    0,    0,   97,   98,   99,    0,    0,    0,    0,
    0,    0,    0,  320,    0,    0,    0,    0,    0,  103,
  104,  105,  106,    0,    0,    0,  107,    0,  108,    0,
    0,  394,    0,    0,  109,  110,    0,    0,    0,   57,
   24,    0,   25,    0,    0,   26,  267,    0,    0,    0,
   27,   62,   63,   64,    0,   28,    0,    0,    0,  111,
  271,   66,  114,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   73,   74,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   77,    0,    0,   38,    0,
    0,   79,    0,   81,    0,   83,   39,   40,  268,    0,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   92,   93,   94,  269,  368,
    0,    0,   97,   98,   99,    0,    0,    0,    0,    0,
    0,    0,  320,    0,    0,    0,    0,    0,  103,  104,
  105,  106,    0,    0,    0,  107,    0,  108,    0,    0,
  396,    0,    0,  109,  110,    0,    0,    0,   57,   24,
    0,   25,    0,    0,   26,  267,    0,    0,    0,   27,
   62,   63,   64,    0,   28,    0,    0,    0,  111,  271,
   66,  114,    0,   30,    0,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   73,   74,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   77,    0,    0,   38,    0,    0,
   79,    0,   81,    0,   83,   39,   40,  268,    0,   41,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   92,   93,   94,  269,  368,    0,
    0,   97,   98,   99,    0,    0,    0,    0,    0,    0,
    0,  320,    0,    0,    0,    0,    0,  103,  104,  105,
  106,    0,    0,    0,  107,    0,  108,    0,    0,  714,
    0,    0,  109,  110,    0,    0,    0,   57,   24,    0,
   25,    0,    0,   26,  267,    0,    0,    0,   27,   62,
   63,   64,    0,   28,    0,    0,    0,  111,  271,   66,
  114,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   73,   74,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   77,    0,    0,   38,    0,    0,   79,
    0,   81,    0,   83,   39,   40,  268,    0,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   92,   93,   94,  269,  368,    0,    0,
   97,   98,   99,    0,    0,    0,    0,    0,    0,    0,
  320,    0,    0,    0,    0,    0,  103,  104,  105,  106,
    0,    0,    0,  107,    0,  108,    0,    0,  716,    0,
    0,  109,  110,    0,    0,    0,   57,   24,    0,   25,
    0,    0,   26,  267,    0,    0,    0,   27,   62,   63,
   64,    0,   28,    0,    0,    0,  111,  271,   66,  114,
    0,   30,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   73,   74,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   77,    0,    0,   38,    0,    0,   79,    0,
   81,    0,   83,   39,   40,  268,    0,   41,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   92,   93,   94,  269,  368,    0,    0,   97,
   98,   99,    0,    0,    0,    0,    0,    0,    0,  320,
    0,    0,    0,    0,    0,  103,  104,  105,  106,    0,
    0,    0,  107,    0,  108,    0,    0,  718,    0,    0,
  109,  110,    0,    0,    0,   57,   24,    0,   25,    0,
    0,   26,  267,    0,    0,    0,   27,   62,   63,   64,
    0,   28,    0,    0,    0,  111,  271,   66,  114,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   73,   74,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   77,    0,    0,   38,    0,    0,   79,    0,   81,
    0,   83,   39,   40,  268,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   92,   93,   94,  269,  368,    0,    0,   97,   98,
   99,    0,    0,    0,    0,    0,    0,    0,  320,    0,
    0,    0,    0,    0,  103,  104,  105,  106,    0,    0,
    0,  107,    0,  108,    0,    0,  735,    0,    0,  109,
  110,    0,    0,    0,   57,   24,    0,   25,    0,    0,
   26,  267,    0,    0,    0,   27,   62,   63,   64,    0,
   28,    0,    0,    0,  111,  271,   66,  114,    0,   30,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,   73,   74,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   77,    0,    0,   38,    0,    0,   79,    0,   81,    0,
   83,   39,   40,  268,    0,   41,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   92,   93,   94,  269,  368,    0,    0,   97,   98,   99,
    0,    0,    0,    0,    0,    0,    0,  320,    0,    0,
    0,    0,    0,  103,  104,  105,  106,    0,    0,    0,
  107,    0,  108,    0,    0,  737,    0,    0,  109,  110,
    0,    0,    0,   57,   24,    0,   25,    0,    0,   26,
  267,    0,    0,    0,   27,   62,   63,   64,    0,   28,
    0,    0,    0,  111,  271,   66,  114,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   73,   74,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   77,
    0,    0,   38,    0,    0,   79,    0,   81,    0,   83,
   39,   40,  268,    0,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
   93,   94,  269,  368,    0,    0,   97,   98,   99,    0,
    0,    0,    0,    0,    0,    0,  320,    0,    0,    0,
    0,    0,  103,  104,  105,  106,    0,    0,    0,  107,
    0,  108,    0,    0,  739,    0,    0,  109,  110,    0,
    0,    0,   57,   24,    0,   25,    0,    0,   26,  267,
    0,    0,    0,   27,   62,   63,   64,    0,   28,    0,
    0,    0,  111,  271,   66,  114,    0,   30,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   73,   74,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   77,    0,
    0,   38,    0,    0,   79,    0,   81,    0,   83,   39,
   40,  268,    0,   41,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   92,   93,
   94,  269,  740,    0,    0,   97,   98,   99,    0,    0,
    0,    0,    0,    0,    0,  320,    0,    0,    0,    0,
    0,  103,  104,  105,  106,    0,    0,    0,  107,    0,
  108,    0,    0,  742,    0,    0,  109,  110,    0,    0,
    0,   57,   24,    0,   25,    0,    0,   26,  267,    0,
    0,    0,   27,   62,   63,   64,    0,   28,    0,    0,
    0,  111,  271,   66,  114,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   73,   74,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   77,    0,    0,
   38,    0,    0,   79,    0,   81,    0,   83,   39,   40,
  268,    0,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   92,   93,   94,
  269,  740,    0,    0,   97,   98,   99,    0,    0,    0,
    0,    0,    0,    0,  320,    0,    0,    0,    0,    0,
  103,  104,  105,  106,    0,    0,    0,  107,    0,  108,
    0,    0,  744,    0,    0,  109,  110,    0,    0,    0,
   57,   24,    0,   25,    0,    0,   26,  267,    0,    0,
    0,   27,   62,   63,   64,    0,   28,    0,    0,    0,
  111,  271,   66,  114,    0,   30,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   73,
   74,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   77,    0,    0,   38,
    0,    0,   79,    0,   81,    0,   83,   39,   40,  268,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   92,   93,   94,  269,
  740,    0,    0,   97,   98,   99,    0,    0,    0,    0,
    0,    0,    0,  320,    0,    0,    0,    0,    0,  103,
  104,  105,  106,    0,    0,    0,  107,    0,  108,    0,
    0,  746,    0,    0,  109,  110,    0,    0,    0,   57,
   24,    0,   25,    0,    0,   26,  267,    0,    0,    0,
   27,   62,   63,   64,    0,   28,    0,    0,    0,  111,
  271,   66,  114,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   73,   74,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   77,    0,    0,   38,    0,
    0,   79,    0,   81,    0,   83,   39,   40,  268,    0,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   92,   93,   94,  269,  740,
    0,    0,   97,   98,   99,    0,    0,    0,    0,    0,
    0,    0,  320,    0,    0,    0,    0,    0,  103,  104,
  105,  106,    0,    0,    0,  107,    0,  108,    0,    0,
  748,    0,    0,  109,  110,    0,    0,    0,   57,   24,
    0,   25,    0,    0,   26,  267,    0,    0,    0,   27,
   62,   63,   64,    0,   28,    0,    0,    0,  111,  271,
   66,  114,    0,   30,    0,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   73,   74,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   77,    0,    0,   38,    0,    0,
   79,    0,   81,    0,   83,   39,   40,  268,    0,   41,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   92,   93,   94,  269,  740,    0,
    0,   97,   98,   99,    0,    0,    0,    0,    0,    0,
    0,  320,    0,    0,    0,    0,    0,  103,  104,  105,
  106,    0,    0,    0,  107,    0,  108,    0,    0,  750,
    0,    0,  109,  110,    0,    0,    0,   57,   24,    0,
   25,    0,    0,   26,  267,    0,    0,    0,   27,   62,
   63,   64,    0,   28,    0,    0,    0,  111,  271,   66,
  114,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   73,   74,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   77,    0,    0,   38,    0,    0,   79,
    0,   81,    0,   83,   39,   40,  268,    0,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   92,   93,   94,  269,  740,    0,    0,
   97,   98,   99,    0,    0,    0,    0,    0,    0,    0,
  320,    0,    0,    0,    0,    0,  103,  104,  105,  106,
    0,    0,    0,  107,    0,  108,    0,    0,  752,    0,
    0,  109,  110,    0,    0,    0,   57,   24,    0,   25,
    0,    0,   26,  267,    0,    0,    0,   27,   62,   63,
   64,    0,   28,    0,    0,    0,  111,  271,   66,  114,
    0,   30,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   73,   74,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   77,    0,    0,   38,    0,    0,   79,    0,
   81,    0,   83,   39,   40,  268,    0,   41,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   92,   93,   94,  269,  740,    0,    0,   97,
   98,   99,    0,    0,    0,    0,    0,    0,    0,  320,
    0,    0,    0,    0,    0,  103,  104,  105,  106,    0,
    0,    0,  107,    0,  108,    0,    0,  754,    0,    0,
  109,  110,    0,    0,    0,   57,   24,    0,   25,    0,
    0,   26,  267,    0,    0,    0,   27,   62,   63,   64,
    0,   28,    0,    0,    0,  111,  271,   66,  114,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   73,   74,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   77,    0,    0,   38,    0,    0,   79,    0,   81,
    0,   83,   39,   40,  268,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   92,   93,   94,  269,  740,    0,    0,   97,   98,
   99,    0,    0,    0,    0,    0,    0,    0,  320,    0,
    0,    0,    0,    0,  103,  104,  105,  106,    0,    0,
    0,  107,    0,  108,    0,    0,  756,    0,    0,  109,
  110,    0,    0,    0,   57,   24,    0,   25,    0,    0,
   26,  267,    0,    0,    0,   27,   62,   63,   64,    0,
   28,    0,    0,    0,  111,  271,   66,  114,    0,   30,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,   73,   74,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   77,    0,    0,   38,    0,    0,   79,    0,   81,    0,
   83,   39,   40,  268,    0,   41,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   92,   93,   94,  269,  740,    0,    0,   97,   98,   99,
    0,    0,    0,    0,    0,    0,    0,  320,    0,    0,
    0,    0,    0,  103,  104,  105,  106,    0,    0,    0,
  107,    0,  108,    0,    0,  758,    0,    0,  109,  110,
    0,    0,    0,   57,   24,    0,   25,    0,    0,   26,
  267,    0,    0,    0,   27,   62,   63,   64,    0,   28,
    0,    0,    0,  111,  271,   66,  114,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   73,   74,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   77,
    0,    0,   38,    0,    0,   79,    0,   81,    0,   83,
   39,   40,  268,    0,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
   93,   94,  269,  740,    0,    0,   97,   98,   99,    0,
    0,    0,    0,    0,    0,    0,  320,    0,    0,    0,
    0,    0,  103,  104,  105,  106,    0,    0,    0,  107,
    0,  108,    0,    0,  760,    0,    0,  109,  110,    0,
    0,    0,   57,   24,    0,   25,    0,    0,   26,  267,
    0,    0,    0,   27,   62,   63,   64,    0,   28,    0,
    0,    0,  111,  271,   66,  114,    0,   30,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   73,   74,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   77,    0,
    0,   38,    0,    0,   79,    0,   81,    0,   83,   39,
   40,  268,    0,   41,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   92,   93,
   94,  269,  740,    0,    0,   97,   98,   99,    0,    0,
    0,    0,    0,    0,    0,  320,    0,    0,    0,    0,
    0,  103,  104,  105,  106,    0,    0,    0,  107,    0,
  108,    0,    0,  762,    0,    0,  109,  110,    0,    0,
    0,   57,   24,    0,   25,    0,    0,   26,  267,    0,
    0,    0,   27,   62,   63,   64,    0,   28,    0,    0,
    0,  111,  271,   66,  114,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   73,   74,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   77,    0,    0,
   38,    0,    0,   79,    0,   81,    0,   83,   39,   40,
  268,    0,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   92,   93,   94,
  269,  740,    0,    0,   97,   98,   99,    0,    0,    0,
    0,    0,    0,    0,  320,    0,    0,    0,    0,    0,
  103,  104,  105,  106,    0,    0,    0,  107,    0,  108,
    0,    0,  764,    0,    0,  109,  110,    0,    0,    0,
   57,   24,    0,   25,    0,    0,   26,  267,    0,    0,
    0,   27,   62,   63,   64,    0,   28,    0,    0,    0,
  111,  271,   66,  114,    0,   30,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   73,
   74,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   77,    0,    0,   38,
    0,    0,   79,    0,   81,    0,   83,   39,   40,  268,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   92,   93,   94,  269,
  740,    0,    0,   97,   98,   99,    0,    0,    0,    0,
    0,    0,    0,  320,    0,    0,    0,    0,    0,  103,
  104,  105,  106,    0,    0,    0,  107,    0,  108,    0,
    0,  948,    0,    0,  109,  110,    0,    0,    0,   57,
   24,    0,   25,    0,    0,   26,  267,    0,    0,    0,
   27,   62,   63,   64,    0,   28,    0,    0,    0,  111,
  271,   66,  114,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   73,   74,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   77,    0,    0,   38,    0,
    0,   79,    0,   81,    0,   83,   39,   40,  268,    0,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   92,   93,   94,  269,  368,
    0,    0,   97,   98,   99,    0,    0,    0,    0,    0,
    0,    0,  320,    0,    0,    0,    0,    0,  103,  104,
  105,  106,    0,    0,    0,  107,    0,  108,    0,    0,
  722,    0,    0,  109,  110,    0,    0,    0,   57,   24,
    0,   25,    0,    0,   26,  267,    0,    0,    0,   27,
   62,   63,   64,    0,   28,    0,    0,    0,  111,  271,
   66,  114,    0,   30,    0,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   73,   74,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   77,    0,    0,   38,    0,    0,
   79,    0,   81,    0,   83,   39,   40,  268,    0,   41,
    0,    0,   87,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   92,   93,   94,  269,  270,    0,
    0,   97,   98,    0,    0,    0,    0,    0,    0,    0,
    0,  101,    0,  798,    0,  798,    0,  798,  723,  724,
  798,    0,  798,  798,    0,  798,  725,    0,  798,    0,
  798,    0,  798,  798,  798,    0,    0,    0,  798,  798,
    0,    0,    0,    0,  798,    0,  798,  798,    0,    0,
    0,  798,    0,    0,    0,  798,    0,  111,  271,    0,
  726,    0,    0,    0,  798,    0,  798,  798,    0,  798,
    0,    0,    0,  798,  798,    0,    0,    0,    0,    0,
    0,  798,  798,  554,    0,  798,    0,    0,  798,    0,
    0,   57,   24,  798,   25,    0,    0,   26,  267,    0,
    0,    0,   27,   62,   63,   64,    0,   28,    0,    0,
    0,    0,    0,   66,    0,    0,   30,    0,    0,    0,
  798,  798,    0,   32,    0,    0,    0,  798,   33,    0,
   73,   74,   34,  798,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   77,    0,    0,
   38,    0, 1083,   79,    0,   81,    0,   83,   39,   40,
  268,   24,   41,   25,    0,    0,   26,    0,    0,    0,
    0,   27,    0,    0,  798,    0,   28,    0,    0,    0,
    0,  798,  798,    0,    0,   30,    0,   92,   93,   94,
  269,  555,   32,    0,   97,   98,    0,   33,    0,    0,
    0,   34,    0,    0,  320,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,    0,    0,    0,   38,
    0, 1268,    0,    0,    0,    0,    0,   39,   40,    0,
   24,   41,   25,    0,   87,   26,    0,    0,    0,    0,
   27,    0,    0,    0,    0,   28,    0,    0,    0,    0,
  111,  556,    0,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,    0,    0,
   34,    0,    0,  343,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,    0,    0,    0,   38,    0,
    0,    0,    0,    0,    0,    0,   39,   40,    0,  797,
   41,  797,    0,   87,  797,    0,  797,  797,    0,  797,
    0,    0,  797,    0,  797,    0,  797,  797,  797,    0,
  406,    0,  797,  797,    0,    0,    0,    0,  797,    0,
  797,  797,    0,    0,    0,  797,    0,    0,    0,  797,
    0,    0,  343,    0,    0,    0,    0,    0,  797,    0,
    0,  797,    0,  797,    0,    0,    0,  797,  797,    0,
    0,    0,    0,    0,    0,  797,  797,    0,    0,  797,
    0,    0,  797,  797,    0,  797,    0,  797,  797,    0,
  797,  797,    0,  797,    0,    0,  797,    0,  797,  406,
  797,  797,  797,    0,    0,    0,  797,  797,    0,    0,
    0,    0,  797,    0,  797,  797,    0,    0,    0,  797,
    0,  797,    0,  797,    0,    0,    0,  797,    0,    0,
    0,    0,  797,    0,    0,  797,    0,  797,    0,    0,
    0,  797,  797,    0,    0,    0,    0,    0,    0,  797,
  797,    0,    0,  797,    0,    0,  797,    0,    0,    0,
    0,  797,    0,    0,    0,    0,   57,   24,  797,   25,
    0,    0,   26,  267,    0,  797,  797,   27,   62,   63,
   64,    0,   28,    0,    0,    0,    0,  205,   66,  205,
    0,   30,  205,    0,    0,  797,    0,  205,   32,    0,
    0,    0,  205,   33,    0,   73,   74,   34,    0,  691,
    0,  205,    0,    0,    0,    0,  692,    0,  205,   36,
    0,   37,   77,  205,    0,   38,    0,  205,   79,    0,
   81,    0,   83,   39,   40,  268,    0,   41,    0,  205,
    0,  205,  797,    0,  693,  205,    0,   90,   91,  797,
  797,    0,    0,  205,  205,    0,    0,  205,    0,    0,
  205,    0,   92,   93,   94,   95,   96,    0,    0,   97,
   98,   99,    0,    0,    0,    0,    0,    0,    0,  320,
 1117,    0,  694,    0,    0,  103,  104,  105,  106,    0,
    0,    0,  107,    0,  108,    0,    0,    0, 1150,  205,
  109,  110,    0,    0,    0,    0,    0,    0,   57,   24,
    0,   25,    0,    0,   26,  267,    0,    0,    0,   27,
   62,   63,   64,    0,   28,  111,  112,  113,  114,   24,
   66,   25,  115,   30,   26,    0,    0,    0,    0,   27,
   32,    0,    0,    0,   28,   33,  205,   73,   74,   34,
    0,  691,    0,   30,    0,    0,    0,    0,  692,    0,
   32,   36,    0,   37,   77,   33,    0,   38,    0,   34,
   79,    0,   81,    0,   83,   39,   40,  268,    0,   41,
    0,   36,    0,   37,    0,    0,  693,   38,    0,   90,
   91,    0,    0,    0,    0,   39,   40,    0,    0,   41,
    0,    0,   87,    0,   92,   93,   94,   95,   96,    0,
    0,   97,   98,   99,    0,    0,    0,    0,    0,    0,
    0,  320,    0,    0,  694,    0,    0,  103,  104,  105,
  106,    0,    0,    0,  107,    0,  108,    0,    0,    0,
    0,  343,  109,  110,    0,    0,    0,    0,    0,    0,
   57,   24,    0,   25,    0,    0,   26,  267,    0,    0,
    0,   27,   62,   63,   64,    0,   28,  111,  112,  113,
  114,    0,   66,    0,  115,   30,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,  406,   73,
   74,   34,    0,    0,    0,    0,    0,    0,    0,    0,
  318,    0,    0,   36,    0,   37,   77,  767,    0,   38,
    0,    0,   79,    0,   81,    0,   83,   39,   40,  268,
    0,   41,    0,    0,    0,    0,    0,    0,   89,    0,
    0,   90,   91,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   92,   93,   94,   95,
  319,    0,    0,   97,   98,   99,    0,    0,    0,    0,
    0,    0,    0,  320,    0,    0,    0,    0,    0,  103,
  104,  105,  106,    0,    0,    0,  107,    0,  108,    0,
    0,    0,    0,    0,  109,  110,    0,    0,    0,    0,
    0,    0,   57,   24,    0,   25,    0,    0,   26,  267,
    0,    0,    0,   27,   62,   63,   64,    0,   28,  111,
  321,  113,  114,   24,   66,   25,  115,   30,   26,    0,
    0,    0,    0,   27,   32,    0,    0,    0,   28,   33,
    0,   73,   74,   34,    0,    0,    0,   30,    0,    0,
    0,    0,    0,    0,   32,   36,    0,   37,   77,   33,
    0,   38,    0,   34,   79,    0,   81,    0,   83,   39,
   40,  268,    0,   41,    0,   36,   87,   37,    0,    0,
   89,   38,    0,   90,   91,    0,    0,    0,    0,   39,
   40,    0,    0,   41,    0,    0,  606,    0,   92,   93,
   94,   95,  319,    0,    0,   97,   98,   99,    0,    0,
    0,    0,    0,    0,    0,  101,    0,    0,    0,    0,
    0,  103,  104,  105,  106,    0,    0,    0,  107,    0,
  108,    0,    0,    0,    0,  343,  109,  110,    0,    0,
    0,    0,    0,    0,   57,   24,    0,   25,    0,    0,
   26,  267,    0,    0,    0,   27,   62,   63,   64,    0,
   28,  111,  376,  113,  114,  570,   66,  570,  115,   30,
  570,    0,    0,    0,    0,  570,   32,    0,    0,    0,
  570,   33,  406,   73,   74,   34,    0,    0,    0,  570,
    0,    0,    0,    0,    0,    0,  570,   36,    0,   37,
   77,  570,    0,   38,    0,  570,   79,    0,   81,    0,
   83,   39,   40,  268,    0,   41,    0,  570,   87,  570,
    0,    0,   89,  570,    0,   90,   91,    0,    0,    0,
    0,  570,  570,    0,    0,  570,    0,    0,  570,    0,
   92,   93,   94,   95,  319,    0,    0,   97,   98,   99,
    0,    0,    0,    0,    0,    0,    0,  101,    0,    0,
    0,    0,    0,  103,  104,  105,  106,    0,    0,    0,
  107,    0,  108,    0,    0,    0,    0,  570,  109,  110,
    0,    0,    0,    0,    0,    0,   57,   24,    0,   25,
    0,    0,   26,  267,    0,    0,    0,   27,   62,   63,
   64,    0,   28,  111,  321,  113,  114,  206,   66,  206,
  115,   30,  206,    0,    0,    0,    0,  206,   32,    0,
    0,    0,  206,   33,  570,   73,   74,   34,    0,    0,
    0,  206,    0,    0,    0,    0,  318,    0,  206,   36,
    0,   37,   77,  206,    0,   38,    0,  206,   79,    0,
   81,    0,   83,   39,   40,  268,    0,   41,    0,  206,
    0,  206,    0,    0,   89,  206,    0,   90,   91,    0,
    0,    0,    0,  206,  206,    0,    0,  206,    0,    0,
  206,    0,   92,   93,   94,   95,  319,    0,    0,   97,
   98,   99,    0,    0,    0,    0,    0,    0,    0,  320,
    0,    0,    0,    0,    0,  103,  104,  105,  106,    0,
    0,    0,  107,    0,  108,    0,    0,    0,    0,  206,
  109,  110,    0,    0,    0,    0,    0,    0,   57,   24,
    0,   25,    0,    0,   26,  267,    0,    0,    0,   27,
   62,   63,   64,    0,   28,  111,  321,  113,  114,  205,
   66,  205,  115,   30,  205,    0,    0,    0,    0,  205,
   32,    0,    0,    0,  205,   33,  206,   73,   74,   34,
    0,    0,    0,  205,    0,    0,    0,    0,    0,    0,
  205,   36,    0,   37,   77,  205,    0,   38,    0,  205,
   79,    0,   81,    0,   83,   39,   40,  268,    0,   41,
    0,  205,    0,  205,    0,    0,   89,  205,    0,   90,
   91,    0,    0,    0,    0,  205,  205,    0,    0,  205,
    0,    0,  205,    0,   92,   93,   94,   95,  319,    0,
    0,   97,   98,   99,    0,    0,    0,  575,    0,    0,
    0,  320,    0,    0,    0,    0,    0,  103,  104,  105,
  106,    0,    0,    0,  107,    0,  108,    0,    0,    0,
    0,  205,  109,  110,    0,    0,    0,    0,    0,    0,
   57,   24,    0,   25,    0,    0,   26,  267,    0,    0,
    0,   27,   62,   63,   64,    0,   28,  111,  321,  113,
  114,  162,   66,  162,  115,   30,  162,    0,    0,    0,
    0,  162,   32,    0,    0,    0,  162,   33,  205,   73,
   74,   34,    0,    0,    0,  162,    0,    0,    0,    0,
    0,    0,  162,   36,    0,   37,   77,  162,    0,   38,
    0,  162,   79,    0,   81,    0,   83,   39,   40,  268,
    0,   41,    0,  162,    0,  162,    0,    0,   89,  162,
    0,   90,   91,    0,    0,    0,    0,  162,  162,    0,
    0,  162,    0,    0,  162,    0,   92,   93,   94,   95,
  319,    0,    0,   97,   98,   99,    0,    0,    0,  569,
    0,    0,    0,  320,    0,    0,    0,    0,    0,  103,
  104,  105,  106,    0,    0,    0,  107,    0,  108,    0,
    0,    0,    0,  162,  109,  110,    0,    0,    0,    0,
    0,    0,  750,  750,    0,  750,    0,    0,  750,  750,
    0,    0,    0,  750,  750,  750,  750,    0,  750,  111,
  321,  113,  114,  216,  750,  216,  115,  750,  216,    0,
    0,    0,    0,  216,  750,    0,    0,    0,  216,  750,
  162,  750,  750,  750,    0,    0,    0,  216,    0,    0,
    0,    0,  750,    0,  216,  750,    0,  750,  750,  216,
    0,  750,    0,  216,  750,    0,  750,    0,  750,  750,
  750,  750,    0,  750,    0,  216,    0,  216,    0,    0,
  750,  216,    0,  750,  750,    0,    0,    0,    0,  216,
  216,    0,    0,  216,    0,    0,  216,    0,  750,  750,
  750,  750,  750,    0,    0,  750,  750,  750,    0,    0,
    0,    0,    0,    0,    0,  750,    0,    0,    0,    0,
    0,  750,  750,  750,  750,    0,    0,    0,  750,    0,
  750,    0,    0,    0,    0,  216,  750,  750,    0,    0,
    0,    0,    0,    0,   57,   24,    0,   25,    0,    0,
   26,  267,    0,    0,    0,   27,   62,   63,   64,    0,
   28,  750,  750,  750,  750,    0,   66,    0,  750,   30,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,  216,   73,   74,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   77,    0,    0,   38,    0,    0,   79,    0,   81,    0,
   83,   39,   40,  268,    0,   41,    0,    0,    0,    0,
    0,    0,   89,    0,    0,   90,   91,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   92,   93,   94,   95,  319,    0,    0,   97,   98,   99,
    0,    0,    0,    0,    0,    0,    0,  320,    0,    0,
    0,    0,    0,  103,  104,  105,  106,    0,    0,    0,
  107,    0,  108,    0,    0,    0,    0,    0,  109,  110,
    0,    0,    0,    0,    0,    0,   57,   24,    0,   25,
    0,    0,   26,  267,    0,    0,    0,   27,   62,   63,
   64,    0,   28,  111,  321,  113,  114,    0,   66,    0,
  115,   30,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   73,   74,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   77,    0,    0,   38,    0,    0,   79,    0,
   81,    0,   83,   39,   40,  268,    0,   41,    0,    0,
    0,    0,    0,    0,   89,    0,    0,   90,   91,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   92,   93,   94,   95,   96,    0,    0,   97,
   98,   99,    0,    0,    0,    0,    0,    0,    0,  320,
    0,    0,    0,    0,    0,  103,  104,  105,  106,    0,
    0,    0,  107,    0,  108,    0,    0,    0,    0,    0,
  109,  110,    0,    0,    0,    0,    0,    0,   57,   24,
    0,   25,    0,    0,   26,  267,    0,    0,    0,   27,
   62,   63,   64,    0,   28,  111,  112,  113,  114,    0,
   66,    0,  115,   30,    0,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   73,   74,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   77,    0,    0,   38,    0,    0,
   79,    0,   81,    0,   83,   39,   40,  268,    0,   41,
    0,    0,    0,    0,    0,    0,   89,    0,    0,   90,
   91,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   92,   93,   94,   95,  319,    0,
    0,   97,   98,   99,    0,    0,    0,    0,    0,    0,
    0,  320,    0,    0,    0,    0,    0,  103,  104,  105,
  106,    0,    0,    0,  107,    0,  108,    0,    0,    0,
    0,    0,  109,  110,    0,    0,    0,    0,    0,    0,
  153,  153,    0,  153,    0,    0,  153,  153,    0,    0,
    0,  153,  153,  153,  153,    0,  153,  111,  376,  113,
  114,    0,  153,    0,  115,  153,    0,    0,    0,    0,
    0,    0,  153,    0,    0,    0,    0,  153,    0,  153,
  153,  153,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  153,    0,  153,  153,    0,    0,  153,
    0,    0,  153,    0,  153,    0,  153,  153,  153,  153,
    0,  153,    0,    0,    0,    0,    0,    0,  153,    0,
    0,  153,  153,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  153,  153,  153,  153,
  153,    0,    0,  153,  153,  153,  381,    0,    0,    0,
    0,    0,    0,  153,    0,    0,    0,    0,    0,  153,
  153,  153,  153,    0,    0,    0,  153,    0,  153,    0,
  381,    0,    0,    0,  153,  153,    0,    0,    0,    0,
    0,    0,    0,  381,    0,    0,    0,    0,  381,    0,
    0,  381,    0,  381,    0,  381,  381,  381,  381,  153,
  153,  153,  153,  381,    0,    0,  153,  381,    0,    0,
    0,  381,    0,    0,   57,   24,    0,   25,    0,  381,
   26,  267,  381,    0,  381,   27,   62,   63,   64,    0,
   28,    0,   24,    0,   25,    0,   66,   26,    0,   30,
    0,    0,   27,  381,    0,    0,   32,   28,  381,    0,
    0,   33,    0,   73,   74,   34,   30,    0,    0,  381,
  381,    0,  306,   32,  381,    0,    0,   36,   33,   37,
   77,    0,   34,   38,    0,    0,   79,  381,   81,    0,
   83,   39,   40,  268,   36,   41,   37,    0,    0,    0,
   38,    0,   89,    0,    0,   90,   91,    0,   39,   40,
    0,    0,   41,    0,    0,   87,    0,    0,    0,  381,
   92,   93,   94,   95,  319,    0,    0,   97,   98,   99,
    0,    0,    0,    0,    0,    0,    0,  320,    0,    0,
    0,  305,    0,  103,  104,  105,  106,    0,    0,    0,
  107,    0,  108,    0,  343,    0,    0,    0,  109,  110,
    0,    0,    0,    0,    0,   57,   24,    0,   25,    0,
    0,   26,  267,    0,    0,    0,   27,   62,   63,   64,
    0,   28,    0,  111,  321,  113,  114,   66,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,  344,   33,    0,   73,   74,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   77,    0,    0,   38,    0,    0,   79,    0,   81,
    0,   83,   39,   40,  268,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   92,   93,   94,  269,  368,    0,    0,   97,   98,
   99,    0,    0,    0,    0,    0,    0,    0,  320,    0,
    0,    0,    0,    0,  103,  104,  105,  106,    0,    0,
    0,  107,    0,  108,    0,    0,    0,    0,    0,  109,
  110,   57,   24,    0,   25,    0,    0,   26,  267,    0,
    0,    0,   27,   62,   63,   64,    0,   28,    0,    0,
    0,    0,    0,   66,  111,  271,   30,  114,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   73,   74,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   77,    0,    0,
   38,    0,    0,   79,    0,   81,    0,   83,   39,   40,
  268,    0,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   92,   93,   94,
  269,  740,    0,    0,   97,   98,   99,    0,    0,    0,
    0,    0,    0,    0,  320,    0,    0,    0,    0,    0,
  103,  104,  105,  106,    0,    0,    0,  107,    0,  108,
    0,    0,    0,    0,    0,  109,  110,   57,   24,    0,
   25,    0,    0,   26,  267,    0,    0,    0,   27,   62,
   63,   64,    0,   28,    0,    0,    0,    0,    0,   66,
  111,  271,   30,  114,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   73,   74,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   77,    0,    0,   38,    0,    0,   79,
    0,   81,    0,   83,   39,   40,  268,    0,   41,    0,
    0,   87,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   92,   93,   94,  269,  270,    0,    0,
   97,   98,    0,    0,    0,    0,    0,    0,    0,    0,
  101,    0,    0,    0,    0,    0,    0,  723,  724,    0,
    0,   57,   24,    0,   25,  725,    0,   26,  267,    0,
    0,    0,   27,   62,   63,   64,    0,   28,    0,    0,
    0,    0,    0,   66,    0,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,  111,  271,   33,  726,
   73,   74,   34,    0,    0,    0,    0,    0,    0,    0,
  315,    0,    0,    0,   36,    0,   37,   77,    0,    0,
   38,    0,    0,   79,    0,   81,    0,   83,   39,   40,
  268,    0,   41,    0,    0,   87,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   92,   93,   94,
  269,  270,    0,    0,   97,   98,    0,    0,    0,   57,
   24,    0,   25,    0,  101,   26,  267,    0,    0,    0,
   27,   62,   63,   64,    0,   28,    0,    0,    0,    0,
    0,   66,    0,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   73,   74,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  111,  271,   36,    0,   37,   77,    0,    0,   38,    0,
    0,   79,    0,   81,    0,   83,   39,   40,  268,    0,
   41,    0,    0,   87,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   92,   93,   94,  269,  270,
    0,    0,   97,   98,    0,    0,    0,   57,   24,    0,
   25,    0,  101,   26,  267,    0,    0,    0,   27,   62,
   63,   64,    0,   28,    0,  205,    0,  205,    0,   66,
  205,    0,   30,    0,    0,  205,    0,    0,    0,   32,
  205,    0,    0,    0,   33,    0,   73,   74,   34,  205,
    0,    0,    0,    0,    0,    0,  205,    0,  111,  271,
   36,  205,   37,   77,    0,  205,   38,    0,    0,   79,
    0,   81,    0,   83,   39,   40,  268,  205,   41,  205,
    0,   87,    0,  205,    0,    0,    0,    0,    0,    0,
    0,  205,  205,    0,    0,  205,    0,    0,  205,    0,
    0,    0,    0,   92,   93,   94,  269,  555,    0,    0,
   97,   98,    0,    0,    0,    0,   24,    0,   25,    0,
  101,   26,    0,    0, 1550,    0,   27,    0,    0,  818,
    0,   28,    0,  819, 1551, 1552,    0,  205, 1150, 1553,
   30,    0,    0,    0,    0, 1554,    0,   32,    0,    0,
    0,    0,   33,    0,    0,    0,   34,    0,    0,    0,
    0,    0,    0,    0,    0, 1026,  111,  556,   36,    0,
   37,    0,    0,    0,   38,    0,    0,    0,    0,    0,
    0,    0,   39,   40,  205,    0,   41,    0,    0, 1555,
   24,    0,   25,    0, 1556,   26,    0,    0, 1550,    0,
   27,    0,    0,  818,    0,   28,    0,  819, 1551, 1552,
    0,    0,    0, 1553,   30,    0,    0,    0,    0, 1554,
    0,   32,   53,    0,   53,    0,   33,   53,  343,    0,
   34,    0,   53,    0, 1557,    0,    0,   53,    0, 1026,
    0,    0,   36,    0,   37,    0,   53,    0,   38,    0,
    0,    0,   53,   53,    0,    0,   39,   40,   53,    0,
   41,    0,   53, 1555,   53,    0,   53,    0, 1556,    0,
    0,   53,    0,    0,   53, 1558,   53,    0,    0,    0,
   53,    0,    0,   53,    0,    0,    0,    0,   53,   53,
    0,    0,   53,    0,    0,   53,   53,    0,   53,    0,
    0,   53,  343,    0,    0,    0,   53,    0,    0,    0,
    0,   53,    0,    0,    0,    0,    0,    0,    0,    0,
   53,    0,    0,    0,    0,    0,   53,   53,    0,    0,
    0,    0,   53,    0,   53,  185,   53,    0,   53,    0,
   53,    0,    0,    0,    0,   53,    0,    0,   53, 1558,
   53,    0,    0,    0,   53,    0,    0,   53,    0,    0,
    0,    0,   53,   53,    0,    0,   53,    0,    0,   53,
   24,    0,   25,    0,    0,   26,    0,    0,    0,    0,
   27,   53,    0,    0,    0,   28,    0,    0,    0,    0,
    0,    0,    0,    0,   30,    0,    0,    0,    0,    0,
  655,   32,    0,    0,    0,    0,   33,  185,   53,    0,
   34,    0,  656,    0,    0,    0,    0,    0,    0,  657,
    0,    0,   36,    0,   37,    0,    0,    0,   38,    0,
    0,  658,    0,    0,    0,    0,   39,   40,    0,    0,
   41,    0,    0,  606,   54,    0,   54,    0,    0,   54,
    0,    0,    0,    0,   54,   53,    0,    0,    0,   54,
    0,    0,    0,    0,    0,    0,    0,    0,   54,  659,
    0,    0,    0,    0,   54,   54,    0,    0,    0,    0,
   54,    0,  343,    0,   54,    0,   54,    0,   54,    0,
    0,    0,    0,   54,    0,    0,   54,    0,   54,    0,
    0,    0,   54,    0,    0,   54,    0,    0,    0,    0,
   54,   54,    0,   53,   54,   53,    0,   54,   53,    0,
    0,    0,    0,   53,    0,    0,    0,    0,   53,  660,
    0,    0,    0,    0,    0,    0,    0,   53,    0,    0,
    0,    0,    0,   53,   53,    0,    0,    0,    0,   53,
    0,    0,    0,   53,    0,   53,   54,   53,    0,    0,
    0,    0,   53,    0,    0,   53,    0,   53,    0,    0,
    0,   53,    0,    0,   53,    0,    0,    0,    0,   53,
   53,    0,   24,   53,   25,    0,   53,   26,    0, 1482,
    0,    0,   27,    0,    0,    0,    0,   28,    0,    0,
    0,    0,    0,   54,    0,    0,   30,    0,    0,   53,
    0,   53,    0,   32,    0,    0,    0,    0,   33,    0,
 1483,    0,   34,    0,    0,   53,    0,    0,    0,    0,
    0,    0,    0,   53,   36,    0,   37,    0,    0,    0,
   38, 1484,    0,    0,    0,    0,   53,    0,   39,   40,
    0,   53,   41,    0,    0,   87,   53,    0,   53,   53,
   53,   53,    0,    0,    0,    0,   53,  506,    0,    0,
   53,    0,   53,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   53,    0,    0,   53,    0,   53,    0,    0,
    0,  507,    0,    0,  343,    0,    0,  506,    0,    0,
    0,    0,    0,    0,  508,    0,    0,    0,  509,  510,
    0,   53,    0,    0,  511,    0,  512,  513,  514,  515,
    0,  507,  339,    0,  516,    0,    0,    0,  517,    0,
    0,    0,    0,    0,  508,    0,    0,    0,    0,  510,
  518,  406,    0,  519,  511,  520,  512,  513,  514,  515,
    0,    0,    0,    0,  516,    0,    0,    0,  517,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  521,
  518,    0,    0,  519,    0,  520,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  521,
  };
  protected static readonly short [] yyCheck = {            17,
  313,   17,   17,   52,   18,    4,   17,   52,   76,  314,
  303,  247,  203,  575,  260,  245,  523,  342,  202,   63,
  545,  767,  312,   67,   68,   69,  375,   71,   72,  573,
  445,    6,   70,   77,   78,  206,  445,  445,  358,   83,
   84,  125,   86,  312,   88,  343,  637,  171,   59,   93,
   94,  405,   90,   91,  310,  886, 1340,   95,   76,  773,
  426,  888,   80,  415,  778,  779, 1080,   60,  651,  256,
  425,   82, 1084,   84,   60,  854,  123,  856,  125,   97,
  124,  119,   75,  101,  353,  676,    0, 1065, 1385,   75,
   45, 1388,  256,   48,  256,  256,  415,  115,  256,  256,
   17,  333,  256,  187,  256,  268,  256,  256,  256, 1490,
  268,  343,  256,  151,  256,  101,  256,  256,  256,  256,
 1128,  256,  256,  902,  256,  256,  905,  256, 1509,  115,
   17,  256,  382, 1595,  283,  364,  256,  379,  366,  256,
  397,  263,  278,  336, 1441,  256,  282,  344,  256,  377,
   17,  340,  268,  171,  203,  171,  171,  256,  203,  269,
  171,  374,  256,  420,  374,  378,  315,   17,  378,  382,
  427,  256,  382,  405,  376,  377,  373,  287,  380,  425,
  437,   17,   17,   17,  373,  382,   17,  429,  438,  376,
   17,  378,   17,  380,  316,  424,  245,  466,  426,   17,
  245,    0,  364,  340, 1666,  322, 1220,  343,  345,  528,
  347,  374,  366,  350,  351,   17,  353,  354,  352,  380,
  377,  259,  260,  373,  268,  375,   60,  377,  272,  364,
  382,   65,  256,  397,  373,  273,  380,  377,  377,  387,
  378,   75,  260,  380, 1622,  438,  256,  256,  266,  569,
  256,  438, 1079,  373,  171,  491,  420,  377,  387,  572,
  490,  345,  424,  427,  616,  428,  241,  101,  312,  426,
  428,  625,  310, 1287,  359,  424,  426, 1285,  316,  429,
  235,  115,  424,  382,  171,  303,  426,  426,  637,  424,
  308,  309,  424,  424,  341,  857,  278,  616,  345,  424,
  318,  438,  320, 1315,  171, 1686,  426,  300,  355,  347,
  328,  630,  428,  424,  300, 1293,  424,  310,  336,  357,
  338,  171,  315, 1037,  342, 1039,  337,  676,  683,  315,
  424,  369,  503, 1714,  686,  171,  171,  171,  256,  922,
  171,  359,  360,  257,  171, 1726,  171, 1728,  433,  434,
  435,  436,  338,  171, 1333,  268,  256,  381, 1337,  375,
  375, 1075,  681,  276,  662,  256,  295,  686,  687,  171,
  256,  409, 1199,  382, 1752,  381, 1122,  387,  307,  417,
  256,  256,  364,  421,  374,  256, 1465,  425,  426,  257,
  326,    0, 1380,  625,  462,  413, 1680,  256, 1776, 1777,
   21,  256,  256,  359,  326, 1783, 1784,  425,  426,  256,
  256,  256,  430,  431,  432,  433,  434,  435,  436,  437,
  438,  439,  440,  256, 1203, 1256, 1140,  256, 1142,  336,
  662, 1145,   53,  256,  472,  473, 1472,  683,  476,  793,
  257,  490,  424,  425,  462,  490,  256,  306,  438,  498,
 1747,  364,  445,  498,  262,  380,  256, 1445,  257,  445,
  256,  256,  767,  381,  340,  256,  300,  272,  256,  345,
  341,  347,  256,  272,  350,  351,  376,  353,  354,  278,
  380,  315, 1779,  282, 1520,  256, 1565,  373,  424,  364,
  381,  299,  297, 1572,  792,  424,  540,  422,  297,  272,
  866,  376,  424,  378,  338,  380,  544,  340,  546,  295,
 1289,  424,  345,  256,  347, 1077,  841,  350,  351,  324,
  353,  354, 1601,  378,  297,  324,  380,  538,  424,  375,
 1055,  378, 1246,  378, 1248,  573, 1250, 1716, 1717,  494,
  495,  375,  580, 1456,  343,  500,  374,  591,  377,  424,
  373,  324,  375,  571,  256,  573,  340,  575,  910,  545,
  792,  345,  438,  347,  800,  603,  350,  351,  378,  353,
  354,  342,  358,  272, 1353,  375,  384,  385,  364,  306,
  826,  592,  378,  378,  375, 1364,  818,  375, 1198,  375,
  377,  910,  946,  379, 1773,  375,  614,  833,  297,  374,
  618,  344,  266,  859,  375,  438,  392,  382,  974,  907,
  438,  445,  256,  631, 1393,  633, 1226,  788,  629, 1532,
  374,  637,  637,  661,  642,  324,  431,  432,  646,  647,
  373,  272,  431,  432,  672, 1197, 1615,  278,  424,  382,
  651,  282,  961,  727,  682,  683,  377,  256,  374,  667,
 1233,  315,  670,  364,  438, 1369,  297,  650,  431,  432,
  676,  676,  378,  438,  650,  683, 1645, 1646,  256,  266,
 1649, 1240,  374,  691,  692,  907,  264, 1472,  380,  672,
  727,  374, 1661,  324,  438, 1664,  672,  380,  306, 1043,
  374, 1405,  364,  374,  732,  426,  340,  263,  256,  378,
 1679,  345,  343,  347,  375,  691,  350,  351,  379,  353,
  354,  545,  438,  424,  946,  378,  378,  381,  315, 1472,
   90,   91,  438,  382, 1703, 1520,  437, 1310, 1041, 1472,
 1299,  340,  431,  432,  980,  344,  380,  775,  326,  777,
  382,  256,  256, 1457,  114,  438, 1044,  871,  786,  256,
  316, 1071,  424, 1472,  438,  773, 1472,  438,  429,  438,
  778,  779, 1476,  781,  373,  437,  358, 1520,  377, 1360,
  379,  380,  381,  382,  374,  438,  438, 1520,  387,  256,
  374,  295,  340,  373,  381, 1472, 1076,  345,  826,  347,
  431,  432,  350,  351,  438,  353,  354, 1472,  256,  306,
  392, 1520, 1335,  637, 1520, 1074,  844, 1553,  826,  380,
  342,  397, 1044,  378,  374,  377,  650, 1122,  378,  340,
  380,  859,  906,  841,  424, 1240,  377,  387,  866,  344,
  424, 1240, 1240, 1520,  420,  392,  393,  394,  672,  857,
  210,  211,  676,  375,  819, 1520,  864,  344,  866, 1382,
 1021,  422,  373,  392,  344,   90,   91,  691,  373,  424,
  381,  390,  377,  340,  379,  380,  859,  382,  345, 1394,
  347,  395,  387,  350,  351, 1200,  353,  354,  438,  114,
  438,  344,  340,  373,  895,  340,  897,  345,  256,  347,
  387,  344,  350,  351,  912,  353,  354,  344,  916,  344,
  397, 1214,  400,  401,    6,  340,  276,  945,  926,  920,
  373,  922, 1158,  391,  982,   17,  344,  955,  373,  382,
  373,  406,  377,  420, 1468,  993,  373,  407,  373,  382,
  427, 1576,  302,  951,  972,  953,  974,  382,  373,  419,
  437,  344,  980,  376, 1589,  373,  939,  380,  379,  987,
  344,  382,  344,  939,  382, 1304,  974,  327,   60, 1471,
 1472,  438,  980,   65,  982, 1149,  379, 1016, 1613,  382,
  256, 1016,  340,   75,  992,  210,  211,  345,  381,  347,
  438, 1493,  350,  351, 1155,  353,  354,  256,   90,   91,
  377,  374,  379,  387,  397,  365,  366,  380,  340,  101,
  269,  396,  344,  397,  387,  397, 1299,  344, 1520,  340,
 1522, 1360,  114,  115,  377,  387,  379,  420,  287, 1037,
  854, 1039,  856, 1041,  427,  397,  420, 1340,  420,  379,
  400,  373,  382,  427,  437,  427,  373,  344, 1082, 1057,
  382,  276,  373,  437, 1062,  437, 1084, 1065,  420,  358,
 1343, 1037, 1027,  340,  375,  427,  373, 1075,  344, 1077,
  377, 1036,  379,  380,  373,  382,  373,  302,  902,  171,
  387,  905,  424,  295,  444,  382,  358,  375,  358,  314,
  404,  405, 1589,  392, 1330,  307,  373,  373, 1126,  387,
  358,  377,  327,  379,  380,  261,  382,  379, 1391,  379,
  256,  387,  472,  473,  421,  939, 1668, 1456,  210,  211,
  392,  378,  392,  380,  424,  382, 1134,  295,  420,  285,
 1158,  380, 1140,  382, 1142,  427,  421, 1145,  387,  307,
  365,  366,  298,  358,  397,  421,  314,  303,  379,  364,
 1158,  373,  308, 1181,  310,  311,  312,  313,  326, 1187,
  375,  278,  318,  378,  379,  380,  322,  420,  295,  307,
  326,  373,  382,  375,  427,  400,  314,  392,  334, 1731,
  307,  337,  309,  339,  276,  374, 1412,  314, 1408, 1197,
  382,  380, 1200, 1532,  374, 1478,   17, 1378,  256,  326,
  380,  376, 1167,  378, 1169,  380,  379,  363,  300,  424,
  302,  388,  389, 1037, 1242, 1223, 1768,  382,  378,  444,
  380,  374,  314,  315,  374,  402,  403,  380,  382,  378,
  380,  380, 1233,  382,  378,  327,  380,  424, 1246,   60,
 1248,  333, 1250,  295,   65, 1253,  338,  472,  473,  377,
  380,  343,  382,  381,   75,  295, 1314, 1240, 1553, 1793,
 1794,  376,  376,  378, 1240,  380,  380,  365,  424,  450,
  451,  452,  453,  365,  366, 1264,  374, 1586,  380,  377,
  101,  379,  380,  375,  344, 1293,  376, 1315,  376,  376,
  380, 1299,  380,  380,  115,  378, 1605,  380, 1304, 1304,
  398,  399, 1330,  376,  424, 1313, 1314,  380,  400, 1310,
  376, 1533,  374,  405,  380, 1624,  378, 1626,  382, 1541,
  418,  376, 1330, 1299,  378,  380,  374, 1331,  426,  374,
  378,  429, 1340,  378,  380, 1343,   90,   91,  424, 1378,
  438, 1380,  378, 1378,  380, 1380,  378,  378,  380,  380,
  171,  357,  444,  445, 1360, 1360,  378,  378,  380,  380,
  114, 1369,  365,  387,  374,  375,  726, 1375,  375, 1408,
  261,  420,  263, 1408,  377,  387,  379, 1680,  378, 1203,
  472,  473,  381, 1391,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  285,  398,  399, 1405, 1406,  376,
  377,  382,  379,  380,  381,  378, 1445,  298,  374,  376,
 1445,  378,  303,  367,  368,  418, 1240,  308,  380,  310,
  311,  312,  313,  426,  438,  316,  429,  318,  380,  378,
  382,  322, 1471, 1472,  380,  381, 1471, 1472,  378,  376,
 1468,  378,  376,  334,  378,  376,  337,  378,  339, 1457,
 1456, 1456,  206,  545, 1493,  424,  210,  211, 1493,  378,
 1468,  380,  378,  424,  380, 1289,  295,  376, 1476,  378,
 1478,  376,  363,  378,  380, 1299,  382,  355,  356,  300,
 1304, 1520,  380, 1522,  382, 1520,  380, 1522,  382,  295,
  380,  380,  382,  378,  315,  378, 1524,  355,  356,  374,
  375,  726,  382, 1806,  380,  420,  421,  370,  371,  380,
  367,  368,  367,  368,  370,  371,  378,  338,  446,  447,
  646,  647,  276,  448,  449,  256, 1532, 1532,  387, 1353,
  454,  455,  377,  625,  894, 1536, 1360,  387,  437,  256,
 1364,  437,  767,  381,  295,  637,  295,  387,  302,  380,
  424,  378,  380,  379,  375,  379,  381,  917,  650,  424,
  314,  378,  380, 1571,  387,  380,  380,  380,  438, 1393,
  662,  382,  380,  327,  378,  429,  373,  380,  378,  333,
  672,  423,  942,  381,  676,  424,  344,  380,  378,  343,
 1598,  314,  429,  295, 1595,  295,  380,  376,  373,  691,
  377,  313,  424,  381,  424,  256,  324,  380,  256,  256,
  281,  365,  366,  387,  256,  374,  373,  378,  344, 1658,
  382,  299,  424, 1658,  445,  377,  376,  382,  423,  382,
  378,  387, 1456,  380,  726,  380, 1675,  376,  382,  348,
 1675,  378,  378,  429,  387,  373,  400,  376,  256, 1688,
 1689,  405,  377, 1688, 1689,  387,  256,  387,  378,  374,
 1668,  382,  378,  348,  424, 1666,  380,  340,  376,  894,
  381,  376, 1680,  376,  378,  767,  373, 1716, 1717,  378,
  381, 1716, 1717,  349,  374, 1045,  424,  380,  377, 1697,
  444,  424,  917,  349,  256,  374,  373,  373,  373,  387,
  792,  382,  374,  357,  378,  338,  256,  374, 1532,  377,
  374,  380,  382,  378,  374,  374,  306,  942,  472,  473,
  377,  382,  375, 1731,  545,  377,  818,  373,  424,  424,
  424,  344,  382,  377, 1773,  373,  377,  424, 1773,  379,
  377,  377,  387,  382,   90,   91,  375,  377,  380,  503,
  378,  378,  387,  379,  379,  378,  380,  261,  380,  380,
 1768,  424,  854,  382,  856, 1793, 1794,  378,  114,  376,
  382,  387,  382,  378,  376, 1776, 1777,  378,  382,  378,
  374,  285, 1783, 1784,  316, 1793, 1794,  378,  374,  387,
  424,  256,  263,  424,  298,  377,  377,  374, 1806,  303,
  387,    0,  894, 1163,  308, 1165,  310,  311,  312,  313,
  902,  378,  378,  905,  318,  907,  637,  382,  322,    0,
 1045,  424,  326,  382,  373,  917,  374,  424,  382,  650,
  334,  378,    0,  337,  380,  339,  374,  382,  378,  373,
  424,  378,  316,  376,  374,  376,  382,  939,  374,  378,
  942,  672,  373,  424,  946,  676,  374,  382,  382,  363,
  206,  378,  382,  382,  210,  211,  256,  378,  374,  378,
  691,  625,  374,  373,  382,  340,  374,  374,  379,  382,
  345,  263,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  357,  382,  382,  382,  382, 1122,  382,  382,
  382,   51,  367,  368,   12, 1265,    5, 1155,  662,  374,
 1021,  376, 1037,  378, 1330,  380,  381,  382, 1330, 1522,
  424, 1493, 1549, 1338, 1721, 1683,  391, 1737, 1671, 1700,
  276,  396,  818, 1533, 1559, 1508, 1048,  832, 1163, 1598,
 1165,  406,  407, 1048, 1048, 1037, 1043, 1576, 1596, 1520,
  340, 1784, 1044, 1045,  419,  345,  302,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  357,  314, 1693,
 1761, 1689,  726,  438, 1688, 1777, 1445,  367,  368, 1626,
 1559,  327, 1016,  333,  374,  907,  376,  333,  378, 1447,
  380,  381,  382, 1071,  980, 1091,  864,  343, 1214,   73,
  390,  391,  361, 1240, 1242,  395,  396,  826,  692,  456,
  859,  457,  460,  767,  404,  405,  406,  407,  633,  365,
  366,  458,  461,  459,  992,  946, 1335, 1423, 1531,  419,
 1122, 1304,  625,  854,  788,  856,  171, 1302,  792, 1314,
 1265, 1226, 1183, 1304, 1394,  413,  256, 1363,  438,  593,
 1088,  481,  481, 1526,  400,  265, 1011,  267, 1406,  405,
  270, 1018,  784,    0,  818,  275,   -1,   -1,   -1,   -1,
  280, 1163,   -1, 1165,   -1,   -1,   -1,   -1,   -1,  289,
   -1,  902,   -1,   -1,  905,   -1,  296,   -1,   -1,   -1,
   -1,  301,   -1,   -1,   -1,  305,   -1,   -1,  444,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,  317,   -1,  319,
 1470, 1203,   -1,  323,  265,   -1,  267,   -1,  939,  270,
   -1,  331,  332,   -1,  275,  335,  472,  473,  338,  280,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,   -1,
  894,   -1,   -1,   -1,   -1,  296,   -1,   -1, 1240,   -1,
  301,   -1,   -1,  907,  305,   -1, 1381,  503,   -1,   -1,
   -1,   -1,   -1,  917,   -1,   -1,  317,  377,  319,   -1,
   -1, 1531,  323, 1265,   -1,   -1,   -1,   -1,   -1,   -1,
  331,  332,   -1,   -1,  335,   -1,   -1,  338,  942,   -1,
 1550, 1551,  946,   -1,   -1,   -1,   -1, 1289,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1, 1299,   -1,   -1,
   -1,   -1, 1304,   -1,  424,   -1, 1037,   -1, 1578,   -1,
   -1, 1581, 1447,   -1,   -1,   -1,  377,   -1,   96,   -1,
   -1,   99,   -1,   -1,   -1,  103,  104,  105,  106,  107,
  108,  109,  110,   -1,   -1, 1470,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  261, 1353,   -1,   -1,   -1,   -1,   -1, 1021, 1360,   -1,
   -1,   -1, 1364,  424,   -1,   -1,   -1,   -1,   -1,  625,
   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1, 1381,
 1044, 1045,   -1,   -1,   -1,   -1,   -1,  298,   -1,   -1,
   -1, 1393,  303,   -1,   -1,   -1, 1531,  308,   -1,  310,
  311,  312,  313,   -1,   -1,   -1,  662,  318,   -1,   -1,
  257,  322,   -1,   -1,  261, 1550, 1551,   -1, 1553,   -1,
   -1,   -1,   -1,  334,   -1,  272,  337,   -1,  339,   -1,
   -1,  278,   -1,   -1,   -1,  282,   -1,   -1,  285,   -1,
   -1,   -1,    0, 1578,   -1, 1447, 1581,   -1,   -1,   -1,
  297,  298,  363,   -1, 1456,  302,  303,   -1, 1122,   -1,
   -1,  308,   -1,  310,  311,  312,  313,   -1, 1470,   -1,
  726,  318, 1203,   -1,   -1,  322,   -1,  324,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,   -1,  336,
  337, 1155,  339,   -1,   -1,   -1,  343,   -1,   -1, 1163,
   -1, 1165,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 1240,
   -1,  767,   -1,  424,   -1,   -1,  363,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375, 1531,
 1532, 1533,  788,   -1,   -1,   -1,  792,   -1,   -1, 1541,
   -1,  319,   -1,   -1,   -1,   -1,   -1,   -1, 1550, 1551,
   -1, 1553,   -1,   -1,   -1,   -1,   -1,   -1, 1289,   -1,
   -1,   -1,  818,   -1,   -1,   -1,   -1,   -1, 1299,   -1,
   -1,   -1,   -1, 1304,   -1,   -1, 1578,   -1,   -1, 1581,
  358,   -1,   -1,   -1,  431,  432,   -1,   -1,   -1,   -1,
  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1, 1265,   -1,  340,   -1,   -1,   -1,   -1,  345,   -1,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  357,   -1, 1353,   -1,   -1,   -1,   -1,   -1,   -1, 1360,
  367,  368,   -1, 1364,   -1,   -1,   -1,  374,  894,  376,
   -1,  378,   -1,  380,  381,  382,   -1,   -1,   -1,   -1,
   -1,  907,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,
   -1,  917, 1393,  441,  442,  443,   -1,   -1,  446,  447,
  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,
  458,  459,  460,  461,   -1,   -1,  942,   -1,   -1,   -1,
  946,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,  438,    0,  261,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  272,   -1,   -1, 1381,   -1,   -1,
  278,   -1,   -1,   -1,  282, 1456,   -1,  285,   -1,  256,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,
  298,   -1,   -1,   -1,  302,  303,   -1,   -1,   -1,   -1,
  308,   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,
  318,   -1,   -1,   -1,  322, 1021,  324,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  334,   -1,   -1,  337,
   -1,  339,   -1, 1447,   -1,  343,   -1,   -1, 1044, 1045,
   -1,  569,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1, 1532,   -1,   -1,   -1,  363, 1470,   -1,   -1,   -1,
   -1,   -1,   -1,  340,   -1,  373,  374,  375,  345,   -1,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,  368,   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,
   -1,  378,   -1,  380,  381,  382,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1, 1122, 1531,   -1, 1533,
   -1,   -1,   -1,  431,  432,   -1,   -1, 1541,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,    0, 1550, 1551,  666, 1553,
   -1,   -1,   -1,   -1,   -1, 1559,   -1,   -1,   -1, 1155,
   -1,   -1,   -1,  265,   -1,  267,   -1, 1163,  270, 1165,
   -1,  438, 1576,  275, 1578,   -1,   -1, 1581,  280,   -1,
   -1,   -1,  284,   -1,   -1, 1589,   -1,  289,   -1,   -1,
   -1,  358,  294,   -1,  296,   -1,   -1,  364,  365,  301,
   -1,   -1,   -1,  305,  306,  723,  724,  374,  375, 1613,
  377,  378,  379,  380,   -1,  317,   -1,  319,  256,   -1,
  387,  323,  740,  261,  262,  392,   -1,   -1,   -1,  331,
  332,  398,  399,  335,   -1,   -1,  338,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
   -1,  418,   -1,   -1,   -1,   -1,   -1,  424,   -1,  426,
  298,  299,  429,   -1,   -1,  303,   -1,   -1,  306, 1265,
  308,  438,  310,  311,  312,  313,   -1,   -1,   -1,   -1,
  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,  326,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  334,   -1,   -1,  337,
   -1,  339,  340,   -1,   -1,   -1,  344,  345,   -1,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
   -1,   -1,  424,   -1,   -1,  363,  364,  365,   -1,  367,
  368,   -1,   -1,   -1,   -1,  373,  374,   -1,  376,  377,
  378,  379,  380,  381,  382,  863,  384,  385,   -1,  387,
  388,  389,  390,  391,  392,  393,  394,  395,  396,    0,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,   -1,   -1,  422, 1381,  424,   -1,  426,   -1,
   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  438,  256,  257,   -1,   -1,  256,  261,   -1,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,   -1,   -1,  278,   -1,  280,   -1,  282,  283,  284,
  285,   -1,   -1,  288,  289,   -1,   -1,   -1,   -1,  294,
   -1,  296,  297,  298,   -1,   -1,  301,  302,  303,   -1,
  305, 1447,   -1,  308,   -1,  310,  311,  312,  313,  314,
   -1,   -1,  317,  318,  319,   -1,   -1,  322,  323,  324,
   -1,   -1,   -1,   -1, 1470,   -1,  331,  332,   -1,  334,
  335,   -1,  337,  338,  339,   -1,   -1,   -1,  343,  340,
   -1,   -1,   -1,   -1,  345,   -1,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,   -1,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,  373,  374,
  375,   -1,  377,  374,   -1,  376,   -1,  378,  383,  380,
  381,  382,   -1,   -1,    0, 1531,   -1, 1533,   -1,   -1,
   -1,   -1,   -1,   -1,  261, 1541,   -1,   -1,   -1,   -1,
   -1,   -1,   -1, 1071, 1550, 1551,   -1, 1553,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,  424,
   -1,   -1,   -1,   -1,   -1,   -1,  431,  432,   -1,   -1,
   -1,  298, 1578,   -1,   -1, 1581,  303,  438,   -1,  306,
   -1,  308,   -1,  310,  311,  312,  313,   -1,   -1,   -1,
   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,  326,
   -1,   -1, 1130,   -1,   -1,  256,  257,  334, 1136,   -1,
  337,   -1,  339,  264,  265,  266,  267,  268,   -1,  270,
  271,   -1,  273,  274,  275,  276,  277,  278,  279,  280,
  281,   -1,   -1,    0,   -1,  286,  363,  288,  289,  290,
  291,  292,  293,   -1,   -1,  296,   -1,  374,   -1,  300,
  301,   -1,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,  315,   -1,  317,   -1,  319,  320,
   -1,   -1,  323,   -1,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,   -1,  338,   -1,   -1,
  341,  342,   -1,   -1,  345,  346,   -1,  424,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
  361,  362,  363,  364,   -1,   -1,  367,  368,  369,   -1,
   -1,   -1,  373,  374,   -1,   -1,  377,   -1,   -1,   -1,
   -1,  382,  383,  384,  385,  386,   -1,   -1,   -1,  390,
   -1,  392,   -1,   -1,   -1,   -1,   -1,  398,  399,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  423,  424,  425,  426,   -1,  428,   -1,  430,
  256,  257,   -1,   -1,   -1,    0,   -1,  438,  264,  265,
  266,  267,  268,   -1,  270,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,  280,   -1,   -1,   -1,   -1,   -1,
  286,   -1,  288,  289,  290,  291,  292,  293,   -1,   -1,
  296,   -1,   -1,   -1,  300,  301,   -1,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,
   -1,  317,   -1,  319,  320,   -1,   -1,  323,   -1,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,   -1,  338,   -1,   -1,  341,  342,   -1,   -1,  345,
  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  360,  361,  362,  363,  364,  256,
   -1,  367,  368,  369,  261,  262,   -1,  373,  374,   -1,
   -1,  377,   -1,   -1,   -1,   -1,  382,  383,  384,  385,
  386,   -1,   -1,   -1,  390,   -1,  392,   -1,  285,   -1,
   -1,   -1,  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  298,  299,   -1,   -1,   -1,  303,    0,   -1,  306,
   -1,  308,   -1,  310,  311,  312,  313,  423,  424,  425,
  426,  318,  428,   -1,  430,  322,   -1,   -1,   -1,  326,
   -1,   -1,  438,   -1,   -1,   -1,   -1,  334,   -1,   -1,
  337,   -1,  339,  340,   -1,   -1,   -1,  344,  345,   -1,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  357,  358,   -1,   -1,   -1,   -1,  363,  364,   -1,   -1,
  367,  368,   -1,   -1,   -1,   -1,  373,  374,  375,  376,
  377,  378,  379,  380,  381,  382,   -1,  384,  385,   -1,
   -1,  388,  389,  390,  391,  392,   -1,   -1,  395,  396,
   -1,   -1,   -1,  400,  401,  402,  403,  404,  405,  406,
  407,  256,   -1,   -1,   -1,   -1,  261,  262,   -1,   -1,
   -1,   -1,  419,   -1,   -1,  422,   -1,  424,   -1,  426,
   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  285,  438,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  298,  299,   -1,   -1,   -1,  303,   -1,
   -1,   -1,   -1,  308,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,
   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,
   -1,   -1,  337,   -1,  339,  340,   -1,   -1,   -1,  344,
  345,   -1,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  357,  358,   -1,   -1,   -1,   -1,  363,  364,
   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,  373,  374,
  375,  376,  377,  378,  379,  380,  381,  382,   -1,  384,
  385,   -1,   -1,  388,  389,  390,  391,  392,   -1,   -1,
  395,  396,   -1,   -1,   -1,  400,  401,  402,  403,  404,
  405,  406,  407,  256,   -1,   -1,   -1,   -1,  261,  262,
   -1,   -1,   -1,   -1,  419,   -1,   -1,  422,   -1,  424,
   -1,  426,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  285,  438,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  298,  299,   -1,   -1,   -1,
  303,   -1,   -1,  306,   -1,  308,   -1,  310,  311,  312,
  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,   -1,  322,
   -1,   -1,   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  334,   -1,   -1,  337,   -1,  339,  340,   -1,   -1,
   -1,  344,  345,   -1,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,   -1,
  363,  364,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,
  373,  374,  375,  376,  377,  378,   -1,  380,  381,  382,
   -1,  384,  385,   -1,   -1,  388,  389,  390,  391,  256,
   -1,   -1,  395,  396,  261,  262,   -1,  400,  401,  402,
  403,  404,  405,  406,  407,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  419,   -1,  285,  422,
   -1,  424,   -1,  426,   -1,   -1,  429,   -1,   -1,   -1,
   -1,  298,  299,   -1,   -1,  438,  303,    0,   -1,  306,
   -1,  308,   -1,  310,  311,  312,  313,   -1,   -1,   -1,
   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,  326,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,   -1,   -1,
  337,   -1,  339,  340,   -1,   -1,   -1,  344,  345,   -1,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  357,   -1,   -1,   -1,   -1,   -1,  363,  364,   -1,   -1,
  367,  368,   -1,   -1,   -1,   -1,  373,  374,  375,  376,
  377,  378,   -1,  380,  381,  382,   -1,  384,  385,   -1,
   -1,  388,  389,  390,  391,   -1,   -1,   -1,  395,  396,
   -1,   -1,   -1,  400,  401,  402,  403,  404,  405,  406,
  407,  256,   -1,   -1,   -1,   -1,  261,  262,   -1,   -1,
   -1,   -1,  419,   -1,   -1,  422,   -1,  424,   -1,  426,
   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  285,  438,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  298,  299,   -1,   -1,   -1,  303,   -1,
   -1,    0,   -1,  308,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,
   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,
   -1,   -1,  337,   -1,  339,  340,   -1,   -1,   -1,  344,
  345,   -1,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  357,   -1,   -1,   -1,   -1,   -1,  363,  364,
   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,  373,  374,
  375,  376,  377,  378,   -1,  380,  381,  382,   -1,  384,
  385,   -1,   -1,  388,  389,  390,  391,   -1,    0,   -1,
  395,  396,   -1,   -1,   -1,  400,  401,  402,  403,  404,
  405,  406,  407,  256,   -1,   -1,   -1,   -1,  261,  262,
   -1,   -1,   -1,   -1,  419,   -1,   -1,  422,   -1,  424,
   -1,  426,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  285,  438,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  298,  299,   -1,   -1,   -1,
  303,   -1,   -1,  306,   -1,  308,   -1,  310,  311,  312,
  313,   -1,    0,   -1,   -1,  318,   -1,   -1,   -1,  322,
   -1,   -1,   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  334,   -1,   -1,  337,   -1,  339,  340,   -1,   -1,
   -1,  344,  345,   -1,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,   -1,
  363,  364,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,
  373,  374,   -1,  376,  377,  378,   -1,  380,  381,  382,
   -1,  384,  385,   -1,   -1,  388,  389,  390,  391,   -1,
   -1,   -1,  395,  396,   -1,    0,   -1,  400,  401,  402,
  403,  404,  405,  406,  407,   -1,   -1,   -1,  257,   -1,
   -1,   -1,  261,   -1,   -1,   -1,  419,   -1,   -1,  422,
   -1,  424,   -1,  272,   -1,   -1,   -1,   -1,   -1,  278,
   -1,   -1,   -1,  282,   -1,  438,  285,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,  298,
   -1,   -1,   -1,  302,  303,   -1,  261,   -1,   -1,  308,
   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,  318,
   -1,   -1,   -1,  322,   -1,  324,   -1,   -1,   -1,   -1,
  285,   -1,   -1,   -1,   -1,  334,   -1,  336,  337,   -1,
  339,   -1,   -1,  298,  343,  257,   -1,   -1,  303,  261,
   -1,   -1,   -1,  308,   -1,  310,  311,  312,  313,   -1,
  272,   -1,    0,  318,  363,   -1,  278,  322,   -1,   -1,
  282,   -1,   -1,  285,   -1,   -1,  375,   -1,   -1,  334,
   -1,   -1,  337,   -1,  339,  297,  298,   -1,   -1,   -1,
  302,  303,   -1,   -1,   -1,   -1,  308,   -1,  310,  311,
  312,  313,   -1,   -1,   -1,   -1,  318,   -1,  363,   -1,
  322,   -1,  324,   -1,   -1,  370,  371,   -1,   -1,  257,
   -1,   -1,  334,  261,   -1,  337,    0,  339,   -1,   -1,
   -1,  343,  431,  432,  272,   -1,   -1,   -1,   -1,   -1,
  278,   -1,   -1,   -1,  282,   -1,   -1,  285,   -1,   -1,
   -1,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,
  298,   -1,  374,  375,  302,  303,   -1,   -1,   -1,   -1,
  308,   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,
  318,   -1,   -1,   -1,  322,   -1,  324,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  334,   -1,    0,  337,
   -1,  339,  257,   -1,   -1,  343,  261,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,   -1,  431,
  432,   -1,   -1,  278,   -1,  363,   -1,  282,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,  374,  375,   -1,   -1,
   -1,    0,  297,  298,   -1,  257,   -1,  302,  303,  261,
   -1,   -1,   -1,  308,   -1,  310,  311,  312,  313,   -1,
  272,   -1,   -1,  318,   -1,   -1,  278,  322,   -1,  324,
  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,  334,
   -1,   -1,  337,   -1,  339,  297,  298,   -1,  343,   -1,
  302,  303,   -1,  431,  432,   -1,  308,   -1,  310,  311,
  312,  313,   -1,   -1,   -1,   -1,  318,   -1,  363,   -1,
  322,   -1,  324,    0,   -1,   -1,   -1,   -1,   -1,  257,
  375,   -1,  334,  261,   -1,  337,   -1,  339,   -1,   -1,
   -1,  343,   -1,   -1,  272,   -1,   -1,   -1,   -1,   -1,
  278,   -1,   -1,   -1,  282,   -1,   -1,  285,   -1,   -1,
   -1,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,
  298,   -1,   -1,   -1,  302,  303,   -1,   -1,   -1,   -1,
  308,   -1,  310,  311,  312,  313,  431,  432,   -1,   -1,
  318,   -1,   -1,  257,  322,   -1,  324,  261,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  334,   -1,  272,  337,
   -1,  339,   -1,   -1,  278,  343,   -1,   -1,  282,   -1,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  431,
  432,   -1,   -1,  297,  298,  363,   -1,   -1,  302,  303,
   -1,   -1,   -1,   -1,  308,   -1,  310,  311,  312,  313,
   -1,   -1,   -1,   -1,  318,   -1,   -1,   -1,  322,   -1,
  324,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,  261,
  334,   -1,   -1,  337,   -1,  339,   -1,   -1,   -1,  343,
  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,
  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,  363,
   -1,   -1,   -1,  431,  432,  297,  298,   -1,  257,   -1,
  302,  303,  261,   -1,   -1,   -1,  308,   -1,  310,  311,
  312,  313,   -1,  272,   -1,   -1,  318,   -1,   -1,  278,
  322,   -1,  324,  282,   -1,   -1,  285,   -1,   -1,   -1,
   -1,   -1,  334,   -1,   -1,  337,   -1,  339,  297,  298,
   -1,  343,   -1,  302,  303,   -1,   -1,   -1,   -1,  308,
   -1,  310,  311,  312,  313,   -1,   -1,  431,  432,  318,
   -1,  363,   -1,  322,   -1,  324,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   -1,  261,  334,   -1,   -1,  337,   -1,
  339,   -1,   -1,   -1,  343,  272,   -1,   -1,   -1,   -1,
   -1,  278,   -1,   -1,   -1,  282,   -1,   -1,  285,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,   -1,   -1,
  297,  298,   -1,   -1,   -1,  302,  303,   -1,   -1,   -1,
   -1,  308,   -1,  310,  311,  312,  313,   -1,   -1,  431,
  432,  318,   -1,   -1,   -1,  322,   -1,  324,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,   -1,   -1,
  337,   -1,  339,   -1,   -1,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  431,  432,   -1,   -1,  363,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,  266,
  267,   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,
  277,  278,  279,  280,   -1,   -1,   -1,   -1,   -1,  286,
   -1,  288,  289,  290,  291,  292,  293,   -1,   -1,  296,
   -1,   -1,   -1,  300,  301,   -1,  303,  304,  305,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,
  317,   -1,  319,  320,  431,  432,  323,   -1,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
   -1,  338,   -1,   -1,  341,  342,   -1,   -1,  345,  346,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,
   -1,   -1,   -1,  360,  361,  362,  363,  364,   -1,   -1,
  367,  368,  369,   -1,   -1,   -1,  373,   -1,   -1,   -1,
  377,   -1,   -1,   -1,   -1,  382,  383,  384,  385,  386,
   -1,   -1,   -1,  390,  299,  392,   -1,   -1,   -1,   -1,
   -1,  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  423,  424,  425,  426,
   -1,   -1,   -1,  430,   -1,  340,   -1,   -1,   -1,   -1,
  345,  438,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  357,  358,   -1,   -1,   -1,   -1,   -1,  364,
  365,   -1,  367,  368,   -1,   -1,   -1,   -1,  373,  374,
  375,  376,  377,  378,  379,  380,  381,  382,   -1,  384,
  385,   -1,  387,  388,  389,  390,  391,  392,  393,  394,
  395,  396,   -1,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
  415,  416,  417,  418,  419,  420,   -1,  256,   -1,  424,
  261,  426,  427,  262,  429,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  438,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,   -1,
  299,   -1,  303,   -1,   -1,  306,   -1,  308,   -1,  310,
  311,  312,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,
   -1,  322,   -1,   -1,   -1,  326,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  334,   -1,   -1,  337,   -1,  339,   -1,
   -1,  340,   -1,   -1,   -1,   -1,  345,   -1,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
   -1,   -1,  363,   -1,   -1,  364,  365,  299,  367,  368,
   -1,   -1,   -1,  374,  373,  374,  375,  376,  377,  378,
  379,  380,  381,  382,   -1,  384,  385,   -1,  387,  388,
  389,  390,  391,  392,  393,  394,  395,  396,   -1,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,  420,  256,  424,   -1,  424,   -1,  426,  262,   -1,
  429,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,  438,
   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,  381,
   -1,   -1,  384,  385,   -1,   -1,  388,  389,  390,  391,
  392,  393,  394,  395,  396,  299,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,  419,   -1,   -1,
   -1,   -1,   -1,   -1,  426,   -1,   -1,  429,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  340,   -1,   -1,   -1,
   -1,  345,   -1,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  357,  358,   -1,   -1,   -1,   -1,   -1,
  364,  365,   -1,  367,  368,   -1,   -1,   -1,   -1,  373,
  374,  375,  376,  377,  378,  379,  380,  381,  382,   -1,
  384,  385,   -1,  387,  388,  389,  390,  391,  392,  393,
  394,  395,  396,   -1,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,   -1,  256,   -1,   -1,
  424,  261,  426,  262,   -1,  429,   -1,   -1,   -1,   -1,
   -1,   -1,  272,   -1,  438,   -1,   -1,   -1,  278,   -1,
   -1,   -1,  282,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,  298,   -1,
  299,   -1,  302,  303,   -1,   -1,   -1,   -1,  308,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   -1,  318,   -1,
   -1,   -1,  322,   -1,  324,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  334,   -1,   -1,  337,   -1,  339,
   -1,  340,   -1,  343,   -1,   -1,  345,   -1,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
   -1,   -1,   -1,  363,   -1,  364,  365,   -1,  367,  368,
   -1,   -1,   -1,   -1,  374,  374,  375,  376,  377,  378,
  379,  380,  381,  382,   -1,  384,  385,   -1,  387,  388,
  389,  390,  391,  392,  393,  394,  395,  396,   -1,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,   -1,  256,   -1,  261,  424,   -1,  426,  262,   -1,
  429,  431,  432,   -1,   -1,   -1,   -1,   -1,   -1,  438,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  298,   -1,   -1,   -1,  299,  303,   -1,   -1,   -1,
   -1,  308,   -1,  310,  311,  312,  313,   -1,   -1,  316,
   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,   -1,   -1,
  337,   -1,  339,   -1,   -1,   -1,  340,   -1,   -1,   -1,
   -1,  345,   -1,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  357,  256,   -1,  363,   -1,   -1,   -1,
   -1,  365,   -1,  367,  368,   -1,   -1,  374,  375,  373,
  374,  375,  376,  377,  378,  379,  380,  381,  382,   -1,
  384,  385,   -1,  387,  388,  389,  390,  391,  392,  393,
  394,  395,  396,   -1,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,   -1,  256,   -1,   -1,
   -1,   -1,  426,  262,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  438,   -1,   -1,   -1,  340,   -1,
   -1,   -1,   -1,  345,   -1,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
  299,   -1,   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,
   -1,   -1,  374,   -1,  376,   -1,  378,   -1,  380,  381,
  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  340,   -1,   -1,   -1,   -1,  345,   -1,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,  367,  368,
   -1,   -1,   -1,   -1,  373,  374,  438,  376,  377,  378,
  379,  380,  381,  382,   -1,  384,  385,   -1,  387,  388,
  389,  390,  391,  392,  393,  394,  395,  396,   -1,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,   -1,  256,   -1,   -1,   -1,  261,  426,  262,   -1,
  429,   -1,   -1,   -1,   -1,   -1,   -1,  272,   -1,  438,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  297,  298,   -1,  299,   -1,  302,  303,   -1,
   -1,   -1,   -1,  308,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,  318,   -1,   -1,   -1,  322,   -1,  324,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,
   -1,   -1,  337,   -1,  339,   -1,  340,   -1,  343,   -1,
   -1,  345,   -1,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  357,   -1,   -1,   -1,   -1,  363,   -1,
   -1,  365,   -1,  367,  368,   -1,   -1,   -1,   -1,  374,
  374,   -1,  376,  377,  378,  379,  380,  381,  382,   -1,
  384,  385,   -1,  387,  388,  389,  390,  391,  392,  393,
  394,  395,  396,   -1,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,   -1,  256,   -1,  261,
   -1,  263,  426,  262,   -1,  429,  431,  432,   -1,   -1,
   -1,   -1,   -1,   -1,  438,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,   -1,   -1,
  299,  303,   -1,   -1,   -1,   -1,  308,   -1,  310,  311,
  312,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  334,   -1,   -1,  337,   -1,  339,   -1,   -1,
   -1,  340,   -1,   -1,   -1,   -1,  345,   -1,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  357,   -1,
   -1,  363,   -1,   -1,   -1,   -1,  365,   -1,  367,  368,
   -1,   -1,  374,  375,   -1,  374,   -1,  376,  377,  378,
  379,  380,  381,  382,   -1,  384,  385,   -1,  387,  388,
  389,  390,  391,  392,  393,  394,  395,  396,   -1,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,   -1,  256,   -1,   -1,   -1,  261,  426,  262,   -1,
  429,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  438,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  298,   -1,  299,   -1,   -1,  303,   -1,
   -1,   -1,   -1,  308,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,
   -1,   -1,  337,   -1,  339,   -1,  340,   -1,   -1,   -1,
   -1,  345,   -1,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  357,   -1,   -1,  256,   -1,  363,   -1,
   -1,  365,   -1,  367,  368,  370,  371,   -1,   -1,  374,
  374,   -1,  376,  377,  378,  379,  380,  381,  382,   -1,
  384,  385,   -1,  387,  388,  389,  390,  391,  392,  393,
  394,  395,  396,   -1,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,   -1,  256,   -1,   -1,
   -1,   -1,  426,  262,   -1,  429,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  438,   -1,   -1,   -1,   -1,   -1,
  340,   -1,   -1,   -1,   -1,  345,   -1,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  357,   -1,   -1,
  299,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,
   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,  378,   -1,
  380,  381,  382,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,  262,   -1,  396,   -1,  266,   -1,
   -1,  340,   -1,   -1,   -1,   -1,  345,  407,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  357,  419,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,
   -1,  299,   -1,   -1,   -1,  374,   -1,  376,  438,  378,
   -1,  380,  381,  382,   -1,  384,  385,  315,  387,  388,
  389,  390,  391,  392,  393,  394,  395,  396,   -1,   -1,
   -1,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,   -1,
  419,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,   -1,   -1,   -1,   -1,   -1,  364,  365,   -1,  438,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,
  378,  379,  380,  381,  382,   -1,  384,  385,   -1,  387,
  388,  389,  390,  391,  392,  393,  394,  395,  396,   -1,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  419,   -1,  256,   -1,   -1,  424,  261,  426,  262,
   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  438,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  298,   -1,  299,   -1,   -1,  303,
   -1,   -1,   -1,   -1,  308,   -1,  310,  311,  312,  313,
   -1,   -1,   -1,   -1,  318,   -1,   -1,   -1,  322,   -1,
  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,
  334,   -1,   -1,  337,   -1,  339,   -1,  340,   -1,   -1,
   -1,   -1,  345,   -1,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,  363,
   -1,  364,  365,  299,  367,  368,  370,  371,   -1,   -1,
  374,  374,  375,  376,  377,  378,  379,  380,  381,  382,
   -1,  384,  385,   -1,   -1,  388,  389,  390,  391,   -1,
   -1,   -1,  395,  396,   -1,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  418,  419,   -1,   -1,   -1,
   -1,  424,   -1,  426,   -1,   -1,  429,   -1,  364,  365,
   -1,   -1,   -1,   -1,   -1,  438,   -1,   -1,  374,  375,
  376,  377,  378,  379,  380,  381,  382,   -1,  384,  385,
   -1,  387,  388,  389,  390,  391,   -1,  393,  394,  395,
  396,   -1,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,   -1,  256,   -1,  261,  424,   -1,
  426,  262,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  438,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  298,   -1,   -1,   -1,  299,  303,
   -1,   -1,   -1,   -1,  308,   -1,  310,  311,  312,  313,
   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  334,   -1,   -1,  337,   -1,  339,   -1,   -1,   -1,  340,
   -1,   -1,   -1,   -1,  345,   -1,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,   -1,   -1,  363,
   -1,   -1,   -1,   -1,  365,  256,  367,  368,   -1,   -1,
  374,  262,   -1,  374,   -1,  376,  377,  378,  379,  380,
  381,  382,   -1,  384,  385,   -1,   -1,  388,  389,  390,
  391,   -1,   -1,   -1,  395,  396,   -1,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,   -1,  299,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  418,  419,   -1,
   -1,   -1,   -1,   -1,   -1,  426,   -1,   -1,  429,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  438,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,
   -1,   -1,   -1,   -1,  345,   -1,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,  256,  367,  368,   -1,   -1,
   -1,  262,   -1,  374,   -1,  376,  377,  378,  379,  380,
  381,  382,   -1,  384,  385,   -1,   -1,  388,  389,  390,
  391,   -1,   -1,   -1,  395,  396,   -1,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,   -1,  299,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  418,  419,   -1,
   -1,   -1,   -1,   -1,   -1,  426,   -1,   -1,  429,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  438,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,
   -1,   -1,   -1,   -1,  345,   -1,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,  256,  367,  368,   -1,   -1,
   -1,  262,   -1,  374,   -1,  376,  377,  378,  379,  380,
  381,  382,   -1,  384,  385,   -1,   -1,  388,  389,  390,
  391,   -1,   -1,   -1,  395,  396,   -1,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,   -1,  299,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  418,  419,   -1,
   -1,   -1,   -1,   -1,   -1,  426,   -1,   -1,  429,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  438,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  340,
   -1,  262,   -1,   -1,  345,   -1,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,
   -1,   -1,   -1,  364,   -1,   -1,  367,  368,   -1,   -1,
   -1,   -1,   -1,  374,  375,  376,   -1,  378,  299,  380,
  381,  382,   -1,  384,  385,   -1,   -1,  388,  389,  390,
  391,   -1,   -1,   -1,  395,  396,   -1,   -1,   -1,  400,
  401,  402,  403,  404,  405,  406,  407,   -1,  256,   -1,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,  419,  340,
   -1,   -1,   -1,  424,  345,   -1,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,  438,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,   -1,
   -1,  299,   -1,  374,   -1,  376,   -1,  378,   -1,  380,
  381,  382,   -1,  384,  385,   -1,   -1,  388,  389,  390,
  391,  392,  393,  394,  395,  396,   -1,   -1,   -1,  400,
  401,  402,  403,  404,  405,  406,  407,   -1,  256,   -1,
   -1,   -1,  340,   -1,  262,   -1,   -1,  345,  419,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
   -1,   -1,   -1,   -1,   -1,   -1,  364,  438,   -1,  367,
  368,   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,
  378,  299,  380,  381,  382,   -1,  384,  385,   -1,   -1,
  388,  389,  390,  391,   -1,   -1,   -1,  395,  396,   -1,
   -1,   -1,  400,  401,  402,  403,  404,  405,  406,  407,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,
   -1,  419,  340,   -1,   -1,   -1,  424,  345,   -1,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
  438,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
  368,   -1,   -1,   -1,  299,   -1,  374,   -1,  376,   -1,
  378,   -1,  380,  381,  382,   -1,  384,  385,   -1,   -1,
  388,  389,  390,  391,   -1,   -1,   -1,  395,  396,   -1,
   -1,   -1,  400,  401,  402,  403,  404,  405,  406,  407,
   -1,  256,   -1,   -1,   -1,  340,   -1,  262,   -1,   -1,
  345,  419,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  438,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,  374,
   -1,  376,   -1,  378,  299,  380,  381,  382,   -1,  384,
  385,   -1,   -1,  388,  389,  390,  391,   -1,   -1,   -1,
  395,  396,   -1,   -1,   -1,  400,  401,  402,  403,  404,
  405,  406,  407,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   -1,  419,  340,   -1,   -1,   -1,   -1,
  345,   -1,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  357,  438,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,  368,   -1,   -1,   -1,  299,   -1,  374,
   -1,  376,   -1,  378,   -1,  380,  381,  382,   -1,  384,
  385,   -1,   -1,  388,  389,  390,  391,   -1,   -1,   -1,
  395,  396,   -1,   -1,   -1,  400,  401,  402,  403,  404,
  405,  406,  407,   -1,   -1,   -1,   -1,   -1,  340,   -1,
   -1,   -1,   -1,  345,  419,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  438,   -1,  367,  368,   -1,   -1,   -1,
   -1,   -1,  374,   -1,  376,   -1,  378,   -1,  380,  381,
  382,   -1,  384,  385,   -1,   -1,  388,  389,  390,  391,
   -1,   -1,   -1,  395,  396,   -1,   -1,   -1,  400,  401,
  402,  403,  404,  405,  406,  407,   -1,  256,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  264,  265,  419,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
   -1,  280,   -1,   -1,   -1,   -1,  438,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,   -1,  301,   -1,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,   -1,
  319,  320,   -1,   -1,  323,   -1,   -1,  326,   -1,  328,
   -1,  330,  331,  332,  333,   -1,  335,   -1,   -1,   -1,
   -1,   -1,   -1,  340,   -1,   -1,   -1,   -1,  345,   -1,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  357,  360,  361,  362,  363,  364,  256,   -1,  367,  368,
  367,  368,   -1,   -1,   -1,   -1,   -1,  374,  377,  376,
   -1,  378,   -1,  380,  381,  382,   -1,   -1,   -1,   -1,
   -1,  388,  389,  390,  391,   -1,   -1,   -1,  395,  396,
   -1,   -1,   -1,  400,  401,  402,  403,  404,  405,  406,
  407,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  419,   -1,  423,  424,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  437,  438,
   -1,  438,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  340,   -1,   -1,   -1,   -1,  345,   -1,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,
   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,  378,   -1,
  380,  381,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
  390,  391,   -1,   -1,   -1,  395,  396,   -1,   -1,   -1,
  400,  401,  402,  403,  404,  405,  406,  407,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  340,   -1,   -1,  419,
   -1,  345,   -1,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  357,   -1,   -1,   -1,   -1,  438,   -1,
   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,
  374,   -1,  376,   -1,  378,   -1,  380,  381,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,  390,  391,   -1,   -1,
   -1,  395,  396,   -1,   -1,   -1,  400,  401,  402,  403,
  404,  405,  406,  407,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  340,   -1,   -1,  419,   -1,  345,   -1,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
   -1,   -1,   -1,   -1,  438,   -1,   -1,   -1,   -1,  367,
  368,   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,
  378,   -1,  380,  381,  382,   -1,   -1,   -1,   -1,   -1,
  388,  389,  390,  391,   -1,   -1,   -1,  395,  396,   -1,
   -1,   -1,   -1,   -1,  402,  403,  404,  405,  406,  407,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,   -1,
   -1,  419,   -1,  345,   -1,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,
  438,   -1,   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,
   -1,   -1,  374,   -1,  376,   -1,  378,   -1,  380,  381,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,  390,  391,
   -1,   -1,   -1,  395,  396,   -1,   -1,   -1,   -1,   -1,
  402,  403,  404,  405,  406,  407,  256,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  340,   -1,   -1,  419,   -1,  345,
   -1,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  357,   -1,   -1,   -1,   -1,  438,   -1,   -1,   -1,
   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,  374,   -1,
  376,   -1,  378,   -1,  380,  381,  382,   -1,   -1,   -1,
   -1,   -1,  388,  389,  390,  391,   -1,   -1,   -1,  395,
  396,   -1,   -1,   -1,   -1,   -1,  402,  403,  404,  405,
  406,  407,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  340,   -1,   -1,  419,   -1,  345,   -1,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  357,   -1,   -1,
   -1,   -1,  438,   -1,   -1,   -1,   -1,  367,  368,   -1,
   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,  378,   -1,
  380,  381,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
  390,  391,  256,   -1,   -1,  395,  396,   -1,  262,   -1,
   -1,   -1,  402,  403,  404,  405,  406,  407,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  340,   -1,   -1,  419,
   -1,  345,   -1,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  357,   -1,  299,   -1,   -1,  438,   -1,
   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,
  374,   -1,  376,   -1,  378,   -1,  380,  381,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,  390,  391,   -1,   -1,
   -1,  395,  396,   -1,   -1,   -1,   -1,   -1,  402,  403,
  404,  405,  406,  407,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  419,   -1,   -1,   -1,   -1,
   -1,  365,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,   -1,   -1,  377,  438,  379,  380,   -1,   -1,   -1,
  384,  385,   -1,   -1,  388,  389,  390,  391,  392,  393,
  394,  395,  396,   -1,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  418,  419,   -1,  256,   -1,   -1,
   -1,   -1,  426,   -1,   -1,  429,   -1,   -1,  340,   -1,
   -1,   -1,   -1,  345,  438,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,
   -1,   -1,  374,   -1,  376,   -1,  378,   -1,  380,  381,
  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,  391,
   -1,   -1,   -1,  395,  396,   -1,   -1,   -1,   -1,   -1,
  256,   -1,  404,  405,  406,  407,   -1,   -1,   -1,   -1,
   -1,  340,   -1,   -1,   -1,   -1,  345,  419,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  438,   -1,  367,  368,
   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,  378,
   -1,  380,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  390,  391,   -1,   -1,   -1,  395,  396,   -1,   -1,
   -1,   -1,   -1,  256,   -1,  404,  405,  406,  407,   -1,
   -1,   -1,   -1,   -1,  340,   -1,   -1,   -1,   -1,  345,
  419,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  438,
   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,  374,   -1,
  376,   -1,  378,   -1,  380,  381,  382,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  390,  391,   -1,   -1,   -1,  395,
  396,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
  406,  407,   -1,   -1,   -1,   -1,   -1,  340,   -1,   -1,
   -1,   -1,  345,  419,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  438,   -1,  367,  368,   -1,   -1,   -1,   -1,
   -1,  374,   -1,  376,   -1,  378,   -1,  380,  381,  382,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,  391,   -1,
   -1,   -1,  395,  396,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  406,  407,   -1,   -1,   -1,   -1,   -1,
  340,   -1,   -1,   -1,   -1,  345,  419,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  438,   -1,  367,  368,   -1,
   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,  378,   -1,
  380,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  391,   -1,   -1,   -1,  395,  396,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,  406,  407,   -1,   -1,
   -1,   -1,   -1,  340,   -1,   -1,   -1,   -1,  345,  419,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  438,   -1,
  367,  368,   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,
   -1,  378,   -1,  380,  381,  382,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  391,   -1,   -1,   -1,  395,  396,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  406,
  407,   -1,   -1,   -1,   -1,   -1,  340,   -1,   -1,   -1,
   -1,  345,  419,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  438,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,
  374,   -1,  376,   -1,  378,   -1,  380,  381,  382,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  391,   -1,   -1,
   -1,   -1,  396,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  406,  407,   -1,   -1,   -1,   -1,   -1,  340,
   -1,   -1,   -1,   -1,  345,  419,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  438,   -1,  367,  368,   -1,   -1,
   -1,   -1,   -1,  374,   -1,  376,   -1,  378,   -1,  380,
  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  396,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,  406,  407,   -1,   -1,   -1,
   -1,   -1,  340,   -1,   -1,   -1,   -1,  345,  419,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  438,   -1,  367,
  368,   -1,   -1,   -1,   -1,   -1,  374,   -1,  376,   -1,
  378,   -1,  380,  381,  382,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  406,  407,
   -1,   -1,   -1,   -1,   -1,  340,   -1,   -1,   -1,   -1,
  345,  419,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  438,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,  374,
   -1,  376,   -1,  378,   -1,  380,  381,  382,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,  396,   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,
  267,   -1,  407,  270,   -1,  272,  273,   -1,  275,   -1,
   -1,  278,   -1,  280,  419,  282,  283,  284,  285,   -1,
   -1,  288,  289,   -1,  286,   -1,   -1,  294,   -1,  296,
  297,  298,   -1,  438,  301,   -1,  303,  299,  305,   -1,
   -1,  308,   -1,  310,  311,  312,  313,  314,   -1,   -1,
  317,  318,  319,  262,   -1,  322,  323,  324,   -1,   -1,
   -1,   -1,   -1,   -1,  331,  332,  328,  334,  335,   -1,
  337,  338,  339,   -1,   -1,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  299,   -1,   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,   -1,
  377,   -1,   -1,   -1,   -1,   -1,  383,   -1,   -1,   -1,
   -1,  383,  384,  385,  386,   -1,  388,  389,  390,  391,
  392,  393,  394,  395,   -1,   -1,  398,  399,  400,  401,
  402,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,  358,
   -1,   -1,   -1,   -1,   -1,   -1,  365,  424,   -1,   -1,
   -1,   -1,   -1,   -1,  431,  432,  375,   -1,  377,  378,
  379,  380,   -1,   -1,   -1,  384,  385,   -1,  387,  388,
  389,  390,  391,  392,  393,  394,  395,  396,   -1,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,   -1,   -1,  256,   -1,  424,   -1,  426,   -1,   -1,
  429,  264,  265,  266,  267,  268,   -1,  270,  271,  438,
  273,  274,  275,  276,  277,  278,  279,  280,   -1,   -1,
   -1,   -1,   -1,  286,   -1,  288,  289,  290,  291,  292,
  293,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,   -1,
  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,  315,   -1,  317,   -1,  319,  320,   -1,   -1,
  323,   -1,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,   -1,  338,   -1,   -1,  341,  342,
   -1,   -1,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,  362,
  363,  364,   -1,   -1,  367,  368,  369,   -1,   -1,   -1,
  373,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,  382,
  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,   -1,   -1,   -1,  398,  399,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  423,  424,  425,  426,  256,  428,   -1,  430,   -1,   -1,
   -1,   -1,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,  280,   -1,
   -1,   -1,   -1,   -1,  286,   -1,  288,  289,  290,  291,
  292,  293,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,
   -1,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,  315,   -1,  317,   -1,  319,  320,   -1,
   -1,  323,   -1,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,   -1,  338,   -1,   -1,  341,
  342,   -1,   -1,  345,  346,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,
  362,  363,  364,   -1,   -1,  367,  368,  369,   -1,   -1,
   -1,  373,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,
  382,  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,
  392,   -1,   -1,   -1,   -1,   -1,  398,  399,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  423,  424,  425,  426,  256,   -1,   -1,  430,   -1,
   -1,   -1,   -1,  264,  265,  266,  267,   -1,   -1,  270,
  271,   -1,  273,  274,  275,  276,  277,  278,  279,  280,
   -1,   -1,   -1,   -1,   -1,  286,   -1,  288,  289,  290,
  291,  292,  293,   -1,   -1,  296,   -1,   -1,   -1,  300,
  301,   -1,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,  315,   -1,  317,   -1,  319,  320,
   -1,   -1,  323,   -1,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,   -1,  338,   -1,   -1,
  341,  342,   -1,   -1,  345,  346,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
  361,  362,  363,  364,   -1,   -1,  367,  368,  369,   -1,
   -1,   -1,  373,   -1,   -1,   -1,  377,   -1,   -1,   -1,
   -1,  382,  383,  384,  385,  386,   -1,   -1,   -1,  390,
   -1,  392,   -1,   -1,   -1,   -1,   -1,  398,  399,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  423,  424,  425,  426,  256,   -1,   -1,  430,
   -1,   -1,   -1,   -1,  264,  265,  266,  267,   -1,   -1,
  270,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
  280,   -1,   -1,   -1,   -1,   -1,  286,   -1,  288,  289,
  290,  291,  292,  293,   -1,   -1,  296,   -1,   -1,   -1,
  300,  301,   -1,  303,  304,  305,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  314,  315,   -1,  317,   -1,  319,
  320,   -1,   -1,  323,   -1,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,   -1,  338,   -1,
   -1,  341,  342,   -1,   -1,  345,  346,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  360,  361,  362,  363,  364,   -1,   -1,  367,  368,  369,
   -1,   -1,   -1,  373,   -1,   -1,   -1,  377,   -1,   -1,
   -1,   -1,  382,  383,  384,  385,  386,   -1,   -1,   -1,
  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,  398,  399,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  423,  424,  425,  426,  256,   -1,   -1,
  430,   -1,   -1,   -1,   -1,  264,  265,  266,  267,   -1,
   -1,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,  280,   -1,   -1,   -1,   -1,   -1,  286,   -1,  288,
  289,  290,  291,  292,  293,   -1,   -1,  296,   -1,   -1,
   -1,  300,  301,   -1,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,  317,   -1,
  319,  320,   -1,   -1,  323,   -1,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,   -1,  338,
   -1,   -1,  341,  342,   -1,   -1,  345,  346,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,  361,  362,  363,  364,   -1,   -1,  367,  368,
  369,   -1,   -1,   -1,  373,   -1,   -1,   -1,  377,   -1,
   -1,   -1,   -1,  382,  383,  384,  385,  386,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,  398,
  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  423,  424,  425,  426,   -1,  264,
  265,  430,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,   -1,  280,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,  303,  304,
  305,   -1,  307,   -1,   -1,   -1,   -1,   -1,   -1,  314,
   -1,   -1,  317,   -1,  319,  320,   -1,   -1,  323,   -1,
   -1,  326,   -1,  328,   -1,  330,  331,  332,  333,   -1,
  335,   -1,   -1,   -1,   -1,   -1,   -1,  342,   -1,   -1,
  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,  361,  362,  363,  364,
   -1,   -1,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,   -1,  380,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,
   -1,   -1,   -1,  398,  399,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  423,  424,
  425,  426,   -1,  264,  265,  430,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,   -1,  280,
   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,
   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,
  301,   -1,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,   -1,   -1,  317,   -1,  319,  320,
  321,   -1,  323,   -1,   -1,  326,   -1,  328,   -1,  330,
  331,  332,  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,
   -1,  342,   -1,   -1,  345,  346,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
  361,  362,  363,  364,   -1,   -1,  367,  368,  369,   -1,
   -1,   -1,  373,   -1,   -1,   -1,  377,   -1,   -1,   -1,
   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,  390,
   -1,  392,   -1,   -1,   -1,   -1,   -1,  398,  399,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,  423,  424,  425,  426,   -1,  264,  265,  430,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,
   -1,   -1,   -1,   -1,  301,   -1,  303,  304,  305,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  317,   -1,  319,  320,  321,   -1,  323,   -1,   -1,  326,
  327,  328,   -1,  330,  331,  332,  333,   -1,  335,   -1,
   -1,   -1,   -1,   -1,   -1,  342,   -1,   -1,  345,  346,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  360,  361,  362,  363,  364,   -1,   -1,
  367,  368,  369,   -1,   -1,   -1,   -1,  374,   -1,   -1,
  377,   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,
   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,
   -1,  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  423,  424,  425,  426,
   -1,  264,  265,  430,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,   -1,  280,   -1,   -1,
   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,
  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,   -1,  319,  320,   -1,   -1,
  323,   -1,   -1,  326,   -1,  328,   -1,  330,  331,  332,
  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,  342,
   -1,   -1,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,  362,
  363,  364,   -1,   -1,  367,  368,  369,   -1,   -1,   -1,
  373,  374,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,
  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,   -1,   -1,   -1,  398,  399,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
  423,  424,  425,  426,   -1,  264,  265,  430,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,   -1,  301,   -1,  303,  304,  305,   -1,  307,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,   -1,  317,   -1,
  319,  320,   -1,   -1,  323,   -1,   -1,  326,   -1,  328,
   -1,  330,  331,  332,  333,   -1,  335,   -1,   -1,   -1,
   -1,   -1,   -1,  342,   -1,   -1,  345,  346,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,  361,  362,  363,  364,   -1,   -1,  367,  368,
  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,
   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,  398,
  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  423,  424,  425,  426,   -1,  264,
  265,  430,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,   -1,  280,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,  303,  304,
  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
   -1,   -1,  317,   -1,  319,  320,   -1,   -1,  323,   -1,
   -1,  326,   -1,  328,   -1,  330,  331,  332,  333,   -1,
  335,   -1,   -1,   -1,   -1,   -1,   -1,  342,   -1,   -1,
  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,  361,  362,  363,  364,
   -1,   -1,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,
   -1,   -1,   -1,  398,  399,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  423,  424,
  425,  426,   -1,  264,  265,  430,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,   -1,  280,
   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,
   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,
  301,   -1,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  317,   -1,  319,  320,
   -1,   -1,  323,   -1,   -1,  326,   -1,  328,   -1,  330,
  331,  332,  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,
   -1,  342,   -1,   -1,  345,  346,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
  361,  362,  363,  364,   -1,   -1,  367,  368,  369,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,
   -1,  382,  383,  384,  385,  386,   -1,   -1,   -1,  390,
   -1,  392,   -1,   -1,   -1,   -1,   -1,  398,  399,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,  423,  424,  425,  426,   -1,  264,  265,  430,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,
   -1,   -1,   -1,   -1,  301,   -1,  303,  304,  305,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  317,   -1,  319,  320,   -1,   -1,  323,   -1,   -1,  326,
   -1,  328,   -1,  330,  331,  332,  333,   -1,  335,   -1,
   -1,  338,   -1,   -1,   -1,  342,   -1,   -1,  345,  346,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  360,  361,  362,  363,  364,   -1,   -1,
  367,  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  377,   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,
   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,
   -1,  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  423,  424,  425,  426,
   -1,  264,  265,  430,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,   -1,  280,   -1,   -1,
   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,
  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,   -1,  319,  320,   -1,   -1,
  323,   -1,   -1,  326,   -1,  328,   -1,  330,  331,  332,
  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,  342,
   -1,   -1,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,  362,
  363,  364,   -1,   -1,  367,  368,  369,   -1,   -1,   -1,
  373,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,
  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,   -1,   -1,   -1,  398,  399,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
  423,  424,  425,  426,   -1,  264,  265,  430,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,   -1,  301,   -1,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,   -1,
  319,  320,   -1,   -1,  323,   -1,   -1,  326,   -1,  328,
   -1,  330,  331,  332,  333,   -1,  335,   -1,   -1,   -1,
   -1,   -1,   -1,  342,   -1,   -1,  345,  346,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,  361,  362,  363,  364,   -1,   -1,  367,  368,
  369,   -1,   -1,   -1,   -1,  374,   -1,   -1,  377,   -1,
   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,  398,
  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  423,  424,  425,  426,   -1,  264,
  265,  430,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,   -1,  280,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,  303,  304,
  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  317,   -1,  319,  320,   -1,   -1,  323,   -1,
   -1,  326,   -1,  328,   -1,  330,  331,  332,  333,   -1,
  335,   -1,   -1,  338,   -1,   -1,   -1,  342,   -1,   -1,
  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,  361,  362,  363,  364,
   -1,   -1,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,
   -1,   -1,   -1,  398,  399,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  423,  424,
  425,  426,   -1,  264,  265,  430,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,   -1,  280,
   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,
   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,
  301,   -1,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  317,   -1,  319,  320,
   -1,   -1,  323,   -1,   -1,  326,   -1,  328,   -1,  330,
  331,  332,  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,
   -1,  342,   -1,   -1,  345,  346,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
  361,  362,  363,  364,   -1,   -1,  367,  368,  369,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,
   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,  390,
   -1,  392,   -1,   -1,   -1,   -1,   -1,  398,  399,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,  423,  424,  425,  426,   -1,  264,  265,  430,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,
   -1,   -1,   -1,   -1,  301,   -1,  303,  304,  305,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  317,   -1,  319,  320,   -1,   -1,  323,   -1,   -1,  326,
   -1,  328,   -1,  330,  331,  332,  333,   -1,  335,   -1,
   -1,   -1,   -1,   -1,   -1,  342,   -1,   -1,  345,  346,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  360,  361,  362,  363,  364,   -1,   -1,
  367,  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  377,   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,
   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,
   -1,  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  423,  424,  425,  426,
   -1,  264,  265,  430,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,   -1,  280,   -1,   -1,
   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,
  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,   -1,  319,  320,   -1,   -1,
  323,   -1,   -1,  326,   -1,  328,   -1,  330,  331,  332,
  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,  342,
   -1,   -1,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,  362,
  363,  364,   -1,   -1,  367,  368,  369,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,
  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,   -1,   -1,   -1,  398,  399,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
  423,  424,  425,  426,   -1,  264,  265,  430,  267,   -1,
   -1,  270,  271,   -1,  256,   -1,  275,  276,  277,  278,
   -1,  280,   -1,  265,   -1,  267,   -1,  286,  270,   -1,
  289,   -1,   -1,  275,   -1,   -1,   -1,  296,  280,   -1,
   -1,   -1,  301,   -1,  303,  304,  305,  289,   -1,   -1,
   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,  317,  301,
  319,  320,   -1,  305,  323,   -1,   -1,  326,   -1,  328,
   -1,  330,  331,  332,  333,  317,  335,  319,   -1,   -1,
   -1,  323,   -1,  342,   -1,   -1,  345,  346,   -1,  331,
  332,   -1,   -1,  335,   -1,   -1,  338,   -1,   -1,   -1,
   -1,  360,  361,  362,  363,  364,   -1,   -1,  367,  368,
  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,
   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,
   -1,  390,   -1,  392,   -1,  377,   -1,   -1,   -1,  398,
  399,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,   -1,  280,  423,  424,  425,  426,  265,  286,
  267,  430,  289,  270,   -1,   -1,   -1,   -1,  275,  296,
   -1,   -1,  424,  280,  301,   -1,  303,  304,  305,   -1,
   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  317,   -1,  319,  320,  301,   -1,  323,   -1,  305,  326,
   -1,  328,   -1,  330,  331,  332,  333,  314,  335,   -1,
  317,   -1,  319,   -1,   -1,  342,  323,   -1,  345,  346,
   -1,   -1,   -1,   -1,  331,  332,   -1,   -1,  335,   -1,
   -1,  338,   -1,  360,  361,  362,  363,  364,   -1,   -1,
  367,  368,  369,   -1,   -1,   -1,  373,  374,   -1,   -1,
  377,   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,
   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,
  377,  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,   -1,  280,  423,  424,  425,  426,
   -1,  286,  429,   -1,  289,   -1,   -1,   -1,   -1,   -1,
  437,  296,   -1,   -1,   -1,   -1,  301,  424,  303,  304,
  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  317,   -1,  319,  320,   -1,   -1,  323,   -1,
   -1,  326,   -1,  328,   -1,  330,  331,  332,  333,   -1,
  335,   -1,   -1,   -1,   -1,   -1,   -1,  342,   -1,   -1,
  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,  361,  362,  363,  364,
   -1,   -1,  367,  368,  369,   -1,   -1,   -1,  373,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,
   -1,   -1,   -1,  398,  399,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  423,  424,
  425,  426,   -1,   -1,  429,  261,   -1,  263,   -1,  265,
   -1,  267,  437,   -1,  270,   -1,  272,  273,   -1,  275,
   -1,   -1,  278,   -1,  280,   -1,  282,  283,  284,  285,
   -1,   -1,  288,  289,   -1,   -1,   -1,   -1,  294,  295,
  296,  297,  298,   -1,   -1,  301,   -1,  303,   -1,  305,
   -1,  307,  308,   -1,  310,  311,  312,  313,  314,   -1,
  316,  317,  318,  319,   -1,   -1,  322,  323,  324,   -1,
   -1,   -1,   -1,   -1,   -1,  331,  332,   -1,  334,  335,
   -1,  337,  338,  339,   -1,   -1,   -1,  343,   -1,  261,
   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,   -1,   -1,  278,  363,  280,   -1,
  282,  283,  284,  285,  370,  371,  288,  289,   -1,   -1,
   -1,  377,  294,   -1,  296,  297,  298,   -1,   -1,  301,
   -1,  303,   -1,  305,   -1,   -1,  308,   -1,  310,  311,
  312,  313,  314,   -1,   -1,  317,  318,  319,   -1,   -1,
  322,  323,  324,   -1,   -1,   -1,   -1,   -1,   -1,  331,
  332,   -1,  334,  335,   -1,  337,  338,  339,  424,   -1,
   -1,  343,   -1,  261,   -1,  431,  432,  265,   -1,  267,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,   -1,   -1,
  278,  363,  280,   -1,  282,  283,  284,  285,   -1,   -1,
  288,  289,  374,   -1,   -1,  377,  294,   -1,  296,  297,
  298,  383,   -1,  301,   -1,  303,   -1,  305,   -1,   -1,
  308,   -1,  310,  311,  312,  313,  314,   -1,   -1,  317,
  318,  319,   -1,   -1,  322,  323,  324,   -1,   -1,   -1,
   -1,   -1,   -1,  331,  332,   -1,  334,  335,   -1,  337,
  338,  339,  424,   -1,   -1,  343,   -1,  261,   -1,  431,
  432,  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,   -1,   -1,  278,  363,  280,   -1,  282,  283,
  284,  285,   -1,   -1,  288,  289,  374,   -1,   -1,  377,
  294,   -1,  296,  297,  298,  383,   -1,  301,   -1,  303,
   -1,  305,   -1,   -1,  308,   -1,  310,  311,  312,  313,
  314,   -1,   -1,  317,  318,  319,   -1,   -1,  322,  323,
  324,   -1,   -1,   -1,   -1,   -1,   -1,  331,  332,   -1,
  334,  335,   -1,  337,  338,  339,  424,   -1,   -1,  343,
   -1,  261,   -1,  431,  432,  265,   -1,  267,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,   -1,   -1,  278,  363,
  280,   -1,  282,  283,  284,  285,   -1,   -1,  288,  289,
   -1,   -1,   -1,  377,  294,   -1,  296,  297,  298,  383,
   -1,  301,   -1,  303,   -1,  305,   -1,   -1,  308,   -1,
  310,  311,  312,  313,  314,   -1,   -1,  317,  318,  319,
   -1,   -1,  322,  323,  324,   -1,   -1,   -1,   -1,   -1,
   -1,  331,  332,   -1,  334,  335,   -1,  337,  338,  339,
  424,   -1,   -1,  343,   -1,  261,   -1,  431,  432,  265,
   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
   -1,   -1,  278,  363,  280,   -1,  282,  283,  284,  285,
   -1,   -1,  288,  289,  374,   -1,   -1,  377,  294,   -1,
  296,  297,  298,   -1,   -1,  301,   -1,  303,   -1,  305,
   -1,   -1,  308,  261,  310,  311,  312,  313,  314,   -1,
   -1,  317,  318,  319,  272,   -1,  322,  323,  324,   -1,
  278,   -1,   -1,   -1,  282,  331,  332,  285,  334,  335,
   -1,  337,  338,  339,  424,   -1,   -1,  343,   -1,  297,
  298,  431,  432,   -1,  302,  303,   -1,   -1,   -1,   -1,
  308,   -1,  310,  311,  312,  313,   -1,  363,   -1,   -1,
  318,   -1,   -1,   -1,  322,   -1,  324,   -1,  374,   -1,
   -1,  377,   -1,   -1,   -1,   -1,  334,   -1,  336,  337,
   -1,  339,   -1,   -1,   -1,  343,  261,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,   -1,   -1,
   -1,   -1,   -1,  278,   -1,  363,   -1,  282,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,  374,  375,  424,   -1,
   -1,   -1,  297,  298,   -1,  431,  432,  302,  303,   -1,
   -1,   -1,   -1,  308,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,  318,   -1,   -1,   -1,  322,   -1,  324,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,
   -1,  256,  337,   -1,  339,   -1,   -1,  262,  343,  264,
  265,   -1,  267,  431,  432,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,   -1,  280,   -1,   -1,  363,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  374,
  375,  296,   -1,   -1,  299,   -1,  301,   -1,  303,  304,
  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  317,   -1,  319,  320,   -1,   -1,  323,   -1,
   -1,  326,   -1,  328,   -1,  330,  331,  332,  333,   -1,
  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  344,
   -1,   -1,   -1,   -1,   -1,   -1,  431,  432,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,  361,  362,  363,  364,
   -1,   -1,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,  379,   -1,   -1,   -1,  383,  384,
  385,  386,  387,   -1,   -1,  390,   -1,  392,   -1,   -1,
  256,   -1,   -1,  398,  399,   -1,  262,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  278,   -1,  280,   -1,   -1,   -1,  423,  424,
  286,  426,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,
  296,   -1,   -1,  299,   -1,  301,   -1,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  317,   -1,  319,  320,   -1,   -1,  323,   -1,   -1,
  326,   -1,  328,   -1,  330,  331,  332,  333,   -1,  335,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  360,  361,  362,  363,  364,   -1,
   -1,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  377,   -1,  379,   -1,   -1,   -1,  383,  384,  385,
  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,  256,
   -1,   -1,  398,  399,   -1,  262,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,   -1,  280,   -1,   -1,   -1,  423,  424,  286,
  426,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,
   -1,   -1,  299,   -1,  301,   -1,  303,  304,  305,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  317,   -1,  319,  320,   -1,   -1,  323,   -1,   -1,  326,
   -1,  328,   -1,  330,  331,  332,  333,   -1,  335,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  360,  361,  362,  363,  364,   -1,   -1,
  367,  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  377,   -1,  379,   -1,   -1,   -1,  383,  384,  385,  386,
   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,  256,   -1,
   -1,  398,  399,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
  278,   -1,  280,   -1,   -1,   -1,  423,  424,  286,  426,
   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,
   -1,   -1,   -1,  301,   -1,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,
   -1,  319,  320,   -1,   -1,  323,   -1,   -1,  326,   -1,
  328,   -1,  330,  331,  332,  333,   -1,  335,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  360,  361,  362,  363,  364,   -1,   -1,  367,
  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,
   -1,  379,   -1,   -1,   -1,  383,  384,  385,  386,   -1,
   -1,   -1,  390,   -1,  392,   -1,   -1,  256,   -1,   -1,
  398,  399,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
   -1,  280,   -1,   -1,   -1,  423,  424,  286,  426,   -1,
  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,   -1,  301,   -1,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,   -1,
  319,  320,   -1,   -1,  323,   -1,   -1,  326,   -1,  328,
   -1,  330,  331,  332,  333,   -1,  335,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,  361,  362,  363,  364,   -1,   -1,  367,  368,
  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,
   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,  256,   -1,   -1,  398,
  399,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,   -1,
  280,   -1,   -1,   -1,  423,  424,  286,  426,   -1,  289,
   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,
   -1,  301,   -1,  303,  304,  305,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,   -1,  319,
  320,   -1,   -1,  323,   -1,   -1,  326,   -1,  328,   -1,
  330,  331,  332,  333,   -1,  335,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  360,  361,  362,  363,  364,   -1,   -1,  367,  368,  369,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,
   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,
  390,   -1,  392,   -1,   -1,  256,   -1,   -1,  398,  399,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,   -1,  280,
   -1,   -1,   -1,  423,  424,  286,  426,   -1,  289,   -1,
   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,
  301,   -1,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  317,   -1,  319,  320,
   -1,   -1,  323,   -1,   -1,  326,   -1,  328,   -1,  330,
  331,  332,  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
  361,  362,  363,  364,   -1,   -1,  367,  368,  369,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,
   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,  390,
   -1,  392,   -1,   -1,  256,   -1,   -1,  398,  399,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,  278,   -1,  280,   -1,
   -1,   -1,  423,  424,  286,  426,   -1,  289,   -1,   -1,
   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,  301,
   -1,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  317,   -1,  319,  320,   -1,
   -1,  323,   -1,   -1,  326,   -1,  328,   -1,  330,  331,
  332,  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,
  362,  363,  364,   -1,   -1,  367,  368,  369,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,
   -1,  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,
  392,   -1,   -1,  256,   -1,   -1,  398,  399,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,   -1,  280,   -1,   -1,
   -1,  423,  424,  286,  426,   -1,  289,   -1,   -1,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,
  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,   -1,  319,  320,   -1,   -1,
  323,   -1,   -1,  326,   -1,  328,   -1,  330,  331,  332,
  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,  362,
  363,  364,   -1,   -1,  367,  368,  369,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,
  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,  256,   -1,   -1,  398,  399,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,  278,   -1,  280,   -1,   -1,   -1,
  423,  424,  286,  426,   -1,  289,   -1,   -1,   -1,   -1,
   -1,   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,  303,
  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  317,   -1,  319,  320,   -1,   -1,  323,
   -1,   -1,  326,   -1,  328,   -1,  330,  331,  332,  333,
   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,  362,  363,
  364,   -1,   -1,  367,  368,  369,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,
  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,
   -1,  256,   -1,   -1,  398,  399,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,   -1,  280,   -1,   -1,   -1,  423,
  424,  286,  426,   -1,  289,   -1,   -1,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,  303,  304,
  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  317,   -1,  319,  320,   -1,   -1,  323,   -1,
   -1,  326,   -1,  328,   -1,  330,  331,  332,  333,   -1,
  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,  361,  362,  363,  364,
   -1,   -1,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,
  256,   -1,   -1,  398,  399,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  278,   -1,  280,   -1,   -1,   -1,  423,  424,
  286,  426,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,
  296,   -1,   -1,   -1,   -1,  301,   -1,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  317,   -1,  319,  320,   -1,   -1,  323,   -1,   -1,
  326,   -1,  328,   -1,  330,  331,  332,  333,   -1,  335,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  360,  361,  362,  363,  364,   -1,
   -1,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,  385,
  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,  256,
   -1,   -1,  398,  399,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,   -1,  280,   -1,   -1,   -1,  423,  424,  286,
  426,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,
   -1,   -1,   -1,   -1,  301,   -1,  303,  304,  305,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  317,   -1,  319,  320,   -1,   -1,  323,   -1,   -1,  326,
   -1,  328,   -1,  330,  331,  332,  333,   -1,  335,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  360,  361,  362,  363,  364,   -1,   -1,
  367,  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  377,   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,
   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,  256,   -1,
   -1,  398,  399,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
  278,   -1,  280,   -1,   -1,   -1,  423,  424,  286,  426,
   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,
   -1,   -1,   -1,  301,   -1,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,
   -1,  319,  320,   -1,   -1,  323,   -1,   -1,  326,   -1,
  328,   -1,  330,  331,  332,  333,   -1,  335,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  360,  361,  362,  363,  364,   -1,   -1,  367,
  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,
   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,
   -1,   -1,  390,   -1,  392,   -1,   -1,  256,   -1,   -1,
  398,  399,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
   -1,  280,   -1,   -1,   -1,  423,  424,  286,  426,   -1,
  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,   -1,  301,   -1,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,   -1,
  319,  320,   -1,   -1,  323,   -1,   -1,  326,   -1,  328,
   -1,  330,  331,  332,  333,   -1,  335,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,  361,  362,  363,  364,   -1,   -1,  367,  368,
  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,
   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,  256,   -1,   -1,  398,
  399,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,   -1,
  280,   -1,   -1,   -1,  423,  424,  286,  426,   -1,  289,
   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,
   -1,  301,   -1,  303,  304,  305,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,   -1,  319,
  320,   -1,   -1,  323,   -1,   -1,  326,   -1,  328,   -1,
  330,  331,  332,  333,   -1,  335,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  360,  361,  362,  363,  364,   -1,   -1,  367,  368,  369,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,
   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,
  390,   -1,  392,   -1,   -1,  256,   -1,   -1,  398,  399,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,   -1,  280,
   -1,   -1,   -1,  423,  424,  286,  426,   -1,  289,   -1,
   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,
  301,   -1,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  317,   -1,  319,  320,
   -1,   -1,  323,   -1,   -1,  326,   -1,  328,   -1,  330,
  331,  332,  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
  361,  362,  363,  364,   -1,   -1,  367,  368,  369,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,
   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,  390,
   -1,  392,   -1,   -1,  256,   -1,   -1,  398,  399,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,  278,   -1,  280,   -1,
   -1,   -1,  423,  424,  286,  426,   -1,  289,   -1,   -1,
   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,  301,
   -1,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  317,   -1,  319,  320,   -1,
   -1,  323,   -1,   -1,  326,   -1,  328,   -1,  330,  331,
  332,  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,
  362,  363,  364,   -1,   -1,  367,  368,  369,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,
   -1,  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,
  392,   -1,   -1,  256,   -1,   -1,  398,  399,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,   -1,  280,   -1,   -1,
   -1,  423,  424,  286,  426,   -1,  289,   -1,   -1,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,
  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,   -1,  319,  320,   -1,   -1,
  323,   -1,   -1,  326,   -1,  328,   -1,  330,  331,  332,
  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,  362,
  363,  364,   -1,   -1,  367,  368,  369,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,
  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,  256,   -1,   -1,  398,  399,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,  278,   -1,  280,   -1,   -1,   -1,
  423,  424,  286,  426,   -1,  289,   -1,   -1,   -1,   -1,
   -1,   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,  303,
  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  317,   -1,  319,  320,   -1,   -1,  323,
   -1,   -1,  326,   -1,  328,   -1,  330,  331,  332,  333,
   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,  362,  363,
  364,   -1,   -1,  367,  368,  369,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,
  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,
   -1,  256,   -1,   -1,  398,  399,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,   -1,  280,   -1,   -1,   -1,  423,
  424,  286,  426,   -1,  289,   -1,   -1,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,  303,  304,
  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  317,   -1,  319,  320,   -1,   -1,  323,   -1,
   -1,  326,   -1,  328,   -1,  330,  331,  332,  333,   -1,
  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,  361,  362,  363,  364,
   -1,   -1,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,
  256,   -1,   -1,  398,  399,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  278,   -1,  280,   -1,   -1,   -1,  423,  424,
  286,  426,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,
  296,   -1,   -1,   -1,   -1,  301,   -1,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  317,   -1,  319,  320,   -1,   -1,  323,   -1,   -1,
  326,   -1,  328,   -1,  330,  331,  332,  333,   -1,  335,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  360,  361,  362,  363,  364,   -1,
   -1,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,  385,
  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,  256,
   -1,   -1,  398,  399,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,   -1,  280,   -1,   -1,   -1,  423,  424,  286,
  426,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,
   -1,   -1,   -1,   -1,  301,   -1,  303,  304,  305,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  317,   -1,  319,  320,   -1,   -1,  323,   -1,   -1,  326,
   -1,  328,   -1,  330,  331,  332,  333,   -1,  335,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  360,  361,  362,  363,  364,   -1,   -1,
  367,  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  377,   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,
   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,  256,   -1,
   -1,  398,  399,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
  278,   -1,  280,   -1,   -1,   -1,  423,  424,  286,  426,
   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,
   -1,   -1,   -1,  301,   -1,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,
   -1,  319,  320,   -1,   -1,  323,   -1,   -1,  326,   -1,
  328,   -1,  330,  331,  332,  333,   -1,  335,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  360,  361,  362,  363,  364,   -1,   -1,  367,
  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,
   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,
   -1,   -1,  390,   -1,  392,   -1,   -1,  256,   -1,   -1,
  398,  399,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
   -1,  280,   -1,   -1,   -1,  423,  424,  286,  426,   -1,
  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,   -1,  301,   -1,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,   -1,
  319,  320,   -1,   -1,  323,   -1,   -1,  326,   -1,  328,
   -1,  330,  331,  332,  333,   -1,  335,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,  361,  362,  363,  364,   -1,   -1,  367,  368,
  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,
   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,  256,   -1,   -1,  398,
  399,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,   -1,
  280,   -1,   -1,   -1,  423,  424,  286,  426,   -1,  289,
   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,
   -1,  301,   -1,  303,  304,  305,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,   -1,  319,
  320,   -1,   -1,  323,   -1,   -1,  326,   -1,  328,   -1,
  330,  331,  332,  333,   -1,  335,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  360,  361,  362,  363,  364,   -1,   -1,  367,  368,  369,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,
   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,
  390,   -1,  392,   -1,   -1,  256,   -1,   -1,  398,  399,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,   -1,  280,
   -1,   -1,   -1,  423,  424,  286,  426,   -1,  289,   -1,
   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,
  301,   -1,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  317,   -1,  319,  320,
   -1,   -1,  323,   -1,   -1,  326,   -1,  328,   -1,  330,
  331,  332,  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
  361,  362,  363,  364,   -1,   -1,  367,  368,  369,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,
   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,  390,
   -1,  392,   -1,   -1,  256,   -1,   -1,  398,  399,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,  278,   -1,  280,   -1,
   -1,   -1,  423,  424,  286,  426,   -1,  289,   -1,   -1,
   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,  301,
   -1,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  317,   -1,  319,  320,   -1,
   -1,  323,   -1,   -1,  326,   -1,  328,   -1,  330,  331,
  332,  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,
  362,  363,  364,   -1,   -1,  367,  368,  369,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,
   -1,  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,
  392,   -1,   -1,  256,   -1,   -1,  398,  399,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,   -1,  280,   -1,   -1,
   -1,  423,  424,  286,  426,   -1,  289,   -1,   -1,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,
  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,   -1,  319,  320,   -1,   -1,
  323,   -1,   -1,  326,   -1,  328,   -1,  330,  331,  332,
  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,  362,
  363,  364,   -1,   -1,  367,  368,  369,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,
  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,  256,   -1,   -1,  398,  399,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,  278,   -1,  280,   -1,   -1,   -1,
  423,  424,  286,  426,   -1,  289,   -1,   -1,   -1,   -1,
   -1,   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,  303,
  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  317,   -1,  319,  320,   -1,   -1,  323,
   -1,   -1,  326,   -1,  328,   -1,  330,  331,  332,  333,
   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,  362,  363,
  364,   -1,   -1,  367,  368,  369,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,
  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,
   -1,  256,   -1,   -1,  398,  399,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,   -1,  280,   -1,   -1,   -1,  423,
  424,  286,  426,   -1,  289,   -1,   -1,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,  303,  304,
  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  317,   -1,  319,  320,   -1,   -1,  323,   -1,
   -1,  326,   -1,  328,   -1,  330,  331,  332,  333,   -1,
  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,  361,  362,  363,  364,
   -1,   -1,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,
  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,
  256,   -1,   -1,  398,  399,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  278,   -1,  280,   -1,   -1,   -1,  423,  424,
  286,  426,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,
  296,   -1,   -1,   -1,   -1,  301,   -1,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  317,   -1,  319,  320,   -1,   -1,  323,   -1,   -1,
  326,   -1,  328,   -1,  330,  331,  332,  333,   -1,  335,
   -1,   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  360,  361,  362,  363,  364,   -1,
   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  377,   -1,  263,   -1,  265,   -1,  267,  384,  385,
  270,   -1,  272,  273,   -1,  275,  392,   -1,  278,   -1,
  280,   -1,  282,  283,  284,   -1,   -1,   -1,  288,  289,
   -1,   -1,   -1,   -1,  294,   -1,  296,  297,   -1,   -1,
   -1,  301,   -1,   -1,   -1,  305,   -1,  423,  424,   -1,
  426,   -1,   -1,   -1,  314,   -1,  316,  317,   -1,  319,
   -1,   -1,   -1,  323,  324,   -1,   -1,   -1,   -1,   -1,
   -1,  331,  332,  256,   -1,  335,   -1,   -1,  338,   -1,
   -1,  264,  265,  343,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,   -1,  280,   -1,   -1,
   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,
  370,  371,   -1,  296,   -1,   -1,   -1,  377,  301,   -1,
  303,  304,  305,  383,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,   -1,  319,  320,   -1,   -1,
  323,   -1,  256,  326,   -1,  328,   -1,  330,  331,  332,
  333,  265,  335,  267,   -1,   -1,  270,   -1,   -1,   -1,
   -1,  275,   -1,   -1,  424,   -1,  280,   -1,   -1,   -1,
   -1,  431,  432,   -1,   -1,  289,   -1,  360,  361,  362,
  363,  364,  296,   -1,  367,  368,   -1,  301,   -1,   -1,
   -1,  305,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  317,   -1,  319,   -1,   -1,   -1,  323,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  331,  332,   -1,
  265,  335,  267,   -1,  338,  270,   -1,   -1,   -1,   -1,
  275,   -1,   -1,   -1,   -1,  280,   -1,   -1,   -1,   -1,
  423,  424,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,   -1,   -1,
  305,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  317,   -1,  319,   -1,   -1,   -1,  323,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  331,  332,   -1,  265,
  335,  267,   -1,  338,  270,   -1,  272,  273,   -1,  275,
   -1,   -1,  278,   -1,  280,   -1,  282,  283,  284,   -1,
  424,   -1,  288,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,  297,   -1,   -1,   -1,  301,   -1,   -1,   -1,  305,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  314,   -1,
   -1,  317,   -1,  319,   -1,   -1,   -1,  323,  324,   -1,
   -1,   -1,   -1,   -1,   -1,  331,  332,   -1,   -1,  335,
   -1,   -1,  338,  265,   -1,  267,   -1,  343,  270,   -1,
  272,  273,   -1,  275,   -1,   -1,  278,   -1,  280,  424,
  282,  283,  284,   -1,   -1,   -1,  288,  289,   -1,   -1,
   -1,   -1,  294,   -1,  296,  297,   -1,   -1,   -1,  301,
   -1,  377,   -1,  305,   -1,   -1,   -1,  383,   -1,   -1,
   -1,   -1,  314,   -1,   -1,  317,   -1,  319,   -1,   -1,
   -1,  323,  324,   -1,   -1,   -1,   -1,   -1,   -1,  331,
  332,   -1,   -1,  335,   -1,   -1,  338,   -1,   -1,   -1,
   -1,  343,   -1,   -1,   -1,   -1,  264,  265,  424,  267,
   -1,   -1,  270,  271,   -1,  431,  432,  275,  276,  277,
  278,   -1,  280,   -1,   -1,   -1,   -1,  265,  286,  267,
   -1,  289,  270,   -1,   -1,  377,   -1,  275,  296,   -1,
   -1,   -1,  280,  301,   -1,  303,  304,  305,   -1,  307,
   -1,  289,   -1,   -1,   -1,   -1,  314,   -1,  296,  317,
   -1,  319,  320,  301,   -1,  323,   -1,  305,  326,   -1,
  328,   -1,  330,  331,  332,  333,   -1,  335,   -1,  317,
   -1,  319,  424,   -1,  342,  323,   -1,  345,  346,  431,
  432,   -1,   -1,  331,  332,   -1,   -1,  335,   -1,   -1,
  338,   -1,  360,  361,  362,  363,  364,   -1,   -1,  367,
  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,
  378,   -1,  380,   -1,   -1,  383,  384,  385,  386,   -1,
   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,  376,  377,
  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  278,   -1,  280,  423,  424,  425,  426,  265,
  286,  267,  430,  289,  270,   -1,   -1,   -1,   -1,  275,
  296,   -1,   -1,   -1,  280,  301,  424,  303,  304,  305,
   -1,  307,   -1,  289,   -1,   -1,   -1,   -1,  314,   -1,
  296,  317,   -1,  319,  320,  301,   -1,  323,   -1,  305,
  326,   -1,  328,   -1,  330,  331,  332,  333,   -1,  335,
   -1,  317,   -1,  319,   -1,   -1,  342,  323,   -1,  345,
  346,   -1,   -1,   -1,   -1,  331,  332,   -1,   -1,  335,
   -1,   -1,  338,   -1,  360,  361,  362,  363,  364,   -1,
   -1,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  377,   -1,   -1,  380,   -1,   -1,  383,  384,  385,
  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,
   -1,  377,  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,  278,   -1,  280,  423,  424,  425,
  426,   -1,  286,   -1,  430,  289,   -1,   -1,   -1,   -1,
   -1,   -1,  296,   -1,   -1,   -1,   -1,  301,  424,  303,
  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,   -1,   -1,  317,   -1,  319,  320,  321,   -1,  323,
   -1,   -1,  326,   -1,  328,   -1,  330,  331,  332,  333,
   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,  342,   -1,
   -1,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,  362,  363,
  364,   -1,   -1,  367,  368,  369,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,
  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,
   -1,   -1,   -1,   -1,  398,  399,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,  278,   -1,  280,  423,
  424,  425,  426,  265,  286,  267,  430,  289,  270,   -1,
   -1,   -1,   -1,  275,  296,   -1,   -1,   -1,  280,  301,
   -1,  303,  304,  305,   -1,   -1,   -1,  289,   -1,   -1,
   -1,   -1,   -1,   -1,  296,  317,   -1,  319,  320,  301,
   -1,  323,   -1,  305,  326,   -1,  328,   -1,  330,  331,
  332,  333,   -1,  335,   -1,  317,  338,  319,   -1,   -1,
  342,  323,   -1,  345,  346,   -1,   -1,   -1,   -1,  331,
  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  360,  361,
  362,  363,  364,   -1,   -1,  367,  368,  369,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,
   -1,  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,
  392,   -1,   -1,   -1,   -1,  377,  398,  399,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,   -1,
  280,  423,  424,  425,  426,  265,  286,  267,  430,  289,
  270,   -1,   -1,   -1,   -1,  275,  296,   -1,   -1,   -1,
  280,  301,  424,  303,  304,  305,   -1,   -1,   -1,  289,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  317,   -1,  319,
  320,  301,   -1,  323,   -1,  305,  326,   -1,  328,   -1,
  330,  331,  332,  333,   -1,  335,   -1,  317,  338,  319,
   -1,   -1,  342,  323,   -1,  345,  346,   -1,   -1,   -1,
   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,   -1,
  360,  361,  362,  363,  364,   -1,   -1,  367,  368,  369,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,
   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,
  390,   -1,  392,   -1,   -1,   -1,   -1,  377,  398,  399,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
  278,   -1,  280,  423,  424,  425,  426,  265,  286,  267,
  430,  289,  270,   -1,   -1,   -1,   -1,  275,  296,   -1,
   -1,   -1,  280,  301,  424,  303,  304,  305,   -1,   -1,
   -1,  289,   -1,   -1,   -1,   -1,  314,   -1,  296,  317,
   -1,  319,  320,  301,   -1,  323,   -1,  305,  326,   -1,
  328,   -1,  330,  331,  332,  333,   -1,  335,   -1,  317,
   -1,  319,   -1,   -1,  342,  323,   -1,  345,  346,   -1,
   -1,   -1,   -1,  331,  332,   -1,   -1,  335,   -1,   -1,
  338,   -1,  360,  361,  362,  363,  364,   -1,   -1,  367,
  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,
   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,
   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,  377,
  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  278,   -1,  280,  423,  424,  425,  426,  265,
  286,  267,  430,  289,  270,   -1,   -1,   -1,   -1,  275,
  296,   -1,   -1,   -1,  280,  301,  424,  303,  304,  305,
   -1,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,
  296,  317,   -1,  319,  320,  301,   -1,  323,   -1,  305,
  326,   -1,  328,   -1,  330,  331,  332,  333,   -1,  335,
   -1,  317,   -1,  319,   -1,   -1,  342,  323,   -1,  345,
  346,   -1,   -1,   -1,   -1,  331,  332,   -1,   -1,  335,
   -1,   -1,  338,   -1,  360,  361,  362,  363,  364,   -1,
   -1,  367,  368,  369,   -1,   -1,   -1,  373,   -1,   -1,
   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,  385,
  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,
   -1,  377,  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,  278,   -1,  280,  423,  424,  425,
  426,  265,  286,  267,  430,  289,  270,   -1,   -1,   -1,
   -1,  275,  296,   -1,   -1,   -1,  280,  301,  424,  303,
  304,  305,   -1,   -1,   -1,  289,   -1,   -1,   -1,   -1,
   -1,   -1,  296,  317,   -1,  319,  320,  301,   -1,  323,
   -1,  305,  326,   -1,  328,   -1,  330,  331,  332,  333,
   -1,  335,   -1,  317,   -1,  319,   -1,   -1,  342,  323,
   -1,  345,  346,   -1,   -1,   -1,   -1,  331,  332,   -1,
   -1,  335,   -1,   -1,  338,   -1,  360,  361,  362,  363,
  364,   -1,   -1,  367,  368,  369,   -1,   -1,   -1,  373,
   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,
  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,
   -1,   -1,   -1,  377,  398,  399,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,  278,   -1,  280,  423,
  424,  425,  426,  265,  286,  267,  430,  289,  270,   -1,
   -1,   -1,   -1,  275,  296,   -1,   -1,   -1,  280,  301,
  424,  303,  304,  305,   -1,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  314,   -1,  296,  317,   -1,  319,  320,  301,
   -1,  323,   -1,  305,  326,   -1,  328,   -1,  330,  331,
  332,  333,   -1,  335,   -1,  317,   -1,  319,   -1,   -1,
  342,  323,   -1,  345,  346,   -1,   -1,   -1,   -1,  331,
  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  360,  361,
  362,  363,  364,   -1,   -1,  367,  368,  369,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,
   -1,  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,
  392,   -1,   -1,   -1,   -1,  377,  398,  399,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,   -1,
  280,  423,  424,  425,  426,   -1,  286,   -1,  430,  289,
   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,
   -1,  301,  424,  303,  304,  305,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,   -1,  319,
  320,   -1,   -1,  323,   -1,   -1,  326,   -1,  328,   -1,
  330,  331,  332,  333,   -1,  335,   -1,   -1,   -1,   -1,
   -1,   -1,  342,   -1,   -1,  345,  346,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  360,  361,  362,  363,  364,   -1,   -1,  367,  368,  369,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,
   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,
  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,  398,  399,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
  278,   -1,  280,  423,  424,  425,  426,   -1,  286,   -1,
  430,  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,
   -1,   -1,   -1,  301,   -1,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,
   -1,  319,  320,   -1,   -1,  323,   -1,   -1,  326,   -1,
  328,   -1,  330,  331,  332,  333,   -1,  335,   -1,   -1,
   -1,   -1,   -1,   -1,  342,   -1,   -1,  345,  346,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  360,  361,  362,  363,  364,   -1,   -1,  367,
  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,
   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,
   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,
  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  278,   -1,  280,  423,  424,  425,  426,   -1,
  286,   -1,  430,  289,   -1,   -1,   -1,   -1,   -1,   -1,
  296,   -1,   -1,   -1,   -1,  301,   -1,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  317,   -1,  319,  320,   -1,   -1,  323,   -1,   -1,
  326,   -1,  328,   -1,  330,  331,  332,  333,   -1,  335,
   -1,   -1,   -1,   -1,   -1,   -1,  342,   -1,   -1,  345,
  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  360,  361,  362,  363,  364,   -1,
   -1,  367,  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,  384,  385,
  386,   -1,   -1,   -1,  390,   -1,  392,   -1,   -1,   -1,
   -1,   -1,  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,  278,   -1,  280,  423,  424,  425,
  426,   -1,  286,   -1,  430,  289,   -1,   -1,   -1,   -1,
   -1,   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,  303,
  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  317,   -1,  319,  320,   -1,   -1,  323,
   -1,   -1,  326,   -1,  328,   -1,  330,  331,  332,  333,
   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,  342,   -1,
   -1,  345,  346,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,  362,  363,
  364,   -1,   -1,  367,  368,  369,  261,   -1,   -1,   -1,
   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,  383,
  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,   -1,
  285,   -1,   -1,   -1,  398,  399,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  298,   -1,   -1,   -1,   -1,  303,   -1,
   -1,  306,   -1,  308,   -1,  310,  311,  312,  313,  423,
  424,  425,  426,  318,   -1,   -1,  430,  322,   -1,   -1,
   -1,  326,   -1,   -1,  264,  265,   -1,  267,   -1,  334,
  270,  271,  337,   -1,  339,  275,  276,  277,  278,   -1,
  280,   -1,  265,   -1,  267,   -1,  286,  270,   -1,  289,
   -1,   -1,  275,  358,   -1,   -1,  296,  280,  363,   -1,
   -1,  301,   -1,  303,  304,  305,  289,   -1,   -1,  374,
  375,   -1,  377,  296,  379,   -1,   -1,  317,  301,  319,
  320,   -1,  305,  323,   -1,   -1,  326,  392,  328,   -1,
  330,  331,  332,  333,  317,  335,  319,   -1,   -1,   -1,
  323,   -1,  342,   -1,   -1,  345,  346,   -1,  331,  332,
   -1,   -1,  335,   -1,   -1,  338,   -1,   -1,   -1,  424,
  360,  361,  362,  363,  364,   -1,   -1,  367,  368,  369,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,   -1,
   -1,  364,   -1,  383,  384,  385,  386,   -1,   -1,   -1,
  390,   -1,  392,   -1,  377,   -1,   -1,   -1,  398,  399,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
   -1,  280,   -1,  423,  424,  425,  426,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,  424,  301,   -1,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,   -1,
  319,  320,   -1,   -1,  323,   -1,   -1,  326,   -1,  328,
   -1,  330,  331,  332,  333,   -1,  335,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  360,  361,  362,  363,  364,   -1,   -1,  367,  368,
  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,
   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,  398,
  399,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,   -1,  280,   -1,   -1,
   -1,   -1,   -1,  286,  423,  424,  289,  426,   -1,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,
  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,   -1,  319,  320,   -1,   -1,
  323,   -1,   -1,  326,   -1,  328,   -1,  330,  331,  332,
  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,  362,
  363,  364,   -1,   -1,  367,  368,  369,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,
  383,  384,  385,  386,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,   -1,   -1,   -1,  398,  399,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,   -1,  280,   -1,   -1,   -1,   -1,   -1,  286,
  423,  424,  289,  426,   -1,   -1,   -1,   -1,   -1,  296,
   -1,   -1,   -1,   -1,  301,   -1,  303,  304,  305,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  317,   -1,  319,  320,   -1,   -1,  323,   -1,   -1,  326,
   -1,  328,   -1,  330,  331,  332,  333,   -1,  335,   -1,
   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  360,  361,  362,  363,  364,   -1,   -1,
  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  377,   -1,   -1,   -1,   -1,   -1,   -1,  384,  385,   -1,
   -1,  264,  265,   -1,  267,  392,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,   -1,  280,   -1,   -1,
   -1,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,
   -1,   -1,   -1,  296,   -1,   -1,  423,  424,  301,  426,
  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,   -1,   -1,  317,   -1,  319,  320,   -1,   -1,
  323,   -1,   -1,  326,   -1,  328,   -1,  330,  331,  332,
  333,   -1,  335,   -1,   -1,  338,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,  361,  362,
  363,  364,   -1,   -1,  367,  368,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,  377,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,   -1,  280,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,  303,  304,
  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  423,  424,  317,   -1,  319,  320,   -1,   -1,  323,   -1,
   -1,  326,   -1,  328,   -1,  330,  331,  332,  333,   -1,
  335,   -1,   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  360,  361,  362,  363,  364,
   -1,   -1,  367,  368,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,  377,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,   -1,  280,   -1,  265,   -1,  267,   -1,  286,
  270,   -1,  289,   -1,   -1,  275,   -1,   -1,   -1,  296,
  280,   -1,   -1,   -1,  301,   -1,  303,  304,  305,  289,
   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,  423,  424,
  317,  301,  319,  320,   -1,  305,  323,   -1,   -1,  326,
   -1,  328,   -1,  330,  331,  332,  333,  317,  335,  319,
   -1,  338,   -1,  323,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,   -1,
   -1,   -1,   -1,  360,  361,  362,  363,  364,   -1,   -1,
  367,  368,   -1,   -1,   -1,   -1,  265,   -1,  267,   -1,
  377,  270,   -1,   -1,  273,   -1,  275,   -1,   -1,  278,
   -1,  280,   -1,  282,  283,  284,   -1,  377,  378,  288,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
   -1,   -1,  301,   -1,   -1,   -1,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,  423,  424,  317,   -1,
  319,   -1,   -1,   -1,  323,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  331,  332,  424,   -1,  335,   -1,   -1,  338,
  265,   -1,  267,   -1,  343,  270,   -1,   -1,  273,   -1,
  275,   -1,   -1,  278,   -1,  280,   -1,  282,  283,  284,
   -1,   -1,   -1,  288,  289,   -1,   -1,   -1,   -1,  294,
   -1,  296,  265,   -1,  267,   -1,  301,  270,  377,   -1,
  305,   -1,  275,   -1,  383,   -1,   -1,  280,   -1,  314,
   -1,   -1,  317,   -1,  319,   -1,  289,   -1,  323,   -1,
   -1,   -1,  295,  296,   -1,   -1,  331,  332,  301,   -1,
  335,   -1,  305,  338,  307,   -1,  309,   -1,  343,   -1,
   -1,  314,   -1,   -1,  317,  424,  319,   -1,   -1,   -1,
  323,   -1,   -1,  326,   -1,   -1,   -1,   -1,  331,  332,
   -1,   -1,  335,   -1,   -1,  338,  265,   -1,  267,   -1,
   -1,  270,  377,   -1,   -1,   -1,  275,   -1,   -1,   -1,
   -1,  280,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  289,   -1,   -1,   -1,   -1,   -1,  295,  296,   -1,   -1,
   -1,   -1,  301,   -1,  377,  378,  305,   -1,  307,   -1,
  309,   -1,   -1,   -1,   -1,  314,   -1,   -1,  317,  424,
  319,   -1,   -1,   -1,  323,   -1,   -1,  326,   -1,   -1,
   -1,   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,
  265,   -1,  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,
  275,  424,   -1,   -1,   -1,  280,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  289,   -1,   -1,   -1,   -1,   -1,
  295,  296,   -1,   -1,   -1,   -1,  301,  376,  377,   -1,
  305,   -1,  307,   -1,   -1,   -1,   -1,   -1,   -1,  314,
   -1,   -1,  317,   -1,  319,   -1,   -1,   -1,  323,   -1,
   -1,  326,   -1,   -1,   -1,   -1,  331,  332,   -1,   -1,
  335,   -1,   -1,  338,  265,   -1,  267,   -1,   -1,  270,
   -1,   -1,   -1,   -1,  275,  424,   -1,   -1,   -1,  280,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,  364,
   -1,   -1,   -1,   -1,  295,  296,   -1,   -1,   -1,   -1,
  301,   -1,  377,   -1,  305,   -1,  307,   -1,  309,   -1,
   -1,   -1,   -1,  314,   -1,   -1,  317,   -1,  319,   -1,
   -1,   -1,  323,   -1,   -1,  326,   -1,   -1,   -1,   -1,
  331,  332,   -1,  265,  335,  267,   -1,  338,  270,   -1,
   -1,   -1,   -1,  275,   -1,   -1,   -1,   -1,  280,  424,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,   -1,   -1,
   -1,   -1,   -1,  295,  296,   -1,   -1,   -1,   -1,  301,
   -1,   -1,   -1,  305,   -1,  307,  377,  309,   -1,   -1,
   -1,   -1,  314,   -1,   -1,  317,   -1,  319,   -1,   -1,
   -1,  323,   -1,   -1,  326,   -1,   -1,   -1,   -1,  331,
  332,   -1,  265,  335,  267,   -1,  338,  270,   -1,  272,
   -1,   -1,  275,   -1,   -1,   -1,   -1,  280,   -1,   -1,
   -1,   -1,   -1,  424,   -1,   -1,  289,   -1,   -1,  261,
   -1,  263,   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,
  303,   -1,  305,   -1,   -1,  377,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  285,  317,   -1,  319,   -1,   -1,   -1,
  323,  324,   -1,   -1,   -1,   -1,  298,   -1,  331,  332,
   -1,  303,  335,   -1,   -1,  338,  308,   -1,  310,  311,
  312,  313,   -1,   -1,   -1,   -1,  318,  261,   -1,   -1,
  322,   -1,  424,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  334,   -1,   -1,  337,   -1,  339,   -1,   -1,
   -1,  285,   -1,   -1,  377,   -1,   -1,  261,   -1,   -1,
   -1,   -1,   -1,   -1,  298,   -1,   -1,   -1,  302,  303,
   -1,  363,   -1,   -1,  308,   -1,  310,  311,  312,  313,
   -1,  285,  374,   -1,  318,   -1,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,  298,   -1,   -1,   -1,   -1,  303,
  334,  424,   -1,  337,  308,  339,  310,  311,  312,  313,
   -1,   -1,   -1,   -1,  318,   -1,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,
  334,   -1,   -1,  337,   -1,  339,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,
  };

#line 7849 "cs-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		expr.Error_InvalidExpressionStatement (report);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments when using language version older than 7.2");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

object Error_AwaitAsIdentifier (object token)
{
	if (async_block) {
		report.Error (4003, GetLocation (token), "`await' cannot be used as an identifier within an async method or lambda expression");
		return new LocatedToken ("await", GetLocation (token));
	}

	return token;
}

void push_current_container (TypeDefinition tc, object partial_token)
{
	if (module.Evaluator != null){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();

		undo.AddTypeContainer (current_container, tc);
	}
	
	if (partial_token != null)
		current_container.AddPartial (tc);
	else
		current_container.AddTypeContainer (tc);
		
	++lexer.parsing_declaration;
	current_container = tc;
	current_type = tc;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDefinition;

	return retval;
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

[System.Diagnostics.Conditional ("FULL_AST")]
void PushLocation (Location loc)
{
	if (location_stack == null)
		location_stack = new Stack<Location> ();

	location_stack.Push (loc);
}

Location PopLocation ()
{
	if (location_stack == null)
		return Location.Null;

	return location_stack.Pop ();
}

string CheckAttributeTarget (int token, string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	if (!Tokenizer.IsValidIdentifier (a)) {
		Error_SyntaxError (token);
	} else {
		report.Warning (658, 1, l,
			 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	}

	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file, ParserSession session)
	: this (reader, file, file.Compiler.Report, session)
{
}

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file, Report report, ParserSession session)
{
	this.file = file;
	current_container = current_namespace = file;
	
	this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	yacc_verbose_flag = settings.VerboseParserFlag;
	doc_support = settings.DocumentationFile != null;
	lexer = new Tokenizer (reader, file, session, report);
	oob_stack = new Stack<object> ();
	lbag = session.LocationsBag;
	use_global_stacks = session.UseJayGlobalArrays;
	parameters_bucket = session.ParametersStack;
}

public void parse ()
{
	eof_token = Token.EOF;
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			if (report.Errors == 0)
				report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc);
	}

	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariable) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;
	
	// Avoid duplicit error message after unterminated string literals
	if (token == Token.LITERAL && lexer.Location.Column == 0)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
	case Token.DEFAULT_VALUE:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
	case Token.EXTERN_ALIAS:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
	case Token.REF_STRUCT:
	case Token.REF_PARTIAL:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
	case Token.THROW_EXPR:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.REFVALUE:
		return "__refvalue";
	case Token.REFTYPE:
		return "__reftype";
	case Token.MAKEREF:
		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS_DECONSTRUCT:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
	case Token.WHEN:
		return "when";
	case Token.INTERPOLATED_STRING_END:
		return "}";
	case Token.INTERPOLATED_STRING:
		return "${";

	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
	case Token.INTERR_OPERATOR:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DEFAULT_VALUE = 277;
  public const int DELEGATE = 278;
  public const int DO = 279;
  public const int DOUBLE = 280;
  public const int ELSE = 281;
  public const int ENUM = 282;
  public const int EVENT = 283;
  public const int EXPLICIT = 284;
  public const int EXTERN = 285;
  public const int FALSE = 286;
  public const int FINALLY = 287;
  public const int FIXED = 288;
  public const int FLOAT = 289;
  public const int FOR = 290;
  public const int FOREACH = 291;
  public const int GOTO = 292;
  public const int IF = 293;
  public const int IMPLICIT = 294;
  public const int IN = 295;
  public const int INT = 296;
  public const int INTERFACE = 297;
  public const int INTERNAL = 298;
  public const int IS = 299;
  public const int LOCK = 300;
  public const int LONG = 301;
  public const int NAMESPACE = 302;
  public const int NEW = 303;
  public const int NULL = 304;
  public const int OBJECT = 305;
  public const int OPERATOR = 306;
  public const int OUT = 307;
  public const int OVERRIDE = 308;
  public const int PARAMS = 309;
  public const int PRIVATE = 310;
  public const int PROTECTED = 311;
  public const int PUBLIC = 312;
  public const int READONLY = 313;
  public const int REF = 314;
  public const int RETURN = 315;
  public const int REMOVE = 316;
  public const int SBYTE = 317;
  public const int SEALED = 318;
  public const int SHORT = 319;
  public const int SIZEOF = 320;
  public const int STACKALLOC = 321;
  public const int STATIC = 322;
  public const int STRING = 323;
  public const int STRUCT = 324;
  public const int SWITCH = 325;
  public const int THIS = 326;
  public const int THROW = 327;
  public const int TRUE = 328;
  public const int TRY = 329;
  public const int TYPEOF = 330;
  public const int UINT = 331;
  public const int ULONG = 332;
  public const int UNCHECKED = 333;
  public const int UNSAFE = 334;
  public const int USHORT = 335;
  public const int USING = 336;
  public const int VIRTUAL = 337;
  public const int VOID = 338;
  public const int VOLATILE = 339;
  public const int WHERE = 340;
  public const int WHILE = 341;
  public const int ARGLIST = 342;
  public const int PARTIAL = 343;
  public const int ARROW = 344;
  public const int FROM = 345;
  public const int FROM_FIRST = 346;
  public const int JOIN = 347;
  public const int ON = 348;
  public const int EQUALS = 349;
  public const int SELECT = 350;
  public const int GROUP = 351;
  public const int BY = 352;
  public const int LET = 353;
  public const int ORDERBY = 354;
  public const int ASCENDING = 355;
  public const int DESCENDING = 356;
  public const int INTO = 357;
  public const int INTERR_NULLABLE = 358;
  public const int EXTERN_ALIAS = 359;
  public const int REFVALUE = 360;
  public const int REFTYPE = 361;
  public const int MAKEREF = 362;
  public const int ASYNC = 363;
  public const int AWAIT = 364;
  public const int INTERR_OPERATOR = 365;
  public const int WHEN = 366;
  public const int INTERPOLATED_STRING = 367;
  public const int INTERPOLATED_STRING_END = 368;
  public const int THROW_EXPR = 369;
  public const int GET = 370;
  public const int SET = 371;
  public const int LAST_KEYWORD = 372;
  public const int OPEN_BRACE = 373;
  public const int CLOSE_BRACE = 374;
  public const int OPEN_BRACKET = 375;
  public const int CLOSE_BRACKET = 376;
  public const int OPEN_PARENS = 377;
  public const int CLOSE_PARENS = 378;
  public const int DOT = 379;
  public const int COMMA = 380;
  public const int COLON = 381;
  public const int SEMICOLON = 382;
  public const int TILDE = 383;
  public const int PLUS = 384;
  public const int MINUS = 385;
  public const int BANG = 386;
  public const int ASSIGN = 387;
  public const int OP_LT = 388;
  public const int OP_GT = 389;
  public const int BITWISE_AND = 390;
  public const int BITWISE_OR = 391;
  public const int STAR = 392;
  public const int PERCENT = 393;
  public const int DIV = 394;
  public const int CARRET = 395;
  public const int INTERR = 396;
  public const int DOUBLE_COLON = 397;
  public const int OP_INC = 398;
  public const int OP_DEC = 399;
  public const int OP_SHIFT_LEFT = 400;
  public const int OP_SHIFT_RIGHT = 401;
  public const int OP_LE = 402;
  public const int OP_GE = 403;
  public const int OP_EQ = 404;
  public const int OP_NE = 405;
  public const int OP_AND = 406;
  public const int OP_OR = 407;
  public const int OP_MULT_ASSIGN = 408;
  public const int OP_DIV_ASSIGN = 409;
  public const int OP_MOD_ASSIGN = 410;
  public const int OP_ADD_ASSIGN = 411;
  public const int OP_SUB_ASSIGN = 412;
  public const int OP_SHIFT_LEFT_ASSIGN = 413;
  public const int OP_SHIFT_RIGHT_ASSIGN = 414;
  public const int OP_AND_ASSIGN = 415;
  public const int OP_XOR_ASSIGN = 416;
  public const int OP_OR_ASSIGN = 417;
  public const int OP_PTR = 418;
  public const int OP_COALESCING = 419;
  public const int OP_GENERICS_LT = 420;
  public const int OP_GENERICS_LT_DECL = 421;
  public const int OP_GENERICS_GT = 422;
  public const int LITERAL = 423;
  public const int IDENTIFIER = 424;
  public const int OPEN_PARENS_LAMBDA = 425;
  public const int OPEN_PARENS_CAST = 426;
  public const int GENERIC_DIMENSION = 427;
  public const int DEFAULT_COLON = 428;
  public const int OPEN_BRACKET_EXPR = 429;
  public const int OPEN_PARENS_DECONSTRUCT = 430;
  public const int REF_STRUCT = 431;
  public const int REF_PARTIAL = 432;
  public const int EVAL_STATEMENT_PARSER = 433;
  public const int EVAL_COMPILATION_UNIT_PARSER = 434;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 435;
  public const int DOC_SEE = 436;
  public const int GENERATE_COMPLETION = 437;
  public const int COMPLETE_COMPLETION = 438;
  public const int UMINUS = 439;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
